openapi: 3.0.1
info:
  title: Prolific API for researchers
  description: ''
  version: '1.0'
  contact:
    name: Prolific's Community
    url: https://docs.prolific.com/docs/api-docs/public/
  license:
    name: Apache 2.0
    url: https://spdx.org/licenses/Apache-2.0.html
  x-konfig-ignore:
    object-with-no-properties: true
    potential-incorrect-type: true
servers:
  - description: Production
    url: https://api.prolific.com
tags:
  - description: "To recruit participants for your research, you create a draft study with your audience filters and cost and then publish the study to start recruiting.\n\nThis is a two step process because publishing a study to participants requires many different and complex steps.\n\n- Checking if your account has sufficient balance to pay participants\n- Locking the amount required\n- Launching our algorithm to find the best suitable participants for you\n- Sending emails and more\n\nBy separating it into 2 steps, researchers can be confident that their study is created, no information is lost and it can be updated before publishing.\n\nRelated guide: [Quick guide to using Prolific](https://researcher-help.prolific.com/hc/en-gb/articles/360034677314-Quick-guide-to-using-Prolific)\n![Study flow](https://assets.prolific.com/assets/img/api/study.jpg)\n\n## The study object\n\n**Important** **Attributes**\n\n---\n\n**status**\n\nThe status of a study can transition to one of the following.\n\n- **UNPUBLISHED**\_- When a study is created, it is in a draft format.\n- **ACTIVE**\_- Study is published to participants.\n- **SCHEDULED**\_- Study is scheduled to be published at a specific date. Study is ‘ACTIVE’ when published.\n- **PAUSED**\_- Study is paused, participants are not shown the study and can not make submissions.\n- **AWAITING REVIEW**\_- All participants submissions are completed and not all have been reviewed yet.\n- **COMPLETED**\_- You have approved all participant submissions required for your study. If you have rejected one or more submissions, the study goes back to 'AWAITING REVIEW' until the number of accepted submissions has been reached.\n\n---\n\n**external_study_url (required)**\n\nThe external study URL of your study that you want participants to be direct to. The URL can be customized to add information to match participants in your survey. You can add query parameters with the following placeholders.\n\n- `{{%PROLIFIC_PID%}}`\_-> Participant Id\n- `{{%STUDY_ID%}}`\_-> This study Id\n- `{{%SESSION_ID%}}`\_-> The session Id\n\nFor example, you can define\_`external_study_url`\_to be '[https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}'](https://eggs-experriment.com/?participant=%7B%7B%PROLIFIC_PID%%7D%7D%27).\n\nWhen participants access your study, they start a submission with their unique ID, allowing you to match their responses. You can approve or reject their submission, pay a bonus, or send a message against the unique ID.\n\n---\n\n**completion_codes (required)**\n\nCompletion codes are the mechanism used to ensure your participants have completed the study as designed.\n\nThe can also be used to segregate participants according to their answers in your study and perform some automated actions on study completion.\n\nThe completion code is a **required** field with a **random set of letters and numbers**. It is not unique and can be the same for every participant or different ones based on your workflows.\n\nWe recommend that at the end of the experiment or survey, the participant is directed back to the URL\_[https://app.prolific.com/submissions/complete?cc={code}](https://app.prolific.com/submissions/complete?cc=%7Bcode%7D).\n\nYou can have as many different codes as you like for any study. You can name these codes to make it easier to understand the intent of each code.\n\nYou can also assign any number of automated actions to be completed when a submission is completed with that code.\n\nActions available upon completion include:\n- Leaving the submission for manual review.\n- Automatically approving the submission.\n- Requesting that the submission is returned (with a reason for your request).\n- Adding the participant to a participant group.\n- Removing the participant from a participant group.\n\n---\n\n**filters (required)**\n\nFilters allow you to define participants criteria such as age, gender and country. Learn how to set them under\_[Requirements](https://docs.prolific.com/docs/api-docs/public/#tag/Filters).\n\nRelated guide: [Setting up a study on Prolific](https://researcher-help.prolific.com/hc/en-gb/articles/4407456015250)\n\n---\n\n**estimated_completion_time (required)**\n\nThis is your estimated duration of how long it would take for participants to complete your research.\n\nIf you have run the same or a very similar study before, you will have the data to best estimate the completion time. If you do not, we recommend publishing your study to a few participants to identify the average completion time, before launching it to all participants.\n\n**Correct a published study of the estimated time is too low**\n\nIf you have estimated the completion time too low and paid participants too little, you can pause your study and adjust the reward for already approved submissions via our web application before continuing to recruit participants with the increased reward.\n\n1. Pause your study using the PAUSE [transition](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1%7Bid%7D~1transition~1/post).\n2. Go to the submissions page (web application) and adjust payments for already approved submissions. A warning message is shown if participants are underpaid.\n3. Update your study and activate it again.\n\n**Correct a published study if the estimated time is too high**\n\nIf you estimated the time as too high and overpaid participants, you can ask the participants to return their studies voluntarily. They will not get paid, however, you should pay them the amount they have spent on your study manually.\n\n1. First, stop your study using the STOP [transition](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1%7Bid%7D~1transition~1/post).\n2. Message participants to RETURN their submissions voluntarily. Many will do, but you should pay them for their participation time via the Web application or bonus API.\n3. You can contact our support team for further help.\n4. Update your study cost and update your study to ACTIVE.\n\n---\n\n**rewards (required)**\n\nThe `reward` is the total reward you pay a participant in cents (according to the currency of your account) when you approve a completed submission. We display the reward per hour in our web application by using the reward and estimated time."
    name: Studies
  - description: >-
      Surveys are a way to perform prescreening on the Prolific Platform. You
      can link a Survey to a Study by setting the `external_study_url` on the
      Study to `https://prolific.com/surveys/[survey_id]`. You will need to
      define a Survey with the `sections` attribute, in order for this to render
      on the Prolific Application. See below for more details.
    name: Surveys
  - description: >-
      **This is an experimental feature that may be subject to change in the
      future.**


      Hooks deliver event data to your applications as it happens, offering an
      alternative to frequent data polling.


      The flow below shows the inbound nature of hook configuration. This is
      what is required to register your subscription.


      ![The inbound hook
      flow](https://assets.prolific.com/assets/img/api/hooks-inbound.png)


      Once your subscription is registered, the flow below shows the outbound
      nature of hooks.


      ![The outbound hook
      flow](https://assets.prolific.com/assets/img/api/hooks-outbound.png)


      ## Subscribing


      To get started, make a `GET` request to `/api/v1/hooks/event-types` to
      retrieve an up-to-date list of all the event types that we currently
      support. All event types will follow the `noun.verb` pattern, e.g.
      `study.status.change`. Make a note of the event type you’d like to
      subscribe to. You’ll need this later when setting up a subscription.


      In order to subscribe to an event, you’ll need to first set up a secret.
      Secrets are used in the verification step outlined below. Make a `POST`
      request to `/api/v1/hooks/secrets/` with the payload `{"workspace_id":
      <workspace_id>}`. This will create a new secret for your workspace and be
      returned in the response body. Keep this safe, and note that you can only
      have one active secret per workspace at a time.


      Next, make a `POST` request to `/api/v1/hooks/subscriptions/` with the
      payload `{"workspace_id": <workspace_id>, "event_type": <event_type>,
      "target_url": <target_url>}` to subscribe to your desired event.  If
      successful, the endpoint will return a response that includes an `id`
      field in its body. This is the unique identifier for your subscription. As
      well as this id, the response will contain a `X-Hook-Secret` header. Make
      a note of both of these. We’ll use them to confirm our intention to
      subscribe to our desired event type. Make a `POST` request to
      `/api/v1/hooks/<subscription_id>/` with the payload `{"secret":
      <x-hook-secret>}`. If subscription confirmation is successful, you should
      receive a `200` status code.


      ## Receiving


      Having successfully subscribed to our desired event type, our target url
      will be notified each and every time the associated event is triggered.
      You can react to this event in any way you see fit. The response body will
      adhere to the following structure:


      ```json

      {"resource_id": <resource_id>, "event_type": <event_type>}

      ```


      The `resource_id` field refers to the resource that is related to the
      triggered event. For example, for a `study.status.change` event type, the
      resource is study and `status.change` is the event.  To extend this
      example, you may wish to make a subsequent call to
      `/api/v1/studies/<workspace_id>` to find out exactly what status your
      study now has.


      ## Verifying


      Hooks have been implemented to provide a measure to verify the
      authenticity of a payload. This helps to ensure only payloads sent by
      Prolific are being accepted by your endpoint. Hook requests will contain
      two headers, `X-Prolific-Request-Signature` and
      `X-Prolific-Request-Timestamp`. The former represents signature and the
      latter represents a UNIX timestamp of when the request was sent.


      In order to verify the signature, you can create the same SHA256 Hashed
      Message Authentication Code (HMAC) signature and then compare it to
      `X-Prolific-Request-Signature`. To do this, sign the request body and
      timestamp with your secret key using SHA256 and then base64 encode the
      resulting digest.


      ### Example with Python


      ```python

      encoded_secret = SECRET.encode()

      body = json.dumps(body)

      calculated_signature = base64.b64encode(
          hmac.new(
              encoded_secret, str.encode(timestamp + body), hashlib.sha256
          ).digest()
      )

      is_valid = hmac.compare_digest(
          calculated_signature, str.encode(signature)
      )

      ```
    name: Hooks
  - description: >-
      Filter sets allow you to combine multiple filters into a single re-usable
      template, which can be used across multiple studies to ensure the same
      demographic requirements are applied.


      These filters are then evaluated at study publish, with each study
      recruiting from the available pool of participants who satisfy the
      selected filters at that time.


      Note that when publishing a duplicated study which used a filter set, it
      will use the filters applied to the filter set at the time it was applied
      to the original study.

      This can be updated by changing the `filter_set_version` on the study to
      the latest `version`, as returned on the [filter set
      endpoint](http://127.0.0.1:8080/#tag/Filter-Sets/paths/~1api~1v1~1filter-sets~1{id}~1/get).
    name: Filter Sets
  - description: >-
      Participant groups are saved groups of participant IDs, so you can
      re-contact the exact same

      participants across studies.


      Participant groups allow you do the following:

      - Create a new participant group within the scope of a project.

      - Add and remove users manually to / from the participant group.

      - Use one or more participant groups as filters for a new study.

      - Combined with study completion codes, automatically add or remove
      participants from a group

      when they submit a response to your study with the correct code.
    name: Participant Groups
  - description: >-
      Study collections allow you to group studies together and automates
      creating complex interactions

      between studies. Initially, you can create mutually exclusive study
      collections. This allows you

      to:


      - Create a study collection.

      - Add studies you have created using the study API to the collection.

      - Publish the studies together.


      When your study collection is published, participants will be randomly
      assigned to one of the

      studies in your collection for which they are eligible. Once they have
      taken that study they will

      not be eligible to take any other study in the collection.
    name: Study Collections
  - description: "A new submission is created for each participant that joins your study. Once a submission is completed, you can approve, reject or ask participants to return the submission.\n\n![Submissions flow](https://assets.prolific.com/assets/img/api/submission.jpg)\n\nRelated guide: [Managing participants and submissions](https://researcher-help.prolific.com/hc/en-gb/categories/360000859913-Managing-participants-and-submissions)\n\n## Submissions guide\n\n**Approve, reject or return?**\n\n- **Approve**\n  Participants will receive the reward you have set immediately. Submissions that are awaiting review are automatically approved after 21 days. We recommend that researchers approve sooner than that.\n  Some of our customers prefer or like to start with auto-approval first to keep the flow simple.\n- **Reject**\n  Participants are penalised for rejections and if they receive too many they will be removed from the platform entirely. Please review all submissions holistically and remember that participants have spent time and effort taking your study.\n  Please think carefully about whether the rejection is justified, and try to keep rejections to a minimum.\n- **Return**\n  You can message participants to ask if they can return their submission and not get rewarded. This is useful if they for example have encountered a technical issue. Many would voluntarily do so to avoid rejection.\n\nRelated guide: [Approval, rejections and returns](https://researcher-help.prolific.com/hc/en-gb/articles/360009092394-Approvals-rejections-returns)\n\n---\n\n**Does rejecting a participant automatically open a spot for a new participant?**\n\nIf your study is ACTIVE (i.e. you haven’t received all the required submissions), then it will automatically open a spot for a new participant when you reject a submission.\n\nIf your study is in AWAITING REVIEW (i.e. you have received all required submissions), you need to change the status back to ACTIVE START [transition](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1%7Bid%7D~1transition~1/post) to replace the rejected submissions.\n\n---\n\n**Does a participant returning their submission automatically open a spot for a new participant?**\n\nIf your study is ACTIVE (i.e. you haven’t received all the required submissions), then it will automatically open a spot for a new participant when you reject a submission.\n\nIf your study is in AWAITING REVIEW (i.e. you have received all required submissions), you need to change the status back to ACTIVE START [transition](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1%7Bid%7D~1transition~1/post) to replace the rejected submissions.\n\n---\n\n**What happens if a participant takes too much time to complete the study?**\n\nIf a participant takes too much time, the submission will time out and they will lose their access to the study URL. A new participant will take their place instead. The max time allowed is dependent on the estimated time for the study. It is always less than 24 hours.\n\nYou can control the timeout of your experiment using `maximum_allowed_time`, but you can not set it lower than the default documented in the [create study draft API](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1/post).\n\n---\n\n**I cannot see my study on my participant account. Why is that?**\n\nBy default, studies are visible to all eligible participants based on our algorithm. Prolific’s algorithm prioritises participants based on how often they participate, acceptance rate and many more data points to provide a balanced participation opportunity between very active and less active participants.\n\nIn order to bypass the algorithm, you would need to publish your study to the participants you want by using the allow list.\n\nCheck the [testing guide](https://docs.prolific.com/docs/api-docs/public/#tag/Testing) on how to test your integration and create participant test accounts.\n\n\n```JSON\n\"filters\": [\n  {\n    \"filter_id\": \"custom_allowlist\",\n    \"selected_values\": [\n      \"61f292141b0ec8b3b5ab353\",\n      \"61f2914e3bb4b4d40080aec\"\n    ]\n  }\n]\n```\n\n---\n\n**How can I verify or validate the participant ids?**\n\nYou can use the `SESSION_ID` URL parameter in the external study URL to get the [submission details](https://docs.prolific.com/docs/api-docs/public/#tag/Submissions/paths/~1api~1v1~1submissions~1%7Bid%7D~1/get) and confirm that it belongs to the participant.\n\nOur ids follow a pattern of\_`[a-f\\d]{24}` with only numbers and the letters a, b, c, d, e, and f with a length of 24.\n\n---\n\n## Submission object\n\nA submission transitions through multiple statuses.\n\n- **RESERVED** - Initial state, the participant got a place for your study. By default, we reserve the study place for 10 minutes.\n\n- **ACTIVE** - The participant has started your experiment or survey.\n\n- **TIMED-OUT** - The submission has timed out, the participant does not have access to the study link.\n  The max time allowed is calculated based on the estimated time for the study, it is always less than 24 hours.\n\n- **AWAITING REVIEW** - The participant has completed your experiment or survey.\n\n- **APPROVED** - The submission has been approved and paid.\n\n- **RETURNED** - The participant returns their submission, acknowledging they will not be paid for it. The study place becomes available for another participant.\n\n- **REJECTED** - Submission has been rejected. The participant is not paid. The study place becomes available for another participant.\n\nRelated guide: [Submission statuses explained](https://researcher-help.prolific.com/hc/en-gb/articles/360009094114-Submission-statuses-explained)"
    name: Submissions
  - description: >-
      Workspaces are a new way for you to collaborate with your teammates and
      organise research on Prolific. Each workspace has its own set of projects,
      studies, team members and funds.


      Related guide:
      [Workspace](https://researcher-help.prolific.com/hc/en-gb/sections/4500136384412-Workspaces)


      Please [submit a
      request](https://researcher-help.prolific.com/hc/en-gb/requests/new) for
      feedback or feature request.
    name: Workspaces
  - description: >-
      Messages with participants or other researchers.


      You can use messages to send reminders, thank participants or address
      their questions during your study or experiment.


      With workspaces, only the study publisher can view the messages by
      participants. To enable users to view messages related to a study they
      have access to is in our roadmap.
    name: Messages
  - description: Projects are a way to organise studies in a workspace.
    name: Projects
  - description: >-

      ## Filters Overview


      Filters allow you to restrict access to your study based on participant
      demographics and attributes.


      You can save combinations of filters, known as filter sets, to re-use
      across studies.

      These are useful if you're running multiple studies with the same audience
      filters.


      There are two types of filters:

      - A select type filter allows you to select one or more options from a
      list of pre-defined choices.

      - A range type filter allows you to select an upper and / or a lower bound
      for a given participant attribute.


      To understand which filters are available to use, perform a GET request to
      the [filters list endpoint](https://docs.prolific.com).

      For each filter a `type` and a `data_type` attribute will be returned.


      ![The filters
      flow](https://assets.prolific.com/assets/img/api/filters.png)


      To use filters in a filter set, [create a filter
      set](https://docs.prolific.com) with the correct filters selected, then
      [apply it to your study](https://docs.prolific.com) using the
      `filter_set_id` parameter.


      To use filters directly on a study, apply the filters using the `filters`
      parameter directly in the [study

      creation endpoint](https://docs.prolific.com).


      For example, if you wanted to recruit using the 'handedness' filter, you
      would see a filter in the filters `GET` request which looks like this:


      ```json

      {
        "filter_id": "handedness",
        "title": "Handedness",
        "description": "",
        "question": "Are you left or right handed?",
        "type": "select",
        "data_type": "ChoiceID",
        "choices": {
            "0": "Left",
            "1": "Right",
            "2": "Ambidextrous",
          },
      }

      ```


      To apply this filter to a filterset or a study, your payload would look
      like this:


      ```json

      {
        "filter_id": "handedness",
        "selected_values": ["0", "1"],
      }

      ```


      This would result in your study recruiting from all participants who
      answered that they are either left or right-handed, and would exclude
      those who answered that they were ambidextrous.


      Alternatively, if you wished to recruit using an age range filter, you
      would see this in your `GET` response:


      ```json

      {
        "filter_id": "age",
        "title": "Age",
        "description": "Participants were asked their date of birth. Please specify a current age range between min and max.",
        "question": "What is your date of birth?",
        "type": "range",
        "data_type": "integer",
        "min": 18,
        "max": 100,
      }

      ```


      To apply this filter to a filterset or a study, your payload would look
      like this:


      ```json

      {
        "filter_id": "age",
        "selected_range": {
          "lower": 18,
          "upper": 50,
        }
      }

      ```


      This would result in your study recruiting from all participants who at
      the time of publish were between 18 and 50 years old, inclusive.


      It is not necessary to always provide both a lower and upper bound on a
      range filter. For example, if you simply wished to recruit all
      participants over the age of 50, you could set this filter as follows:

        ```json
        {
          "filter_id": "age",
          "selected_range": {
             "lower": 50,
          }
        }
        ```

      ## Study Distribution (Quotas) with Filters

      With Prolific, you can create a study in which you can balance your sample
      based on a given set of eligibility

      criteria.


      For example, you may wish for your responses to be 50% male and 50% female
      participants, or 30% left handed and

      70% right handed participants.


      To do this, you would add a `weightings` argument to the filter.

      Weightings are expressed as ratios. Taking the 'handedness' example from
      above, if you wanted to distribute your

      study to 50% left handed participants and 50% right handed participants,
      you would use the following weighting:


      ```json

      {
          "filter_id": "handedness",
          "selected_values": ["0", "1"],
          "weightings": {
            "0": 1,
            "1": 1,
          },
      }

      ```


      Splitting your study into equal thirds for each response, your payload
      would look like this:


      ```json

      {
           "filter_id": "handedness",
           "selected_values": ["0", "1", "2"],
           "weightings": {
              "0": 1,
              "1": 1,
              "2": 1,
           },
      }

      ```


      Percentage integer values also work here, so if you wanted to distribute
      your study to 25% left handed and 75%

      right handed participants, you could use the following weighting:


      ```json

      {
          "filter_id": "handedness",
          "selected_values": ["0", "1"],
          "weightings": {
              "0": 25,
              "1": 75,
          },
      }

      ```


      You can specify the exact number of participants you want to recruit for
      each response. For example, if

      you wanted to recruit 10 left handed participants, 20 right handed
      participants and 5 people are ambidextrous,

      you could use the following:


      ```json

      {
           "filter_id": "handedness",
           "selected_values": ["0", "1", "2"],
           "weightings": {
                "0": 10,
                "1": 20,
                "2": 5,
           },
      }

      ```


      You can specify more than one weighting requirement on a single study, and
      your participants will be grouped by

      the combination of each weighting filter. For example, the request below
      would create a study where you would

      receive 25% left handed women, 25% right handed women, 25% left handed men
      and 25% right handed men.


      ```json

      {
           "filter_id": "handedness",
           "selected_values": ["0", "1"],
           "weightings": {
                "0": 1,
                "1": 1,
           },
      },

      {
           "filter_id": "sex",
           "selected_values": ["0", "1"],
           "weightings": {
                "0": 1,
                "1": 1,
           },
      },

      ```



      Please note, study distribution with weightings is only supported for
      select type filters, weightings cannot be

      added to range filters.


      To see an example of using weightings filters in a study, please see the
      request samples area of

      [Studies](https://docs.prolific.com).
    name: Filters
  - description: >-
      Pay bonuses for exceptional submissions or follow-up research. Bonuses can
      be created in bulk for multiple participants in the same study.


      ![Bonus flow](https://assets.prolific.com/assets/img/api/bonus.jpg)


      Note: We do not support concurrent requests. You can only pay a bonus to
      one participant at a time via our web application. You can bulk pay
      bonuses via the API. If you see any issues with your bulk bonus payment,
      please contact the support team by [submitting a
      request](https://researcher-help.prolific.com/hc/en-gb/requests/new).
    name: Bonuses
  - description: |-
      A user is associated with an account, their credentials and their API
      token.
    name: Users
  - description: >-
      <span  style="font-size:x-large">**Deprecated - please use
      [Filters](https://docs.prolific.com/docs/api-docs/public/#tag/Filters)
      instead.**</span>


      At Prolific, our participant pool is made up of a wide range of
      participants. To target particular participants, you can apply
      prescreening filters (e.g. age, gender, nationality) to the studies. For
      more information, you can read the [Demographic Prescreening Help
      Guide](https://researcher-help.prolific.com/hc/en-gb/articles/360009221093).


      When creating or updating a study, use the participant eligibility
      requirements object to apply the prescreening filters. Before you dive
      into the API and the technical details, you can look at our [participants
      calculator](https://prolific.com/#check-sample).


      The Eligibility Requirements can be complicated. If yours still doesn’t
      work, please [submit a
      request](https://researcher-help.prolific.com/hc/en-gb/requests/new) with
      you your curl command.


      **Not supported**:


      - Prolific does not support prescreening participants or similar features
      to MTurk qualifications. We recommend the multi-part study with the 1st
      one to qualify the participants and the 2nd to run your research.
        If you want even greater control, you can leverage the `PreviousStudiesEligibilityRequirement` and `PreviousStudiesAllowlistEligibilityRequirement` requirements to filter participants by their entered
        completion codes (you can set these up on study creation).

        We are looking at various approaches in the future.

      ## Requirements object


      ---


      **AgeRangeEligibilityRequirement**


      This filter allows you to apply a participant age range based on their
      date of birth. You can select the age range from 18 to 100 with the
      `min_age` and `max_age` configuration. Both `min_age` and `max_age` can be
      sent as two different objects in the attributes array. Please note, the
      age range is inclusive of `max_age`.


      All the necessary information for the payload, including the class name of
      the requirement (`_cls`), the attributes array, and the unique id of the
      question (`query.id`), can be sourced from the
      `/api/v1/eligibility-requirements/` endpoint.


      The structure of each requirement object in the payload is as follows:


      - **_cls**: The class name of the requirement. It specifies the type of
      requirement (e.g. AgeRangeEligibilityRequirement).

      - **attributes**: An array of attribute objects. Each object in the array
      represents an option or answer. It has two properties:
        - **name**: The name of the attribute (`min_age` or `max_age`).
        - **value**: An integer that denotes the age limit.
      - **query**: An object that contains the id attribute. The `query.id`
      relates to the id of the question to which the object relates.


      Here is an example of how to format your request:


      ```json
        ...
        {
            "eligibility_requirements": [
                {
                    "_cls": "web.eligibility.models.AgeRangeEligibilityRequirement",
                    "attributes": [
                        {"name": "min_age", "value": 25},
                        {"name": "max_age", "value": 35},
                    ],
                    "query": {"id": "63567529751d8c97b6f7d16d"},
                }
            ]
        }
      ```


      ---


      **ApprovalNumbersEligibilityRequirement**


      Recruit participants based on min and/or max number of approved
      submissions. You can send both `minimum_approvals` and `maximum_approvals`
      as two different objects in the attributes array.


      - To include participants that have 100 or more approved submissions, set
      `minimum_approvals` to value 100.


      - To include participants that have 200 or less approved submissions, set
      `maximum_approvals` to value 200.


      ---


      **ApprovalRateEligibilityRequirement**


      Target participants based on minimum or maximum approval rate, the
      percentage of approved studies. We use the upper bound of the 95%
      confidence interval to calculate approval rate. You can send both
      `minimum_approval_rate` and `maximum_approval_rate` as two different
      objects in the attributes array.


      - To include participants that have 95% approval rate or higher, set
      `minimum_approval_rate` to value 95.


      - To include participants that have 95% approval rate or lower, set
      `maximum_approval_rate` to value 95.


      ---


      **JoinedBeforeEligibilityRequirement**


      Only include participants who joined Prolific before a specified date
      (e.g. Participants who joined Prolific before 01/09/21).


      To include participants that have joined on the first of September 2021 or
      before, you can send an attribute with `joined_before` and value
      `2020-09-01`. The format of the date is YYYY-MM-DD.


      ---


      **PreviousStudiesAllowlistEligibilityRequirement**


      Include participants from selected completed studies. You can include
      participants from multiple studies by sending multiple attributes. <a
      href='https://researcher-help.prolific.com/hc/en-gb/articles/360015365674'>Read
      about how to invite specific participants to your study.</a>


      To include participants from a study, you can include the `id` and `value`
      attributes. Additionally, if you want to filter these participants to
      allow only those that have made a submission with a specific completion
      code, you can send the `completion_codes` attribute as an array of
      strings.


      ```json
        {
            ...
            "eligibility_requirements": [
                {
                    "_cls": "web.eligibility.models.PreviousStudiesAllowlistEligibilityRequirement",
                    "attributes": [
                        {
                            "id": "6356a58d1da9da204b53a076",
                            "value": true,
                            "completion_codes": [
                                "CODE"
                            ]
                        }
                    ],
                }
            ]
        }
      ```


      To add previous participants whose response wasn't approved, please
      instead use a custom allowlist.


      ---


      **PreviousStudiesEligibilityRequirement**


      Exclude participants from the selected completed studies regardless of
      their submission status. You can exclude participants from multiple
      studies by sending multiple attributes. <a
      href='https://researcher-help.prolific.com/hc/en-gb/articles/360009094374'>Read
      about how to prevent certain participants from accessing your study.</a>


      To exclude participants from a study, you can include the `id` and `value`
      attributes. Additionally, if you want to filter these participants to
      block only those that have made a submission with a specific completion
      code, you can include the `completion_codes` attribute as an array of
      strings.


      ```json
        {
            ...
            "eligibility_requirements": [
                {
                    "_cls": "web.eligibility.models.PreviousStudiesEligibilityRequirement",
                    "attributes": [
                        {
                            "id": "6356a58d1da9da204b53a076",
                            "value": true,
                            "completion_codes": [
                                "CODE"
                            ]
                        }
                    ],
                }
            ]
        }
      ```

      ---


      **CustomWhitelistEligibilityRequirement**


      A comma-separated list of participant and/or submission IDs for users you
      want to participate in the study.


      ONLY these participants will be eligible for this study. (i.e.
      longitudinal design)


      To include participants by id, you can send an attribute with `white_list`
      and value an array of participant ids.


      You may also provide submission ids, which will be converted to their
      corresponding participant ids.


      _»Note» We are working on renaming it to
      CustomAllowlistEligibilityRequirement._


      ---


      **Custom Blacklist - CustomBlacklistEligibilityRequirement**


      A comma-separated list of participant and/or submission IDs of the users
      you wish to make ineligible for the study.


      To exclude participants by id, you can send an attribute with `black_list`
      and value an array of participant ids.


      You may also provide submission ids, which will be converted to their
      corresponding participant ids.


      _»Note» We are working on renaming it to
      CustomBlocklistEligibilityRequirement._


      ---


      **Other Prescreen Requirements filters**


      Prescreening requirement filters enable participants to select one or
      multiple options/answers. The filters are of two types:


      - **Single Select - SelectAnswerEligibilityRequirement**: Participants can
      select one option. Example: "In what country do you currently reside?"


      - **Multi Select - MultiSelectAnswerEligibilityRequirement**: Participants
      can select multiple options. Example: "Which of the following languages
      are you fluent in?"


      All the necessary information for the payload can be sourced from the
      `/api/v1/eligibility-requirements/` endpoint. This endpoint provides the
      data structure for each requirement, including the class name (`_cls`),
      the attributes array, and the unique id of the question (`query.id`).


      The structure of each requirement object in the payload is as follows:


      - **_cls**: The class name of the requirement. It specifies the type of
      requirement (e.g. Single Select or Multi Select).

      - **attributes**: An array of attribute objects. Each object in the array
      represents an option or answer. It has two properties:
        - **value**: A boolean that denotes if this option/answer is selected. Setting it to `true` includes the participants who have selected this option/answer. You only need to provide the attributes objects for those with `value: True`. The other options will default to `false`.
        - **index**: The position of this option/answer in the array. The indexing starts from 0.
      - **query**: An object that contains the id attribute. The `query.id`
      relates to the id of the question to which the object relates.


      Here is an example of how to format your request:


      ```json
        {
            ...
            "eligibility_requirements": [
                {
                    "_cls": "web.eligibility.models.SelectAnswerEligibilityRequirement",
                    "attributes": [
                        {"value": True, "index": 0},
                    ],
                    "query": {"id": "63567529751d8c97b6f7d16d"},
                }
            ]
        }
      ```


      ---


      **About unique Ids**


      If you are using React or other component framework to render these
      requirements, you might need a unique id for every requirement.

      At the moment there is not one, but you can use the `question.id` if
      present or the `_cls` if the question id was missing to build a unique id.
    name: Eligibility requirements
  - description: >-
      Invitations are an integral part of Prolific that facilitate collaboration
      and project management.


      - **Workspace Invitations** - These are issued to invite users to
      collaborate in a shared workspace.

      - **Project Invitations** - Project invitations are used to invite users
      to participate or collaborate on a specific project.


      Through the Invitations API, you can create these various types of
      invitations.


      Invitations contain an 'association' attribute which can refer to a
      workspace or a project to which the user is being invited.
    name: Invitations
  - description: "With Prolific's API, you can recruit high-quality participants and manage your research workflows programmatically through your own app.\n\n- **Study** - Create, update, and publish your Prolific studies\n- **Submissions** - Approve and reject submissions programmatically\n- **Bonus** - Pay a bonus to high-performing submissions\n- **Messages** - Send and receive participant messages\n- **Workspaces** - Collaborate with your teammates and organise research\n- **Survey** - Create quick prescreening studies\n- **Participant groups** - Manage lists of participants that you can use to launch studies\n- **Hooks** - Be notified of certain events happening on your studies\n\n![Prolific overview](https://assets.prolific.com/assets/img/api/overview.jpg)\n\n**Tip**: If you are not ready for an API integration you can simply use our Web application to create studies to recruit participants and redirect them to your platform by providing a [Study URL](https://researcher-help.prolific.com/hc/en-gb/articles/360009223173-#heading-3).\n\n**Not supported**: The Prolific API does **not** support account management such as topping up your account or user management. Such features are only available in our web application. New or advanced features available in the web application may also not be available. If there are any capabilities you need that are not documented, please contact our [support team](https://researcher-help.prolific.com/hc/en-gb/requests/new).\n\n## Basic\n\nThe API follows the standard REST approach of\n\n- URLs entry point is `https://api.prolific.com/api/`.\n\n- URLs are versioned `https://api.prolific.com/api/v1/endpoints/`, so we might do a v2 version in the future.\n\n- We strongly aim for backward compatibility for the documented endpoints.\n\nThere are two URLs per resource and use HTTP methods to operate on resources.\n\n- A collection URL `/api/v1/endpoints/`. The collection endpoint is used to retrieve a list of resources (GET) and create a new resource (POST)\n\n- An element URL `/api/v1/endpoints/<id>/`. The element URL is used to retrieve a single resource (GET), apply a delta (PATCH), replace existing resource (PUT) and delete (soft or hard) a resource (DELETE).\n\n**Optional request header Referer**\n\nFor example:\n\n- Referer: https://yourlibrary.org/v3.1/\n- Referer: https://yourapp.com/connect/prolific\n\nIf you are providing a library or framework to be used by multiple accounts, sending **Referer**\nwith your requests can help us identify issues with libraries and we can give a better support for those accounts.\nIncluding the version of the library in the referrer url if there are multiple versions is welcomed.\n\nIf you are using the API from your app, you can include the **Referer** with the full url.\n\n## Authentication\n\nThe Prolific API uses **API tokens** to authenticate requests. You can view and manage your API tokens in **Settings > API Tokens**.\n\nThe Prolific API tokens have no expiry date and are best used for server-to-server communication only. We advise rotating API tokens as required.\n\nWe do not recommend you integrate with the Prolific API directly from your web application. This would expose your tokens publically.\n\n## Versioning and stability\n\nWe strongly aim for backward compatibility for the documented endpoints. If backwards-incompatible changes are made, we will aim to release a new version.\n\n- URLs’ entry point is\_`https://api.prolific.com/api/`.\n- URLs are versioned\_`https://api.prolific.com/api/v1/endpoints/`\n\nOur web application uses the same API and applies the same high-security standards.\n\n## Rate limits and API status\n\nThe Prolific API has the same rate limit and availability as our web application.\nYou can subscribe to our status page [https://status.prolific.com](https://status.prolific.com).\n\n## Account balance\n\nPublishing studies requires an available balance in your account. You can only check your balance on our web application.\n\n## API support\n\nIf you require help you can [submit a request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to our support team."
    name: Introduction
  - description: >-

      The Prolific API uses standard HTTP response codes to indicate the success
      or failure of the request. Codes follow this pattern:


      - 2xx codes indicate success.

      - 4xx codes indicate a request that failed given the information provided
      (e.g. a required parameter was omitted).

      - 5xx codes indicate an error with Prolific's platform.

      ## Error codes

      | Code |
      Description                                                                                                                                 
      |

      | ---- |
      --------------------------------------------------------------------------------------------------------------------------------------------
      |

      | 400  | Bad Request - The request was unacceptable. Check the response
      for more
      details.                                                             |

      | 401  | Unauthorized - No valid token was
      provided.                                                                                                 
      |

      | 403  | Forbidden - You do not have access to this
      resource.                                                                                        
      |

      | 404  | Not Found - The resource does not
      exist.                                                                                                    
      |

      | 405  | Method Not Allowed - You tried to access a resource with an
      invalid
      method.                                                                  |

      | 422  | Unprocessable entity - A validation error on a well-formed
      request. Check the response for more
      details.                                     |

      | 429  | Too many requests - You have sent too many requests (either in
      general, for a resource or for a related resource) in a given amount of
      time. |


      If the error is unclear or none of the above applies, please [submit a
      request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to
      our support team with the request body.
    name: Errors
  - description: >-
      With Prolific, you can create a study in which you can balance your sample
      based on a given set of eligibility

      criteria.


      For example, you may wish for your responses to be 50% male and 50% female
      participants, or 30% left handed and

      70% right handed participants.


      For more information on how to do this, please see
      [Filters](https://docs.prolific.com/docs/api-docs/public/#tag/Filters/Study-Distribution-(Quotas)-with-Filters)
    name: Study Distribution
  - description: >-
      <span  style="font-size:x-large">**Deprecated - please use
      [Filters](https://docs.prolific.com/docs/api-docs/public/#tag/Filters/Study-Distribution-(Quotas)-with-Filters)
      instead.**</span>


      This guide will walk you through the steps to utilise the quota balancing
      feature, which allows you to balance your participant sample based on
      specific requirements.


      **1. Get Eligibility Requirements**
        - To retrieve a list of all available eligibility requirements that can be used to filter participants, send a `GET` request to the following endpoint:
        `/api/v1/eligibility-requirements/`.

      **2. Find the Desired Question and Responses**
        - In the JSON response from the previous step, locate the question you want to balance on by checking the title field under each query object. Once you find the desired question, note its `id`` field.

          Additionally, take note of the attributes array within the query object, which contains each possible response. You will use these to construct the responses in Step 3. The index field in the attributes array will map to the `response_index` in the quota requirements.

          For example, if you want to balance on the “Sex” question, search for a query object with a title containing the word “Sex” and record the corresponding id. Then, record the attributes array, which may look like this:

          ```json
          [
            {
              "label": "Male",
              "name": "Male",
              "value": false,
              "index": 0
            },
            {
              "label": "Female",
              "name": "Female",
              "value": false,
              "index": 1
            }
          ]
          ```

      **3. Create Study with Quota Requirements**

      - When creating your study, send a `POST` request to the following
      endpoint:
        `/api/v1/studies/`.

        Include the appropriate quota requirements in the request body, as well as the `study_type` field with the value `QUOTA`.

        Use the format below as a reference:

        ```json
        {
          "study_type": "QUOTA",
          "quota_requirements": [
            {
              "type": "SelectQuestionQuotaRequirement",
              "question": {
                "id": <question_id>
              },
              "responses": [
                {
                  "response_index": 0,
                  "weight": 0.5
                },
                {
                  "response_index": 1,
                  "weight": 0.5
                }
              ]
            }
          ],
          // Other study details...
        }
        ```

        Replace the `id` field with the question ID obtained in Step 2, and adjust the responses array to reflect the desired weight for each response option using the `response_index` values obtained from the attributes array in Step 2.
    name: Quota requirements
  - description: >-
      To confirm that your integration works correctly, you can simply publish
      studies to yourself as a participant. This requires credit for now, but we
      are exploring a sandbox option in the future. You can create a separate
      researcher account for testing purposes.


      **Create participant accounts for testing**


      1. [Submit a
      request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to
      our support team with
          - List of emails for the participant accounts (this cannot be the same as the researcher one)
          - The country you or your team is based for testing the participant accounts
      2. Log in to your participant test accounts.


      _If you want to be signed in with your researcher and participant account,
      use an incognito or a different browser for your participant account._


      **Publish test studies to testers only**


      1. Create a study draft with an allow list of participant test account
      IDs.

        ```json
        "filters": [
          {
            "filter_id": "custom_allowlist",
            "selected_values": [
              "61f292141b0ec8b3b5ab353",
              "61f2914e3bb4b4d40080aec"
            ]
          }
        ]
        ```

      2. Publish the study draft. The study will be visible in your participant
      account.

      3. Complete the study as a participant to test the flow.

      4. Approve or reject participants.


      _Rejected participants are downgraded and may not see new studies. If this
      occurs, please [submit a
      request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to
      our support team with the participant ID to reset your participant account
      for further testing._
    name: Testing
  - description: >-
      Once your integration is working as expected you can launch your
      integration with real participants at any time. If you intend to use it
      for a large number of participants, you can [submit a
      request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to
      our support team to keep an eye out for participants' messages.
    name: Launch your integration
paths:
  /api/v1/surveys/{survey_id}:
    get:
      tags:
        - Surveys
      summary: Get survey
      operationId: Surveys_getSurveyById
      security:
        - token: []
      description: Get a single survey given an ID.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyOut'
              examples:
                simple_with_sections:
                  description: A simple survey, one section, one question
                  value:
                    title: Do you like ice cream?
                    _id: 62fcb37ba792097ae2145c6c
                    date_created: '2022-08-17T09:23:07'
                    date_modified: '2022-08-17T09:23:07'
                    researcher_id: 6261321e223a605c7a4f7674
                    questions: []
                    sections:
                      - title: Ice cream
                        id: 75ac961f-d94a-4490-af8f-935ca088315f
                        questions:
                          - title: Do you like ice cream?
                            id: 3797222e-f731-4bea-838b-f668682d902d
                            type: single
                            answers:
                              - id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                value: 'Yes'
                              - id: a2de5745-b0b4-421b-98ec-23935c78be13
                                value: 'No'
                simple_with_questions:
                  description: A simple survey, one question
                  value:
                    title: Do you like ice cream?
                    _id: 62fcb37ba792097ae2145c6c
                    date_created: '2022-08-17T09:23:07'
                    date_modified: '2022-08-17T09:23:07'
                    researcher_id: 6261321e223a605c7a4f7674
                    sections: []
                    questions:
                      - title: Do you like ice cream?
                        id: 75ac961f-d94a-4490-af8f-935ca088315fX
                        type: single
                        answers:
                          - id: c72d8cf9-5429-40ae-ac74-10041ed68824X
                            value: 'Yes'
                          - id: a2de5745-b0b4-421b-98ec-23935c78be13X
                            value: 'No'
                multi_question:
                  description: Multiple questions
                  value:
                    title: Ice cream deep dive
                    _id: 62fcb37ba792097ae2145c6c
                    date_created: '2022-08-17T09:23:07'
                    date_modified: '2022-08-17T09:23:07'
                    researcher_id: 6261321e223a605c7a4f7674
                    sections:
                      - title: Ice cream
                        id: 75ac961f-d94a-4490-af8f-935ca088315fX
                        questions:
                          - title: Do you like ice cream on a cone?
                            id: 3797222e-f731-4bea-838b-f668682d902dX
                            type: single
                            answers:
                              - id: c72d8cf9-5429-40ae-ac74-10041ed68824X
                                value: 'Yes'
                              - id: a2de5745-b0b4-421b-98ec-23935c78be13X
                                value: 'No'
                          - title: What are your favourite flavours?
                            id: 672f8154-3506-4b52-a46c-3bc67bade4b2
                            type: multiple
                            answers:
                              - id: de6a49ce-5fa8-4b00-9c5c-89d3add21f2a
                                value: Chocolate
                              - id: 0ba4cf8c-237b-4d26-9be4-b01b7319e9a4
                                value: Vanilla
                              - id: f594ae1-48d2-4453-8488-d7db197b683a
                                value: Strawberry
                              - id: 41af0e8e-59fc-40d7-a2fc-e3b86ebac043
                                value: Mint
                              - id: 8595d4a0-4037-4f90-9ac2-8cab7548866e
                                value: Choc chip
                              - id: be4187ba-49a6-45ca-8e15-57390f5c8e41
                                value: Cookie dough
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Surveys
      summary: Delete survey
      operationId: Surveys_deleteSingleSurvey
      security:
        - token: []
      description: Delete a single Survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveysDeleteSingleSurveyResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/surveys/{survey_id}/responses/{response_id}:
    get:
      tags:
        - Surveys
      summary: Get response
      operationId: Surveys_getResponse
      security:
        - token: []
      description: Get a single response for a survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
        - name: response_id
          in: path
          required: true
          schema:
            title: Response Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyResponseOut'
              examples:
                simple:
                  value:
                    _id: 63063d07691a81e96a6e8494
                    date_created: '2022-08-24T15:00:23.325000'
                    date_modified: '2022-08-24T15:00:23.325000'
                    participant_id: 5c83c95d4c266300156edc01
                    submission_id: 63063cfc71fd74aad90886c4
                    sections:
                      - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                        questions:
                          - question_id: 3797222e-f731-4bea-838b-f668682d902d
                            question_title: Do you like ice cream?
                            answers:
                              - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                value: 'Yes'
                multi_question:
                  value:
                    _id: 63063d07691a81e96a6e8494
                    date_created: '2022-08-24T15:00:23.325000'
                    date_modified: '2022-08-24T15:00:23.325000'
                    participant_id: 5c83c95d4c266300156edc01
                    submission_id: 63063cfc71fd74aad90886c4
                    sections:
                      - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                        questions:
                          - question_id: 3797222e-f731-4bea-838b-f668682d902d
                            question_title: Do you like ice cream on a cone?
                            answers:
                              - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                value: 'Yes'
                          - question_id: 672f8154-3506-4b52-a46c-3bc67bade4b2
                            question_title: What are your favourite flavours?
                            answers:
                              - answer_id: de6a49ce-5fa8-4b00-9c5c-89d3add21f2a
                                value: Chocolate
                              - answer_id: 41af0e8e-59fc-40d7-a2fc-e3b86ebac043
                                value: Mint
                              - answer_id: 8595d4a0-4037-4f90-9ac2-8cab7548866e
                                value: Choc chip
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Surveys
      summary: Delete a response
      operationId: Surveys_deleteResponse
      security:
        - token: []
      description: Delete a single Response.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
        - name: response_id
          in: path
          required: true
          schema:
            title: Response Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveysDeleteResponseResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/users/me:
    get:
      tags:
        - Users
      summary: Retrieve a user
      operationId: Users_getUser
      security:
        - token: []
      description: >-
        Use this endpoint to test your token and retrieve the basic information
        of your account.


        Add an `Authorization` header with the value `Token <your token>`.
      parameters: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 60a42f4c693c29420793cb73
                email: your@email.com
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Retrieve your account details
  /api/v1/eligibility-requirements:
    get:
      tags:
        - Eligibility requirements
      summary: Get list of all requirements.
      operationId: EligibilityRequirements_getAllRequirements
      security:
        - token: []
      description: >-
        This endpoint is deprecated - please use
        [Filters](https://docs.prolific.com/docs/api-docs/public/#tag/Filters)
        instead.


        Get a list of all the requirements defined by Prolific that can

        be used to filter participants.
      parameters: []
      responses:
        '200':
          description: Full list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequirementsResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: true
    x-summary: All requirements
  /api/v1/messages:
    post:
      tags:
        - Messages
      summary: Send a message
      operationId: Messages_sendNewMessage
      security:
        - token: []
      description: Send a message to a participant or another researcher
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessage'
            examples:
              message_one_participant:
                value:
                  recipient_id: 619e049f7648a4e1f8f3645b
                  body: Thanks for participating in my study
                  study_id: 719e049f7648a4e1f8f3645a
        required: false
      responses:
        '204':
          description: The message has been sent
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
      x-codegen-request-body-name: messages
      x-summary: Send message
    get:
      tags:
        - Messages
      summary: Retrieve messages
      operationId: Messages_getMessages
      security:
        - token: []
      description: >-
        Get messages between you and another user or your messages with all
        users.
      parameters:
        - description: >-
            Another user ID, must be provided if no created_after date is
            provided.
          name: user_id
          in: query
          required: false
          schema:
            type: string
        - description: >-
            Only fetch messages created after timestamp. Datetime in ISO8601
            format. Must be provided if no user_id is provided. You can only
            fetch up to the last 30 days of messages.
          name: created_after
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
      x-summary: Get messages
  /api/v1/messages/unread:
    get:
      tags:
        - Messages
      summary: Retrieve unread messages
      operationId: Messages_getUnread
      security:
        - token: []
      description: >-
        Get all unread messages.

        The messages you have sent are never returned, only messages you have
        received and not read.

        It does not mark those messages as read.
      parameters: []
      responses:
        '200':
          description: Messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
  /api/v1/messages/bulk:
    post:
      tags:
        - Messages
      summary: Send a message to multiple participants
      operationId: Messages_sendToMultipleParticipants
      security:
        - token: []
      description: Send a message to multiple participants.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendBulkMessage'
            examples:
              message_multiple_participants:
                value:
                  ids:
                    - 619e049f7648a4e1f8f3645b
                    - 619e049f7648a4e1f8f3645c
                    - 619e049f7648a4e1f8f3645d
                  body: Thanks for participating in my study
                  study_id: 6569ece7ca177d19117b1b95
        required: false
      responses:
        '204':
          description: The message has been sent
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
      x-codegen-request-body-name: messages
      x-summary: Send message
  /api/v1/projects/{project_id}/studies:
    get:
      tags:
        - Studies
      summary: List all studies in a project
      operationId: Studies_listInProject
      security:
        - token: []
      description: List all of your studies in a project.
      parameters:
        - description: Project id
          name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of studies for the given project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudiesListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
  /api/v1/studies:
    get:
      tags:
        - Studies
      summary: List all studies
      operationId: Studies_listAll
      security:
        - token: []
      description: List all studies, with the option to filter by study status.
      parameters:
        - description: >-
            Filter studies by status. Accepts a string in the format
            "(active|published|...)", where "active" and "published" are example
            statuses.
          name: state
          in: query
          schema:
            type: string
            enum:
              - ACTIVE
              - PAUSED
              - UNPUBLISHED
              - PUBLISHING
              - COMPLETED
              - AWAITING REVIEW
              - UNKNOWN
              - SCHEDULED
      responses:
        '200':
          description: List of studies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudiesListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
    post:
      tags:
        - Studies
      summary: Create a draft study
      operationId: Studies_createDraftStudy
      security:
        - token: []
      description: >-
        Create a draft study. Publishing a study is a two step process, first
        create a draft study then publish it.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudy'
            examples:
              study_for_everybody:
                value:
                  description: This study aims to determine how to make a good public API
                  name: Study about API's
                  internal_name: WIT-2021 Study about API's version 2
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: url_parameters
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                    - code: DEF234
                      code_type: FOLLOW_UP_STUDY
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                        - action: ADD_TO_PARTICIPANT_GROUP
                          participant_group: 619e049f7648a4e1f8f3645b
                  total_available_places: 30
                  estimated_completion_time: 5
                  reward: 100
                  device_compatibility:
                    - desktop
                  peripheral_requirements: []
                  filters: []
              study_with_allow_list:
                value:
                  description: This study aims to determine how to make a good public API
                  name: Study about API's for selected participants
                  internal_name: WIT-2022 Study about API's version 2
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                    - code: DEF234
                      code_type: FOLLOW_UP_STUDY
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                        - action: ADD_TO_PARTICIPANT_GROUP
                          participant_group: 619e049f7648a4e1f8f3645b
                  total_available_places: 30
                  estimated_completion_time: 5
                  reward: 13
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  filters:
                    - filter_id: custom_allowlist
                      selected_values:
                        - 619e049f7648a4e1f8f3645b
              study_with_blocked_studies:
                value:
                  description: >-
                    This study is not accessible to participants of studies
                    319e049f7648a4e1f8f3645a and 919e049f7648a4e1f8f3645d
                  name: Study about APIs with blocked studies
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                    - code: DEF234
                      code_type: FOLLOW_UP_STUDY
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                        - action: ADD_TO_PARTICIPANT_GROUP
                          participant_group: 619e049f7648a4e1f8f3645b
                  total_available_places: 30
                  estimated_completion_time: 5
                  reward: 100
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  filters:
                    - filter_id: previous_studies_blocklist
                      selected_values:
                        - 619e049f7648a4e1f8f3645b
              minimal_study:
                value:
                  description: test
                  name: Test
                  external_study_url: https://google.com
                  reward: 100
                  total_available_places: 500
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: MANUALLY_REVIEW
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters: []
              study_in_project:
                value:
                  description: study in project
                  name: Study in project
                  external_study_url: https://google.com
                  reward: 100
                  total_available_places: 500
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                    - code: DEF234
                      code_type: FOLLOW_UP_STUDY
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                        - action: ADD_TO_PARTICIPANT_GROUP
                          participant_group: 619e049f7648a4e1f8f3645b
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters: []
                  project: 619e049f7648a4e1f8f3645b
              study_with_participant_group_allow_list:
                value:
                  description: This study aims to determine how to make a good public API
                  name: Study about API's for participants in my participant group
                  internal_name: WIT-2022 Study about API's version 2
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                    - code: DEF234
                      code_type: FOLLOW_UP_STUDY
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                        - action: ADD_TO_PARTICIPANT_GROUP
                          participant_group: 619e049f7648a4e1f8f3645b
                  total_available_places: 30
                  estimated_completion_time: 5
                  reward: 13
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  filters:
                    - filter_id: participant_group_allowlist
                      selected_values:
                        - 619e049f7648a4e1f8f3645b
              multiple_participant_groups_either_or:
                value:
                  description: >-
                    A participant can be in either of these groups to gain study
                    access
                  name: >-
                    Example where a participant can be in either participant
                    group
                  internal_name: Study with multiple participant groups
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                  total_available_places: 30
                  estimated_completion_time: 1
                  reward: 100
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  filters:
                    - filter_id: participant_group_allowlist
                      selected_values:
                        - 64514609c0265e1da4a74127
                        - 64660e2e0ce5307750bf5c99
              multiple_participant_groups_exclusive_to_both:
                value:
                  description: A participant has to be in both groups to gain study access
                  name: >-
                    Example where a participant has to be in both participant
                    groups
                  internal_name: Study with multiple participant groups
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                  total_available_places: 30
                  estimated_completion_time: 1
                  reward: 100
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  filters:
                    - filter_id: participant_group_allowlist
                      selected_values:
                        - 64514609c0265e1da4a74127
                    - filter_id: participant_group_allowlist
                      selected_values:
                        - 64660e2e0ce5307750bf5c99
              multi_submission_study:
                value:
                  description: >-
                    Allow a participant to have multiple submissions up to 10 on
                    the study
                  name: A multiple submission study
                  external_study_url: https://google.com
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: question
                  completion_option: url
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters: []
                  submissions_config:
                    max_submissions_per_participant: 10
              study_with_select_filters:
                value:
                  description: test
                  name: Test
                  external_study_url: https://google.com
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: MANUALLY_REVIEW
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters:
                    - filter_id: handedness
                      selected_values:
                        - '2'
              study_with_range_filters:
                value:
                  description: test
                  name: Test
                  external_study_url: https://google.com
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: MANUALLY_REVIEW
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters:
                    - filter_id: age
                      selected_range:
                        lower: 18
                        upper: 19
              study_with_filter_set:
                value:
                  description: test
                  name: Test
                  external_study_url: https://google.com
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: MANUALLY_REVIEW
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filter_set_id: 644b9cace850cb37684f0892
              study_with_weighted_filters:
                value:
                  description: test
                  name: Test
                  external_study_url: https://google.com
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: MANUALLY_REVIEW
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters:
                    - filter_id: handedness
                      selected_values:
                        - '1'
                        - '2'
                      weightings:
                        '0': 0.5
                        '1': 0.5
              study_labelled_as_interview:
                value:
                  description: >-
                    In this study you will join a video call where we'll ask you
                    some questions.
                  name: Video Interview
                  external_study_url: https://google.com
                  reward: 100
                  total_available_places: 500
                  prolific_id_option: question
                  completion_option: url
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: MANUALLY_REVIEW
                  device_compatibility:
                    - mobile
                    - desktop
                    - tablet
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters: []
                  study_labels:
                    - interview
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
      x-codegen-request-body-name: study
    x-summary: Create a draft study
  /api/v1/studies/{id}/transition:
    post:
      tags:
        - Studies
      summary: Publish a draft study
      operationId: Studies_publishDraftStudy
      security:
        - token: []
      description: >-
        Once the study is published, participants can partake in your experiment
        or survey.


        There are other status transitions available once the study is
        published:

        - PAUSE: Pause the study

        - START: Start a paused study

        - STOP: Stop a study completely, to make it active again you will need
        to increase the number of places


        To learn more about it check out [help
        center](https://researcher-help.prolific.com/hc/en-gb/articles/360010963354)
      parameters:
        - description: Study id
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              publish_study:
                value:
                  action: PUBLISH
              pause_study:
                value:
                  action: PAUSE
              restart_paused_study:
                value:
                  action: START
              stop_study:
                value:
                  action: STOP
            schema:
              $ref: '#/components/schemas/StudyTransition'
        required: false
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: study
    x-summary: Study publication
  /api/v1/studies/{id}:
    get:
      tags:
        - Studies
      summary: Retrieve a study
      operationId: Studies_getById
      security:
        - token: []
      description: >-
        Retrieve a study by id. If you are polling the API for updates to a
        study, consider using a [Hook](https://docs.prolific.com). We will call
        your endpoint when certain events occur on your study, such as new
        completed submissions or changes in status.
      parameters:
        - description: Study id
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Studies
      summary: Update a study
      operationId: Studies_updateStudyDetails
      security:
        - token: []
      description: >-
        You can update any field for a draft study.


        Once the study has been published only the following fields can be
        updated with some restrictions:

        - internal_name: Internal name of the study, not shown to participants

        - total_available_places: Only increasing is allowed. A completed study
        will become active again and resume recruiting of participants. For more
        information, check the
        [guide](https://researcher-help.prolific.com/hc/en-gb/articles/360009222553)
      parameters:
        - description: Study id
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              increase_places:
                value:
                  total_available_places: 200
              update_internal_name:
                value:
                  internal_name: new_internal_name
              update_completion_codes:
                value:
                  completion_codes:
                    - code: ABC123
                      code_type: COMPLETED
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                    - code: DEF234
                      code_type: FOLLOW_UP_STUDY
                      actions:
                        - action: AUTOMATICALLY_APPROVE
                        - action: ADD_TO_PARTICIPANT_GROUP
                          participant_group: 619e049f7648a4e1f8f3645b
              label_study_as_interview:
                value:
                  study_labels:
                    - interview
            schema:
              $ref: '#/components/schemas/BaseStudy'
        required: false
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: study
    delete:
      tags:
        - Studies
      summary: Delete a study
      operationId: Studies_deleteStudy
      security:
        - token: []
      description: Published studies cannot be deleted, but you can delete draft studies.
      parameters:
        - description: Study id
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: study
    x-summary: Actions on one study
  /api/v1/studies/{id}/submissions:
    get:
      tags:
        - Studies
      summary: List study submissions
      operationId: Studies_listSubmissions
      security:
        - token: []
      description: >-
        Returns basic information of the submissions, including the study id,
        participant id, status and start timestamp
      parameters:
        - description: Study id
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List submissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
    x-summary: List study submissions
  /api/v1/studies/{id}/export:
    get:
      tags:
        - Studies
      summary: Download demographic data
      operationId: Studies_downloadDemographicData
      security:
        - token: []
      description: >-
        __This is an evolving feature and the exact content of such exports is
        subject to change, so use at your own risk.__


        Download a snapshot of the participants' prescreening responses at the
        time that they took your study. Specify the optional `?method=EMAIL`
        query parameter if you want this to be sent to your email.


        In addition to the responses to all prescreeners applied to the study
        (subject to change), you'll also have access to the following data:


        * Submission id

        * Participant id

        * Submission status

        * Started date-time
          * Expressed in UTC
          * ISO 8601 formatted
        * Completed date-time
          * Expressed in UTC
          * ISO 8601 formatted
        * Time taken (in seconds)

        * Age

        * Sex
          * Participants were asked the following question: What is your sex, as recorded on legal/official documents?
        * First language

        * Current country of residence

        * Nationality

        * Country of birth

        * Student status

        * Employment status

        * Reviewed at date-time
          * Expressed in UTC
          * ISO 8601 formatted
        * Completion code ('entered code')


        Learn more on [Exporting Prolific demographic
        data](https://researcher-help.prolific.com/hc/en-gb/articles/360009391633-Exporting-Prolific-demographic-data).
      parameters:
        - description: Study id
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Method
          name: method
          in: query
          schema:
            type: string
            enum:
              - EMAIL
      responses:
        '200':
          description: Downloaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudiesDownloadDemographicData200Response'
            text/csv:
              schema:
                $ref: '#/components/schemas/StudiesDownloadDemographicDataResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/studies/{id}/clone:
    post:
      tags:
        - Studies
      summary: Duplicate a study
      operationId: Studies_duplicateStudy
      security:
        - token: []
      description: >-
        Duplicating a study can save a lot of time and effort compared to
        creating a new study from scratch, since all of the information and data
        from the original study will be carried over to the new study.
        Additionally, duplicating a study can help ensure that the new study is
        set up consistently with the original, reducing the risk of errors or
        inconsistencies.


        To prevent repeat participation, a block list containing the original
        study will be added to the duplicated study's filters unless
        `block_previous_participants` is set to `false` in the request body.
      parameters:
        - description: Study id
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudiesDuplicateStudyRequest'
      responses:
        '200':
          description: Duplicated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/study-cost-calculator:
    post:
      tags:
        - Studies
      summary: Calculate the study cost
      operationId: Studies_calculateStudyCostWithVat
      security:
        - token: []
      description: Calculate the study cost, including VAT and fees.
      parameters: []
      requestBody:
        content:
          application/json:
            examples:
              simple_study_cost:
                value:
                  reward: 100
                  total_available_places: 5
            schema:
              $ref: '#/components/schemas/StudyCostRequest'
        required: false
      responses:
        '200':
          description: Calculated total cost
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyCostResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
      x-codegen-request-body-name: input
    x-summary: Calculate the study cost
  /api/v1/submissions:
    get:
      tags:
        - Submissions
      summary: List submissions
      operationId: Submissions_listBasicInfo
      security:
        - token: []
      description: >-
        Returns basic information of the submissions, including the study id,
        participant id, status and start timestamp
      parameters:
        - description: >-
            Optional filter by study ID. This is the ID we pass to the survey
            platform using %STUDY_ID%
          name: study
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List submissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
    x-summary: List submissions
  /api/v1/submissions/{id}:
    get:
      tags:
        - Submissions
      summary: Retrieve a submission
      operationId: Submissions_getDetail
      security:
        - token: []
      description: |-
        Returns the detailed information of a submission, including the
        study id, participant id, status and start timestamp
      parameters:
        - description: |-
            Submission id. This is the ID we pass to the survey platform
            using %SESSION_ID%
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionDetail'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Submission details
  /api/v1/submissions/{id}/transition:
    post:
      tags:
        - Submissions
      summary: Approve or reject a submission
      operationId: Submissions_transitionById
      security:
        - token: []
      description: >-
        Transition a submission to `APPROVED` or `REJECTED`. Once the status is
        changed, it can not be restored to its previous value.


        We __strongly__ recommend that, when giving approval to a submission
        through the API, you first observe the `submission.status.change`

        [event](https://docs.prolific.com/docs/api-docs/public/#tag/Hooks/paths/~1api~1v1~1hooks~1event-types~1/get)
        for a status transition to

        `AWAITING_REVIEW` before making the approval request. Our system is
        currently unable to process approvals before this transition.

        Note this endpoint is idempotent, so if you make the same request twice,
        the second request will be ignored.
      parameters:
        - description: |-
            Submission id. This is the ID we pass to the survey platform
            using %SESSION_ID%
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionTransition'
            examples:
              approve_submission:
                value:
                  action: APPROVE
              reject_submission:
                value:
                  action: REJECT
                  message: >-
                    More than 100 chars long message to amuse the participant
                    with my knowledge of the english language in this funny
                    example
                  rejection_category: FAILED_INSTRUCTIONS
        required: false
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: study
    x-summary: Approve or reject
  /api/v1/submissions/{id}/request-return:
    post:
      tags:
        - Submissions
      summary: >-
        Request the participant who submitted the response to return their
        response
      operationId: Submissions_requestReturn
      security:
        - token: []
      description: >
        **This is an experimental feature that may be subject to change in the
        future.** <br/>

        It offers researchers the ability to ask a participant to return a
        submission. The return reason must be provided in the request and can be
        any free text string. <br/> The Prolific UI allows users to select any
        of the following options:

        * Didn't finish the study

        * Encountered technical problems

        * Withdrew consent

        * Other ( uses the free text input)


        This constructs a message around the reasons provided so there is no
        need to provide additional text beyond the reasons.

        <img alt="Example" src="/assets/img/api/message.png" />
      parameters:
        - description: The submission id
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionsRequestReturnRequest'
      responses:
        '200':
          description: >
            A message is sent to the participant belonging to the submission
            asking them to return.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnRequestedResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/submissions/bulk-approve:
    post:
      tags:
        - Submissions
      summary: Bulk approve submissions
      operationId: Submissions_bulkApprove
      security:
        - token: []
      description: |-
        Bulk approve study submissions to pay participants after they have
        completed your survey or experiment. There are two variant payloads to
        this request.

        1. You can supply a Study ID, and a list of participant IDs, or
        2. You can provide a list of submission IDs
      parameters: []
      requestBody:
        content:
          application/json:
            examples:
              bulk_approve_two_participants:
                value:
                  study_id: 60f6acb180a7b59ac0621f9e
                  participant_ids:
                    - 60f25f799fbd8a136cc6a9b0
                    - 5ce69ff9b1e73b000146186d
              bulk_approve_multi_submissions:
                value:
                  submission_ids:
                    - 60f25f799fbd8a136cc6a9b0
                    - 5ce69ff9b1e73b000146186d
            schema:
              $ref: '#/components/schemas/SubmissionsBulkApproveRequest'
      responses:
        '200':
          description: Bulk approve in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionsBulkApproveResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
      x-codegen-request-body-name: user
    x-summary: Bulk approve submissions
  /api/v1/submissions/bonus-payments:
    post:
      tags:
        - Bonuses
      summary: Set up bonuses
      operationId: Bonuses_setUpPayments
      security:
        - token: []
      description: >-
        Set up bonus payments to one or more participants/submissions in a
        study.


        You need the study id, the participant|submission ids and the request in
        CSV format.


        The csv_bonuses field needs to be structured in the format of either:


        - `<participant_id>,<amount>\n`.

        - `<submission_id>,<amount>\n`.


        Setting up a bonus payment does not actually pay them, to do so check
        [/api/v1/bulk-bonus-payments/{id}/pay/](https://docs.prolific.com)


        The submission and participant IDs need to have taken part in the study
        in order for this call to be successful.

        If not, you will get a "400" HTTP response back, which explains which
        IDs are incorrect.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BonusesSetUpPaymentsRequest'
        required: false
      responses:
        '201':
          description: Bonus created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkBonus'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: user
    x-summary: Set up bonus payment
  /api/v1/bulk-bonus-payments/{id}/pay:
    post:
      tags:
        - Bonuses
      summary: Pay bonuses
      operationId: Bonuses_makePayment
      security:
        - token: []
      description: >-
        Bonus payments are made asynchronously.

        The payment will be done in the following minutes and your balance will
        be updated accordingly.
      parameters:
        - description: Bulk bonus payment id
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: >-
            Successfully recieved bonus payments request. The bonuses will be
            paid asynchronously.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BonusesMakePaymentResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Process bulk bonus payment
  /api/v1/workspaces:
    get:
      tags:
        - Workspaces
      summary: Get all a user's workspaces
      operationId: Workspaces_getAllUserWorkspaces
      security:
        - token: []
      description: Gets a list of all workspaces that the user is a member of.
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspacesListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Workspaces
      summary: Create a workspace
      operationId: Workspaces_createWorkspaceAdmin
      security:
        - token: []
      description: Creates a new workspace and adds the user as a Workspace Admin.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspace'
            examples:
              simple_workspace:
                value:
                  title: My new workspace
              great_british_pounds_workspace:
                value:
                  title: My workspace using British Pounds
                  currency_code: GBP
              united_states_dollars_workspace:
                value:
                  title: My workspace using US Dollars
                  currency_code: USD
      responses:
        '201':
          description: Created workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Workspace api
  /api/v1/workspaces/{workspace_id}:
    get:
      tags:
        - Workspaces
      summary: Get workspace
      operationId: Workspaces_getDetails
      security:
        - token: []
      description: Gets a workspace's details
      parameters:
        - description: Workspace id
          name: workspace_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Workspaces
      summary: Update a workspace
      operationId: Workspaces_updateDetails
      security:
        - token: []
      description: Updates a workspace's details.
      parameters:
        - description: Workspace id
          name: workspace_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
            examples:
              update_workspace_title:
                value:
                  title: My new workspace
                  id: 63722982f9cc073ecc730f6b
      responses:
        '200':
          description: Updated workspace redirect link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Workspace api
  /api/v1/workspaces/{workspace_id}/balance:
    get:
      tags:
        - Workspaces
      summary: Get the balance of a workspace
      operationId: Workspaces_getBalance
      security:
        - token: []
      description: Provides details of the funds available in the workspace.
      parameters:
        - description: Workspace id
          name: workspace_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceBalance'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-summary: Workspace api
  /api/v1/workspaces/{workspace_id}/projects:
    get:
      tags:
        - Projects
      summary: Get all projects in a workspace
      operationId: Projects_getWorkspaceProjects
      security:
        - token: []
      description: Gets a list of all the projects within the workspace.
      parameters:
        - description: Workspace id
          name: workspace_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectShortListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Projects
      summary: Create a project
      operationId: Projects_createNewProject
      security:
        - token: []
      description: |-
        Creates a new project within the workspace.
        When this project is created, it adds the user as a Project Editor.
      parameters:
        - description: Workspace id
          name: workspace_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
            examples:
              simple_project_post:
                value:
                  title: My new project
      responses:
        '201':
          description: Successfully created project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Workspace api
  /api/v1/projects/{project_id}:
    get:
      tags:
        - Projects
      summary: Get project
      operationId: Projects_getDetails
      security:
        - token: []
      description: Gets a project's details
      parameters:
        - description: Project id
          name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Projects
      summary: Update a project
      operationId: Projects_updateDetails
      security:
        - token: []
      description: Update a project's details
      parameters:
        - description: Project id
          name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
            examples:
              update_project_title:
                value:
                  title: My new project
                  id: 63722982f9cc073ecc730f6bX
      responses:
        '200':
          description: Updated project redirect link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Workspace api
  /api/v1/hooks/event-types:
    get:
      tags:
        - Hooks
      summary: List all subscribable event types
      operationId: Hooks_listEventTypes
      security:
        - token: []
      description: You can subscribe to any of the event types defined in this response.
      parameters: []
      responses:
        '200':
          description: List of event types that can be subscribed to.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeList'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Hooks
  /api/v1/hooks/secrets:
    get:
      tags:
        - Hooks
      summary: List all secrets
      operationId: Hooks_listSecrets
      security:
        - token: []
      description: A view of all the secrets for the workspaces you belong to.
      parameters:
        - name: workspace_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretList'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Hooks
      summary: Create/replace a secret
      operationId: Hooks_createSecret
      security:
        - token: []
      description: >-
        Generate a secret for verifying the request signature header of the
        subscription payload. If a secret already exists, this call will delete
        the old secret and create a new one.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecret'
            examples:
              create_secret:
                value:
                  workspace_id: 63519c1d5b139662f8cde482
      responses:
        '201':
          description: Generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDetail'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Hooks
  /api/v1/hooks/subscriptions:
    get:
      tags:
        - Hooks
      summary: List all subscriptions
      operationId: Hooks_getAllSubscriptions
      security:
        - token: []
      description: A view of all subscriptions you have created.
      parameters:
        - description: A filter to only pull back enabled subscriptions. Default true.
          name: is_enabled
          in: query
          required: false
          schema:
            type: boolean
        - description: >-
            The Workspace ID we want to get the subscriptions for. If not given,
            the subscriptions for all of your workspaces will be returned.
          name: workspace_id
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionList'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Hooks
      summary: Create a subscription
      operationId: Hooks_createSubscription
      security:
        - token: []
      description: >-
        Create a subscription for an event type. When an event is triggered in
        the Prolific system, the hook will automatically notify the specified
        target URL.


        Before creating a subscription, you must ensure that you have created a
        secret for your workspace.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionDetail'
            examples:
              subscription_for_study_publish:
                value:
                  workspace_id: 63722982f9cc073ecc730f6b
                  event_type: study.status.change
                  target_url: https://example.com/api/v1/studies/
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionList'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Hooks
  /api/v1/hooks/subscriptions/{subscription_id}:
    get:
      tags:
        - Hooks
      summary: Retrieve a subscription
      operationId: Hooks_getSubscription
      security:
        - token: []
      description: Get a single subscription
      parameters:
        - description: Subscription id
          name: subscription_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionDetail'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Hooks
      summary: Confirm a subscription
      operationId: Hooks_confirmSubscription
      security:
        - token: []
      description: Confirm a subscription to an event type
      parameters:
        - description: Subscription id
          name: subscription_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionDetail'
            examples:
              subscription_disable:
                value:
                  workspace_id: 63722982f9cc073ecc730f6b
                  event_type: study.status.change
                  target_url: https://example.com/api/v1/studies/
                  is_enabled: false
              hook_update_target:
                value:
                  workspace_id: 63722982f9cc073ecc730f6b
                  event_type: study.status.change
                  target_url: https://anotherexample.com/api/v1/
                  is_enabled: false
      responses:
        '200':
          description: Confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionDetail'
          headers:
            X-Hook-Secret:
              schema:
                description: A unique value computed for each new subscription.
                type: string
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Hooks
      summary: Update a subscription
      operationId: Hooks_updateSubscription
      security:
        - token: []
      description: >-
        This allows you to update a subscription. For example you can
        temporarily disable a subscription if you wish.
      parameters:
        - description: Subscription id
          name: subscription_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdateDetail'
            examples:
              subscription_disable:
                value:
                  event_type: study.status.change
                  target_url: https://example.com/api/v1/studies/
                  is_enabled: false
              subscription_update_target:
                value:
                  event_type: study.status.change
                  target_url: https://anotherexample.com/api/v1/
                  is_enabled: false
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionDetail'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Hooks
      summary: Delete a subscription
      operationId: Hooks_deleteSubscription
      security:
        - token: []
      description: >-
        If you no longer require to be notified of a certain event type, you can
        delete a subscription. If you want to temporarily pause notifications,
        you can use the PATCH request documented.
      parameters:
        - description: Subscription id
          name: subscription_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    x-summary: Hooks
  /api/v1/hooks/subscriptions/{subscription_id}/events:
    get:
      tags:
        - Hooks
      summary: Get subscription events
      operationId: Hooks_getSubscriptionEvents
      security:
        - token: []
      description: Get all of the events that have triggered for the given subscription.
      parameters:
        - description: Subscription id
          name: subscription_id
          in: path
          required: true
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            title: Offset
            default: 0
            minimum: 0
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            title: Limit
            default: 100
            minimum: 1
            maximum: 1000
            type: integer
        - description: >-
            Filter events by status. Accepts a single status or a JSON array of
            statuses as a string.
          name: status
          in: query
          required: false
          schema:
            type: string
          examples:
            single_status:
              value: SUCCEEDED
            multiple_statuses:
              value: '["SUCCEEDED", "FAILED"]'
        - description: >-
            Filter events by the ID of the resource for which the event was
            sent.
          name: resource_id
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionEventList'
              example:
                results:
                  - id: 6394cee483e14a167638b36c
                    datetime_created: '2022-12-10T18:24:36.041000Z'
                    datetime_updated: '2022-12-10T18:24:36.041000Z'
                    event_type: study.status.change
                    resource_id: 6394cee383e14a167638b368
                    status: SUCCEEDED
                    target_url: https://example.com
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/surveys:
    get:
      tags:
        - Surveys
      summary: Get all surveys
      operationId: Surveys_getAll
      security:
        - token: []
      description: Get all the surveys for a researcher.
      parameters:
        - name: researcher_id
          in: query
          required: true
          schema:
            title: Researcher Id
            type: string
        - name: offset
          in: query
          required: false
          schema:
            title: Offset
            default: 0
            minimum: 0
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            title: Limit
            default: 100
            minimum: 1
            maximum: 1000
            type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllSurveysResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Surveys
      summary: Create survey
      operationId: Surveys_createOrUpdate
      security:
        - token: []
      description: >-
        You can create a survey with either `sections -> questions` or just
        `questions`. This allows you to decide

        how much flexibility you want in your survey design. However, if you
        want to render the survey in the Prolific Application, you must use
        `sections`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyIn'
            examples:
              with_sections:
                description: >-
                  A survey with sections and questions. This will render in the
                  Prolific Application.
                value:
                  title: A survey with sections and questions
                  researcher_id: '7172727272'
                  sections:
                    - title: Root vegetables
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      questions:
                        - title: What is your favourite root vegetable?
                          id: 497f6eca-6276-4993-bfeb-53cbbbba6f08X
                          type: single
                          answers:
                            - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08X
                              value: Potato
              without_sections:
                description: >-
                  A survey with questions. This will not render in the Prolific
                  Application.
                value:
                  title: A survey with questions
                  researcher_id: '7172727272'
                  questions:
                    - title: What is your favourite root vegetable?
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f08X
                      type: single
                      answers:
                        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08X
                          value: Potato
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyOut'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/surveys/{survey_id}/responses:
    get:
      tags:
        - Surveys
      summary: Get all responses
      operationId: Surveys_getAllResponses
      security:
        - token: []
      description: Get all the responses for a given Survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveysGetAllResponsesResponse'
              examples:
                simple:
                  value:
                    results:
                      - id: 63063d07691a81e96a6e8494
                        date_created: '2022-08-24T15:00:23.325000'
                        date_modified: '2022-08-24T15:00:23.325000'
                        participant_id: 5c83c95d4c266300156edc01
                        submission_id: 63063cfc71fd74aad90886c4
                        sections:
                          - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                            questions:
                              - question_id: 3797222e-f731-4bea-838b-f668682d902d
                                question_title: Do you like ice cream?
                                answers:
                                  - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                    value: 'Yes'
                      - id: 63063d03691a81e96a6e8493
                        date_created: '2022-08-24T15:00:19.478000'
                        date_modified: '2022-08-24T15:00:19.478000'
                        participant_id: 5c83c95d4c266300156edc01
                        submission_id: 5e0f36b63ccda26295505f0d
                        sections:
                          - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                            questions:
                              - question_id: 3797222e-f731-4bea-838b-f668682d902d
                                question_title: Do you like ice cream?
                                answers:
                                  - answer_id: a2de5745-b0b4-421b-98ec-23935c78be13
                                    value: 'No'
                multi_question:
                  value:
                    results:
                      - id: 63063d07691a81e96a6e8494X
                        date_created: '2022-08-24T15:00:23.325000'
                        date_modified: '2022-08-24T15:00:23.325000'
                        participant_id: 5c83c95d4c266300156edc01
                        submission_id: 63063cfc71fd74aad90886c4
                        sections:
                          - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                            questions:
                              - question_id: 3797222e-f731-4bea-838b-f668682d902d
                                question_title: Do you like ice cream on a cone?
                                answers:
                                  - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                    value: 'Yes'
                              - question_id: 672f8154-3506-4b52-a46c-3bc67bade4b2
                                question_title: What are your favourite flavours?
                                answers:
                                  - answer_id: de6a49ce-5fa8-4b00-9c5c-89d3add21f2a
                                    value: Chocolate
                                  - answer_id: 41af0e8e-59fc-40d7-a2fc-e3b86ebac043
                                    value: Mint
                                  - answer_id: 8595d4a0-4037-4f90-9ac2-8cab7548866e
                                    value: Choc chip
                      - id: 63063d03691a81e96a6e8493X
                        date_created: '2022-08-24T15:00:19.478000'
                        date_modified: '2022-08-24T15:00:19.478000'
                        participant_id: 5c83c95d4c266300156edc01
                        submission_id: 5e0f36b63ccda26295505f0d
                        sections:
                          - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                            questions:
                              - question_id: 3797222e-f731-4bea-838b-f668682d902d
                                question_title: Do you like ice cream on a cone?
                                answers:
                                  - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                    value: 'Yes'
                              - question_id: 672f8154-3506-4b52-a46c-3bc67bade4b2
                                question_title: What are your favourite flavours?
                                answers:
                                  - answer_id: 0ba4cf8c-237b-4d26-9be4-b01b7319e9a4
                                    value: Vanilla
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Surveys
      summary: Create response
      operationId: Surveys_createResponse
      security:
        - token: []
      description: Create a Response for a survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyResponseIn'
            examples:
              with_sections:
                description: A response using sections
                value:
                  participant_id: 62908f0b98a55b36ac68b992
                  submission_id: 62908f0b98a55b36ac68b992
                  sections:
                    - questions:
                        - answers:
                            - answer_id: 8bde0c5f-235e-41e6-bf82-b73e92852ac8
                              value: Potato
                          question_id: 827e810a-4b1a-40f6-8bc2-c3dd6fcedc25
                          question_title: What is your favourite root vegetable?
                      section_id: f5e5c4dc-7d2e-40f1-a895-9bb2f8703fd8
              without_sections:
                description: A survey response using questions
                value:
                  participant_id: 62908f0b98a55b36ac68b992
                  submission_id: 62908f0b98a55b36ac68b992
                  questions:
                    - answers:
                        - answer_id: 8bde0c5f-235e-41e6-bf82-b73e92852ac8
                          value: Potato
                      question_id: 827e810a-4b1a-40f6-8bc2-c3dd6fcedc25
                      question_title: What is your favourite root vegetable?
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyResponseOut'
              examples:
                with_sections:
                  description: A survey response using sections
                  value:
                    _id: 62fccc6ea792097ae2145ca4
                    participant_id: 62908f0b98a55b36ac68b992
                    submission_id: 62908f0b98a55b36ac68b992
                    sections:
                      - questions:
                          - answers:
                              - answer_id: 8bde0c5f-235e-41e6-bf82-b73e92852ac8
                                value: Potato
                            question_id: 827e810a-4b1a-40f6-8bc2-c3dd6fcedc25
                            question_title: What is your favourite root vegetable?
                        section_id: f5e5c4dc-7d2e-40f1-a895-9bb2f8703fd8
                without_sections:
                  description: A survey response using questions
                  value:
                    _id: 62fccc6ea792097ae2145ca4
                    participant_id: 62908f0b98a55b36ac68b992
                    submission_id: 62908f0b98a55b36ac68b992
                    questions:
                      - answers:
                          - answer_id: 8bde0c5f-235e-41e6-bf82-b73e92852ac8
                            value: Potato
                        question_id: 827e810a-4b1a-40f6-8bc2-c3dd6fcedc25
                        question_title: What is your favourite root vegetable?
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Surveys
      summary: Delete all responses
      operationId: Surveys_deleteAllResponses
      security:
        - token: []
      description: Delete all the responses for a given Survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveysDeleteAllResponsesResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/surveys/{survey_id}/responses/summary:
    get:
      tags:
        - Surveys
      summary: Get summary of responses
      operationId: Surveys_getSummaryResponses
      security:
        - token: []
      description: Get an aggregated summary of responses for a given survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySummary'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/participant-groups:
    get:
      tags:
        - Participant Groups
      summary: Get a list of all participant groups within a project or workspace
      operationId: ParticipantGroups_listAll
      security:
        - token: []
      parameters:
        - description: Filter by the active (not deleted) status of the participant group.
          name: active
          in: query
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
        - in: query
          name: filter
          required: true
          schema:
            oneOf:
              - title: Workspace ID
                properties:
                  workspace_id:
                    description: The id of the workspace to get participant groups for
                    type: string
                required:
                  - workspace_id
              - title: Project ID
                properties:
                  project_id:
                    description: The id of the project to get participant groups for
                    deprecated: true
                    type: string
                required:
                  - project_id
      responses:
        '200':
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantGroupListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Participant Groups
      summary: Create a new participant group within a workspace
      operationId: ParticipantGroups_createNewGroup
      security:
        - token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantGroupsCreateNewGroupRequest'
            examples:
              create_a_participant_group:
                summary: Create a participant group
                value:
                  description: Participants with confirmed special dietary requirements.
                  workspace_id: 5e9b9c9b0f9c9a0001b1ca2f
                  name: Group 1
              create_a_participant_group_with_participants:
                summary: Create a participant group with participants
                value:
                  description: Participants with confirmed special dietary requirements.
                  workspace_id: 5e9b9c9b0f9c9a0001b1ca2f
                  name: Group 1
                  participant_ids:
                    - 5e9b9c9b0f9c9a0001b0b1f4
                    - 5e9b9c9b0f9c9a0001b0b1f5
                    - 5e9b9c9b0f9c9a0001b0b1f6
      responses:
        '201':
          description: Participant group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantGroup'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/participant-groups/{id}:
    get:
      tags:
        - Participant Groups
      summary: Get a participant group
      operationId: ParticipantGroups_getById
      security:
        - token: []
      parameters:
        - description: The id of the participant group
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantGroup'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Participant Groups
      summary: Update a participant group
      operationId: ParticipantGroups_updateGroupById
      security:
        - token: []
      parameters:
        - description: The id of the participant group
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantGroupUpdate'
            examples:
              update_participant_group_name:
                value:
                  name: Passed all attention checks
              update_participant_group_description:
                value:
                  description: Participants who passed all attention checks
              overwrite_participant_group_participants:
                value:
                  participant_ids:
                    - 5e9b9c9b0f9c9a0001b0b1f4
                    - 5e9b9c9b0f9c9a0001b0b1f5
                    - 5e9b9c9b0f9c9a0001b0b1f6
      responses:
        '200':
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantGroup'
              example:
                description: Participants who passed all attention checks
                id: 642ea7ff7639ab670b05a0b5
                name: Passed all attention checks
                project_id: null
                workspace_id: 5e9b9c9b0f9c9a0001b1ca2f
                participant_count: 0
                feeder_studies: []
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Participant Groups
      summary: Delete a participant group
      operationId: ParticipantGroups_removeGroup
      security:
        - token: []
      parameters:
        - description: The id of the participant group
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/participant-groups/{id}/participants:
    get:
      tags:
        - Participant Groups
      summary: Get a list of all participants within a participant group
      operationId: ParticipantGroups_getAllParticipants
      security:
        - token: []
      parameters:
        - description: The id of the participant group to get participants for
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantGroupMembershipListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Participant Groups
      summary: Add participants to a participant group
      operationId: ParticipantGroups_addParticipantsToGroup
      security:
        - token: []
      description: >
        Append participants to a participant group if they are not already
        members. If a participant is already a member of the group, they will be
        ignored.
      parameters:
        - description: The id of the participant group to add the participant to
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantIDList'
            examples:
              add_multiple_participants_to_a_participant_group:
                summary: Add multiple participants to a participant group
                value:
                  participant_ids:
                    - 5e9b9c9b0f9c9a0001b0b1f4
                    - 5e9b9c9b0f9c9a0001b0b1f5
                    - 5e9b9c9b0f9c9a0001b0b1f6
      responses:
        '200':
          description: All participant(s) now in participant group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantGroupMembershipListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Participant Groups
      summary: Remove participants from a participant group
      operationId: ParticipantGroups_removeParticipants
      security:
        - token: []
      description: >
        Remove specified participants from a participant group if they are
        members. If a participant is not a member of the group, they will be
        ignored.
      parameters:
        - description: The id of the participant group to remove the participant(s) from
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantIDList'
            examples:
              remove_multiple_participants_from_a_participant_group:
                summary: Remove multiple participants from a participant group
                value:
                  participant_ids:
                    - 5e9b9c9b0f9c9a0001b0b1f4
                    - 5e9b9c9b0f9c9a0001b0b1f5
                    - 5e9b9c9b0f9c9a0001b0b1f6
      responses:
        '200':
          description: All participant(s) now in participant group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantGroupMembershipListResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/invitations:
    post:
      tags:
        - Invitations
      summary: Create a new invitation
      operationId: Invitations_initiateProcess
      security:
        - token: []
      description: >
        Initiate a new invitation process for adding users to a Workspace or
        Project.


        This operation can be performed only by authenticated users who are
        admins for the specified workspace. Invitations will be sent to the
        email addresses provided in the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvitationRequest'
      responses:
        '201':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInvitationResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/filters:
    get:
      tags:
        - Filters
      summary: List all filters
      operationId: Filters_listAll
      security:
        - token: []
      description: List all filters that can be applied to your filter sets or studies.
      parameters:
        - description: >-
            Include extra information required to sort and categorise filters in
            the Prolific app. This is not required for API use. Default false.
          name: detailed
          in: query
          required: false
          schema:
            type: string
        - description: >-
            The workspace ID for the workspace you are creating a study or
            filterset in. This is used to get contextual data such as previous
            studies and participant groups.
          name: workspace_id
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterList'
              examples:
                filter_list:
                  value:
                    results:
                      - title: Handedness
                        description: Whether a person is left or right-handed.
                        filter_id: handedness
                        question: Are you left or right-handed?
                        type: select
                        data_type: ChoiceID
                        choices:
                          '0': Right-handed
                          '1': Left-handed
                          '2': Ambidextrous
                      - title: Previous Studies AllowList
                        description: >-
                          Select one or more studies to allow participants who
                          have completed them to participate in this study.
                        filter_id: previous_studies
                        type: select
                        data_type: StudyID
                        choices:
                          645e4403bdd06d5f66d8fbd5: Study 1 internal name
                          645e4403bdd06d5f66d8fbd8: Study 2 internal name
                          645e4403bdd06d5f66d8fbdb: Study 3 internal name
                      - title: Custom AllowList
                        description: >-
                          Select one or more participant ID's to allow
                          participants to complete this study.
                        filter_id: custom_allowlist
                        type: select
                        data_type: ParticipantID
                        choices:
                          '0': >-
                            Add a list of participant ID's to create an
                            allowlist filter.
                      - title: Age
                        description: ''
                        filter_id: age
                        question: How old are you?
                        type: range
                        data_type: integer
                        min: 18
                        max: 100
                      - title: Joined Between
                        description: >-
                          Allow participants who joined between the specified
                          dates to participate in this study.
                        filter_id: joined_between
                        type: range
                        data_type: date
                        min: '2020-01-01'
                        max: '2021-01-01'
                filter_list_detailed:
                  value:
                    results:
                      - tags: []
                        title: Handedness
                        description: Whether a person is left or right-handed.
                        filter_id: handedness
                        question: Are you left or right-handed?
                        type: select
                        data_type: integer
                        choices:
                          '0': Right-handed
                          '1': Left-handed
                          '2': Ambidextrous
                        researcher_help_text: ''
                        participant_help_text: ''
                        category: Other
                        subcategory: ''
                        display_order: 1
                      - tags:
                          - recommended
                        title: Age
                        description: ''
                        filter_id: age
                        question: How old are you?
                        type: range
                        data_type: integer
                        min: 18
                        max: 100
                        researcher_help_text: ''
                        participant_help_text: ''
                        category: Demographics
                        subcategory: ''
                        display_order: 2
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/filter-sets:
    get:
      tags:
        - Filter Sets
      summary: List all filter sets
      operationId: FilterSets_listAll
      security:
        - token: []
      description: List of all filter sets in the specified workspace.
      parameters:
        - description: ID of the workspace to get filter sets for.
          name: workspace_id
          in: query
          schema:
            type: string
        - description: ID of the organisation to get filter sets for.
          name: organisation_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of filter sets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterSetList'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Filter Sets
      summary: Create filter set
      operationId: FilterSets_createFromFilters
      security:
        - token: []
      description: Create a filter set from a list of filters
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFilterSet'
            examples:
              ambidextrous_teenagers:
                value:
                  workspace_id: 644aaabfaf6bbc363b9d47c6
                  name: Ambidextrous teenagers
                  filters:
                    - filter_id: handedness
                      selected_values:
                        - '1'
                    - filter_id: age
                      selected_range:
                        lower: 19
                        upper: 22
      responses:
        '201':
          description: Filter set created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterSetsCreateFromFiltersResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/filter-sets/{id}:
    get:
      tags:
        - Filter Sets
      summary: Get filter set
      operationId: FilterSets_getDetails
      security:
        - token: []
      description: Get details of a filter set.
      parameters:
        - description: ID of the filter set.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: >-
            Allows you to specify a specific version of the filter set to
            retrieve.
          name: version_number
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Filter set details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterSetsGetDetailsResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Filter Sets
      summary: Update filter set
      operationId: FilterSets_updateDetails
      security:
        - token: []
      description: Update the details of a filter set.
      parameters:
        - description: ID of the filter set.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFilterSet'
      responses:
        '200':
          description: Filter set updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterSetsUpdateDetailsResponse'
              example:
                id: 644ab312af6bbc363b9d47c7
                workspace_id: 644aaabfaf6bbc363b9d47c6
                name: Left-handed 30-somethings
                filters:
                  - filter_id: handedness
                    selected_values:
                      - '1'
                  - filter_id: age
                    selected_range:
                      lower: 30
                      upper: 39
                eligible_participant_count: 123
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Filter Sets
      summary: Delete filter set
      operationId: FilterSets_deleteSet
      security:
        - token: []
      description: Delete a filter set.
      parameters:
        - description: ID of the filter set.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted the filter set
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/filter-sets/{id}/clone:
    post:
      tags:
        - Filter Sets
      summary: Clone filter set
      operationId: FilterSets_cloneFilterSet
      security:
        - token: []
      description: Create a copy of a filter set.
      parameters:
        - description: ID of the filter set.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSetsCloneFilterSetRequest'
      responses:
        '201':
          description: Filter set cloned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterSetsCloneFilterSetResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/filter-sets/{id}/lock:
    post:
      tags:
        - Filter Sets
      summary: Lock filter set for editing
      operationId: FilterSets_lockForEditing
      security:
        - token: []
      description: Lock the filter set for editing.
      parameters:
        - description: ID of the filter set.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Filter set locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterSetsLockForEditingResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/filter-sets/{id}/unlock:
    post:
      tags:
        - Filter Sets
      summary: Unlock filter set for editing
      operationId: FilterSets_unlockForEditing
      security:
        - token: []
      description: Unlock the filter set for editing.
      parameters:
        - description: ID of the filter set.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Filter set locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterSetsUnlockForEditingResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/eligibility-count:
    post:
      tags:
        - Filters
      summary: Count participants
      operationId: Filters_countParticipantsMeetingFilters
      security:
        - token: []
      description: >-
        Count how many participants meet all the given filters.

        Only participants that pass **every one** of the filters are counted.

        Zero means that there are less than 25 participants. We do not show
        lower numbers to protect the privacy of the participants.


        To see a list of filters that may be passed to this endpoint, see the
        documentation for filters.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequirementsCountRequest'
            examples:
              empty_requirements:
                value:
                  filters: []
                  workspace_id: 645e4403bdd06d5f66d8fbd8
              filters_requirements_request:
                value:
                  filters:
                    - filter_id: favourite_colour
                      selected_values:
                        - '0'
                        - '1'
                    - filter_id: previous_studies_allowlist
                      selected_values:
                        - 645e4403bdd06d5f66d8fbde
                        - 645e4403bdd06d5f66d8fbdf
                    - filter_id: approval_rate
                      selected_range:
                        lower: 10
                        upper: 80
                  workspace_id: 645e4403bdd06d5f66d8fbd8
        required: false
      responses:
        '200':
          description: Count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequirementsCount'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: requirements
    x-summary: Count participants
  /api/v1/study-collections/mutually-exclusive:
    get:
      tags:
        - Study Collections
      summary: List mutually exclusive study collections in a project
      operationId: StudyCollections_listMutuallyExclusive
      security:
        - token: []
      description: List studies
      parameters:
        - name: project_id
          in: query
          required: true
          schema:
            type: string
          example: 65786062db3b35bcbeb07bcc
      responses:
        '200':
          description: List of mutually exclusive study collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MutuallyExclusiveStudyCollectionsResponse'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Study Collections
      summary: Create a mutually exclusive study collection.
      operationId: StudyCollections_createMutuallyExclusiveCollection
      security:
        - token: []
      description: >-
        Create a mutually exclusive study collection.

        - Studies and study collections must be created separately and then
        added to the mutually exclusive study collection.

        - Both the studies and the study collection must be in the same project.

        - You can only add draft studies to a mutually exclusive study
        collection.

        - Adding studies which are already in one study collection to another
        study

        collection will remove the study from the original study collection.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutuallyExclusiveStudyCollectionUpdate'
            examples:
              create_without_studies:
                value:
                  description: >-
                    This is a description of my mutually exclusive study
                    collection
                  name: My Mutually Exclusive Study Collection
                  project_id: 65786062db3b35bcbeb07bcc
              create_with_studies:
                value:
                  description: >-
                    This is a description of my mutually exclusive study
                    collection
                  name: My Mutually Exclusive Study Collection
                  project_id: 65786062db3b35bcbeb07bcc
                  study_ids:
                    - 5f7b9a7b5f7b9a7b5f7b9a7b
                    - 5f7b9a7b5f7b9a7b5f7b9a6b
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MutuallyExclusiveStudyCollectionUpdate'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: study
  /api/v1/study-collections/mutually-exclusive/{id}:
    get:
      tags:
        - Study Collections
      summary: Get a mutually exclusive study collection
      operationId: StudyCollections_getMutuallyExclusive
      security:
        - token: []
      description: Get a mutually exclusive study collection
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Mutually exclusive study collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MutuallyExclusiveStudyCollectionUpdate'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Study Collections
      summary: Update a mutually exclusive study collection
      operationId: StudyCollections_updateMutuallyExclusive
      security:
        - token: []
      description: Update a mutually exclusive study collection
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutuallyExclusiveStudyCollectionUpdate'
            examples:
              update_name:
                value:
                  name: My Mutually Exclusive Study Collection
              update_description:
                value:
                  description: >-
                    This is a description of my mutually exclusive study
                    collection
              update_studies:
                value:
                  study_ids:
                    - 5f7b9a7b5f7b9a7b5f7b9a7b
                    - 5f7b9a7b5f7b9a7b5f7b9a6b
      responses:
        '200':
          description: Mutually exclusive study collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MutuallyExclusiveStudyCollectionUpdate'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Study Collections
      summary: Delete a mutually exclusive study collection
      operationId: StudyCollections_deleteMutuallyExclusive
      security:
        - token: []
      description: >-
        Delete a mutually exclusive study collection. This will not delete the
        studies in the collection.

        - This can only be completed if the study collection is unpublished.

        - This will not delete the studies in the collection.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/study-collections/mutually-exclusive/{id}/transition:
    post:
      tags:
        - Study Collections
      summary: Transition a mutually exclusive study collection
      operationId: StudyCollections_transitionMutuallyExclusive
      security:
        - token: []
      description: |-
        Transition a mutually exclusive study collection. This is used to:
        - Publish a study collection
        - Cancel publish a study collection
        - Schedule publish a study collection
          - This can be done by setting the publish_at on the study collection at create or patch, then transitioning with the "SCHEDULE_PUBLISH" action
          - Or optionally the publish_at can be provided directly in the body of the transition request
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/StudyCollectionsTransitionMutuallyExclusiveRequest
            examples:
              publish:
                value:
                  action: PUBLISH
              cancel_publish:
                value:
                  action: CANCEL_PUBLISH
              schedule_publish_time_already_set_on_collection:
                value:
                  action: SCHEDULE_PUBLISH
              schedule_publish_time_set_in_request:
                value:
                  action: SCHEDULE_PUBLISH
                  publish_at: 2050-02-28T13:45:00 Europe/London
      responses:
        '200':
          description: Mutually exclusive study collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MutuallyExclusiveStudyCollectionUpdate'
        4XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ProjectShortListResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          description: List of all projects for a user
          type: array
          items:
            $ref: '#/components/schemas/ProjectShort'
    ProjectShort:
      additionalProperties: true
      required:
        - id
        - title
      type: object
      properties:
        title:
          description: Name of project
          type: string
        description:
          description: What is this project used for
          type: string
        id:
          description: Project id. It is created by Prolific.
          type: string
        owner:
          description: User id of the creator of the project. It is created by Prolific.
          type: string
        users:
          description: Data for all users who have access to this project
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceUser'
        naivety_distribution_rate:
          description: The rate at which the studies within this project are distributed.
          type: number
          nullable: true
          minimum: 0
          maximum: 1
      example:
        title: My project
        description: This project is for...
        id: 62fce6fff0a78eb4f3ebc09c
        owner: 60a42f4c693c29420793cb73
        users:
          - id: 60a42f4c693c29420793cb73X
            name: Joe Soap
            email: joe.soap@gmail.com
            roles:
              - PROJECT_EDITOR
        naivety_distribution_rate: 0.5
    Project:
      additionalProperties: true
      required:
        - id
        - title
      type: object
      properties:
        title:
          description: Name of project
          type: string
        description:
          description: What is this project used for
          type: string
        id:
          description: Project id. It is created by Prolific.
          type: string
        owner:
          description: User id of the creator of the project. It is created by Prolific.
          type: string
        users:
          description: Data for all users who have access to this project
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceUser'
        workspace:
          description: Id of the workspace this project is in. This is created by Prolific.
          type: string
        naivety_distribution_rate:
          description: The rate at which the studies within this project are distributed.
          type: number
          nullable: true
          minimum: 0
          maximum: 1
      example:
        title: My project
        description: This project is for...
        id: 62fce6fff0a78eb4f3ebc09cX
        owner: 60a42f4c693c29420793cb73
        users:
          - id: 60a42f4c693c29420793cb73X
            name: Joe Soap
            email: joe.soap@gmail.com
            roles:
              - PROJECT_EDITOR
        workspace: 60a42f4c693c29420793cb73
        naivety_distribution_rate: 0.5
    WorkspacesListResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          description: List of all workspaces for user
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceShort'
    WorkspaceShort:
      additionalProperties: true
      required:
        - id
        - title
      type: object
      properties:
        title:
          description: Name of workspace
          type: string
        description:
          description: What is this workspace used for
          type: string
        id:
          description: Workspace id. It is created by Prolific.
          type: string
        owner:
          description: User id of the creator of the workspace. It is created by Prolific.
          type: string
        users:
          description: Data for all users who have access to this workspace
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceUser'
        naivety_distribution_rate:
          description: The rate at which the studies within this project are distributed.
          type: number
          nullable: true
          minimum: 0
          maximum: 1
      example:
        title: My workspace
        description: This workspace does...
        id: 62fce6fff0a78eb4f3ebc09cX
        owner: 60a42f4c693c29420793cb73
        users:
          - id: 60a42f4c693c29420793cb73X
            name: Joe Soap
            email: joe.soap@gmail.com
            roles:
              - WORKSPACE_ADMIN
        naivety_distribution_rate: 0.5
    Workspace:
      additionalProperties: true
      required:
        - id
        - title
      type: object
      properties:
        title:
          description: Name of workspace
          type: string
        description:
          description: What is this workspace used for
          type: string
        id:
          description: Workspace id. It is created by Prolific.
          type: string
        owner:
          description: Workspace id. It is created by Prolific.
          type: string
        users:
          description: Data for a user related to a workspace
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceUser'
        projects:
          description: Data for a project related to a workspace
          type: array
          items:
            $ref: '#/components/schemas/ProjectShort'
        wallet:
          description: Wallet tied to workspace
          type: string
        naivety_distribution_rate:
          description: The rate at which the studies within this workspace are distributed.
          type: number
          nullable: true
          minimum: 0
          maximum: 1
      example:
        title: My workspace
        description: This workspace does...
        id: 62fce6fff0a78eb4f3ebc09cX
        owner: 60a42f4c693c29420793cb73
        users:
          - id: 60a42f4c693c29420793cb73X
            name: Joe Soap
            email: joe.soap@gmail.com
            roles:
              - WORKSPACE_ADMIN
        projects:
          - id: 60a42f4c693c29420793cb73X
        wallet: 61a65c06b084910b3f0c00d6
    WorkspaceUser:
      required:
        - id
      type: object
      properties:
        id:
          description: Id of user
          type: string
        name:
          description: Name of user
          type: string
        email:
          description: email of user
          type: string
        roles:
          description: User roles in workspace
          type: array
          items:
            type: string
    CreateWorkspace:
      required:
        - title
      type: object
      properties:
        title:
          description: Name of workspace
          type: string
        naivety_distribution_rate:
          description: >-
            Control the balance between speed of your studies and the naivety of
            the participants.


            If not defined, by default Prolific calculates the best rate for
            most studies

            taking into account the `filters` and the `total_available_places`
            needed for this study.


            Use 0 if your priority is speed. When this property is set to 0 all
            eligible participants will have access

            to your study at the same time, without any prioritization.


            You can also set this at a project and study level.
          type: number
          nullable: true
          minimum: 0
          maximum: 1
        currency_code:
          description: >-
            Currency used for all transactions within the workspace. Must be GBP
            or USD.
          type: string
    CreateProject:
      required:
        - title
      type: object
      properties:
        title:
          description: Name of project
          type: string
        naivety_distribution_rate:
          description: >-
            Control the balance between speed of your studies and the naivety of
            the participants.


            If not defined, by default Prolific calculates the best rate for
            most studies

            taking into account the `filters` and the `total_available_places`
            needed for this study.


            Use 0 if your priority is speed. When this property is set to 0 all
            eligible participants will have access

            to your study at the same time, without any prioritization.


            You can also set this at a workspace and study level.
          type: number
          nullable: true
          minimum: 0
          maximum: 1
    Error:
      required:
        - error
      type: object
      additionalProperties: true
      properties:
        error:
          $ref: '#/components/schemas/ErrorDetail'
    ErrorDetail:
      required:
        - status
        - error_code
        - title
        - detail
      type: object
      properties:
        title:
          description: Error title
          type: string
        status:
          description: Status code as in the http standards
          type: integer
        error_code:
          description: Internal error code
          type: integer
        detail:
          description: Error detail
          anyOf:
            - description: Error message
              type: string
            - description: Error messages
              type: array
              items:
                description: >-
                  WARNING: Missing items property in array schema. Missing items
                  property has been filled with this AnyType schema.
            - description: All fields with validation errors
              type: object
              additionalProperties: true
              properties:
                any_field:
                  description: >-
                    Name of the field with a validation error and as a value an
                    array with the error descriptions
                  type: array
                  items:
                    description: Error message for that field
                    type: string
        additional_information:
          description: Optional extra information
          type: string
        traceback:
          description: Optional debug information
          type: string
        interactive:
          type: boolean
    User:
      additionalProperties: true
      required:
        - email
        - id
      type: object
      properties:
        id:
          type: string
        email:
          type: string
    StudiesListResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          description: List of all studies matching the criteria.
          type: array
          items:
            $ref: '#/components/schemas/StudyShort'
    StudyShort:
      additionalProperties: true
      required:
        - id
        - name
      type: object
      properties:
        id:
          description: Study id. It is created by Prolific.
          type: string
        name:
          description: Public name or title of the study
          type: string
        internal_name:
          description: Internal name of the study, not shown to participants
          type: string
          nullable: true
        status:
          description: Status of the study.
          type: string
          readOnly: true
          enum:
            - UNPUBLISHED
            - SCHEDULED
            - ACTIVE
            - AWAITING REVIEW
            - PAUSED
            - COMPLETED
        study_type:
          description: Deprecated. Type of study.
          type: string
          enum:
            - SINGLE
            - UK_REP_SAMPLE
            - US_REP_SAMPLE
        total_available_places:
          description: How many participants are you looking to recruit
          type: number
        places_taken:
          description: >-
            Places already taken, number of submission started excluding timed
            out and returned submissions
          type: number
          readOnly: true
        number_of_submissions:
          type: number
          readOnly: true
        reward:
          description: >-
            How much are you going to pay the participants in cents. We use the
            currency of your account
          type: number
        total_cost:
          description: Total cost of the study including fees
          type: number
        published_at:
          description: Date time when the study was published.
          type: string
          nullable: true
          format: date-time
        publish_at:
          description: Date time when the study was scheduled to be published.
          type: string
          nullable: true
          format: date-time
        date_created:
          description: Date time when the study was created
          type: string
          format: date-time
      example:
        id: 60d9aadeb86739de712faee0
        name: Study about API's
        status: UNPUBLISHED
    BaseStudy:
      type: object
      properties:
        description:
          description: |-
            Description of the study for the participants to read before
            starting the study
          type: string
        name:
          description: Public name or title of the study
          type: string
        internal_name:
          description: Internal name of the study, not shown to participants
          type: string
          nullable: true
        external_study_url:
          description: >-
            URL of the survey or experiment you want participant to access. You
            can pass URL search parameters to your survey or experiment


            * Participant id {{%PROLIFIC_PID%}}

            * Study id {{%STUDY_ID%}}

            * Session id {{%SESSION_ID%}}


            For example
            `https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}`
          type: string
        prolific_id_option:
          description: >-
            Use 'question' if you will add a question in your survey or
            experiment asking the participant ID


            **Recommended** Use 'url_parameters' if your survey or experiment
            can retrieve and store those parameters for your analysis.


            Use 'not_required' if you don't need to record them
          type: string
          enum:
            - question
            - url_parameters
            - not_required
        completion_option:
          description: >-
            Use 'url' if you will redirect the user back to prolific using a
            url,

            the url you will use in your experiment

            or survey to go back is
            https://app.prolific.com/submissions/complete?cc={code}


            Use 'code' when the participants will manually input the code, at
            the

            end of the experiment you will tell the participants the code. Note
            that

            the {code} you have to give is one of the completion codes you
            define below in the `completion_codes` argument.
          type: string
          enum:
            - url
            - code
        completion_codes:
          description: >-
            Specify at least one completion code for your study. A participant
            will enter one of these codes when they complete your study.


            Each code must be unique within a study.


            You can specify as many actions as you like per code.
          type: array
          items:
            type: object
            required:
              - code
              - code_type
              - actions
            properties:
              code:
                description: >-
                  The code the participant will either enter manually at the end
                  of your study or be redirected as part of the return URL.
                type: string
              code_type:
                description: >-
                  A name for your code to make it easier to understand its
                  intention. Either use one of the predefined options or any
                  other free text.
                type: string
                enum:
                  - COMPLETED
                  - FAILED_ATTENTION_CHECK
                  - FOLLOW_UP_STUDY
                  - GIVE_BONUS
                  - INCOMPATIBLE_DEVICE
                  - NO_CONSENT
                  - OTHER
              actions:
                description: >-
                  The actions that will be completed automatically when the
                  submission is completed with this code.


                  You can specify as many actions as you like. For a basic
                  approach where all submissions are left for manual approval,
                  set the `{"action": "MANUALLY_REVIEW"}` option only..
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/AutomaticallyApprove'
                    - $ref: '#/components/schemas/AddToParticipantGroup'
                    - $ref: '#/components/schemas/RemoveFromParticipantGroup'
                    - $ref: '#/components/schemas/ManuallyReview'
                    - $ref: '#/components/schemas/RequestReturn'
        total_available_places:
          description: How many participants are you looking to recruit
          type: number
        estimated_completion_time:
          description: Estimated duration in minutes of the experiment or survey
          type: number
          minimum: 1
        maximum_allowed_time:
          description: >-
            Max time in minutes for a participant to finish the submission.
            Submissions are timed out if it takes longer.


            If it is not provided the default value is set to the max value.


            The min value is calculated as two minutes plus two times the
            estimated time plus two times the square root of the estimated time
          type: number
        reward:
          description: |-
            How much are you going to pay the participants in cents. We
            use the currency of your account.
          type: number
        device_compatibility:
          description: |-
            Add all devices that participants can use.
            You can include one or more options.

            An empty array indicates that all options are available.
          type: array
          items:
            type: string
            enum:
              - desktop
              - tablet
              - mobile
        peripheral_requirements:
          description: >-
            Add all requirements that participants have to meet.


            An empty array indicates that there are no extra peripheral
            requirements.
          type: array
          items:
            type: string
            enum:
              - audio
              - camera
              - download
              - microphone
        filters:
          description: |-
            Array of filters.

            Use empty array for "Everyone"
          type: array
          nullable: true
          items:
            anyOf:
              - $ref: '#/components/schemas/SelectFilter'
              - $ref: '#/components/schemas/RangeFilter'
        filter_set_id:
          description: >-
            The ID of a filter set, from which filters for the study will be
            taken.


            Note, this cannot be used in combination with additional filters via
            the `filters` field.
          type: string
          nullable: true
        filter_set_version:
          description: >-
            The version of the filter set to be used.


            If not provided, this will default to the latest available version
            at the time of applying the filter set.
          type: integer
          nullable: true
        naivety_distribution_rate:
          description: >-
            Control the balance between speed of your studies and the naivety of
            the participants.


            If not defined, by default Prolific calculates the best rate for
            most studies

            taking into account the `filters` and the `total_available_places`
            needed for this study.


            Use 0 if your priority is speed. When this property is set to 0 all
            eligible participants will have access

            to your study at the same time, without any prioritization.


            You can also set this at a workspace and project level.
          type: number
          nullable: true
          minimum: 0
          maximum: 1
        project:
          description: >-
            Project id, this is optional and if not supplied with be the put in
            the default workspace and project.
          type: string
        submissions_config:
          description: >-
            **BETA**: This is a beta feature and is currently only available to
            selected workspaces.

            It is being tested and evaluated for effectiveness and user
            experience before being released to all users.


            **Advanced**: This helps with faster data collection. Your survey
            system will need to handle providing a

            unique experience each time the participant takes the study.


            Configuration related to study submissions. The purpose of this
            field is to capture any configuration options that impact the
            submissions made by participants in a study.
          type: object
          additionalProperties: true
          properties:
            max_submissions_per_participant:
              description: >-
                - **1** is the default Prolific experience. This means one
                submission, per participant, per study. If you do
                  not specify this field, the **default is 1**.
                - **1+** turns your study into a multi-submission study, meaning
                a participant can create many submissions per study.
                  As noted above, your survey system will need to handle providing a
                unique experience each time the participant takes the study.

                - **-1** will allow an indefinite number of submissions from a
                single participant, up to `total_available_places`.
              type: integer
              default: 1
              nullable: true
            max_concurrent_submissions:
              description: >-
                - **-1** is the default value, meaning unlimited concurrent
                active/reserved submissions per study.

                - **1+** limits the number of concurrent active/reserved
                submissions a study can have at one time.
              type: integer
              default: -1
              nullable: true
        study_labels:
          description: >-
            This field allows you to tag studies with information about the
            type/topic of the study and the kind of work involved in completing
            it.


            We plan to make this information available to participants for
            easier self-selection. At present these options are mutually
            exclusive and only a single option can be selected, however in the
            future available categories will expand.
          type: array
          items:
            type: string
            enum:
              - survey
              - writing_task
              - annotation
              - interview
              - other
        content_warnings:
          description: >-
            Allow researchers to define content warnings for their study.


            At present these options are mutually exclusive and only a single
            option can be selected, however in the future available warnings
            will expand.
          type: array
          items:
            type: string
            enum:
              - sensitive
              - explicit
        content_warning_details:
          description: >-
            Allow researchers to add further details about their content
            warning.
          type: string
        metadata:
          description: >-
            This field can be used to store extra information required for a
            system integration.

            For example, it could be some JSON, XML, an integer, or a string.


            Examples could include:

              - `123345` - An ID from your system, that helps with linkage when returning the study.
              - `{ \"id\": \"45\", \"type\": \"finance\"}` - Some JSON that you want to store.
          type: string
          nullable: true
    CreateStudy:
      allOf:
        - $ref: '#/components/schemas/BaseStudy'
        - required:
            - name
            - description
            - external_study_url
            - prolific_id_option
            - completion_codes
            - completion_option
            - estimated_completion_time
            - reward
            - total_available_places
    Study:
      additionalProperties: true
      allOf:
        - type: object
          properties:
            id:
              description: Study id. It is created by Prolific. **Read only**.
              type: string
              readOnly: true
            status:
              description: >-
                Status of the study. **Read only**.


                To change the status you can use
                `/api/v1/studies/{id}/transition/`
              type: string
              enum:
                - UNPUBLISHED
                - SCHEDULED
                - ACTIVE
                - AWAITING REVIEW
                - PAUSED
                - COMPLETED
              readOnly: true
        - $ref: '#/components/schemas/CreateStudy'
        - required:
            - id
            - status
            - maximum_allowed_time
      example:
        description: This study aims to determine how to make a good public API
        id: 60d9aadeb86739de712faee0X
        name: Study about API's
        internal_name: WIT-2021 Study about API's version 2
        external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
        prolific_id_option: url_parameters
        completion_option: url
        completion_codes:
          - code: ABC123
            code_type: COMPLETED
            actions:
              - action: AUTOMATICALLY_APPROVE
          - code: DEF234
            code_type: FOLLOW_UP_STUDY
            actions:
              - action: AUTOMATICALLY_APPROVE
              - action: ADD_TO_PARTICIPANT_GROUP
                participant_group: 619e049f7648a4e1f8f3645b
        total_available_places: 30
        estimated_completion_time: 5
        maximum_allowed_time: 25
        reward: 100
        device_compatibility:
          - desktop
        peripheral_requirements: []
        filters: []
        filter_set_id: null
        filter_set_version: null
        status: UNPUBLISHED
        study_labels:
          - interview
        content_warnings:
          - sensitive
        content_warning_details: >-
          Experiences with hateful activities, experiences with self-injury and
          harmful behaviour
    StudyTransition:
      required:
        - action
      type: object
      properties:
        action:
          description: Action to execute
          type: string
          example: PUBLISH
    SubmissionListResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          description: List of all studies matching the criteria.
          type: array
          items:
            $ref: '#/components/schemas/SubmissionShort'
    SubmissionShort:
      additionalProperties: true
      required:
        - id
        - started_at
        - participant_id
        - status
        - has_siblings
      type: object
      properties:
        id:
          description: Submission id.
          type: string
          readOnly: true
        participant_id:
          description: Participant id.
          type: string
        status:
          description: Status of the submission.
          type: string
          enum:
            - RESERVED
            - ACTIVE
            - TIME-OUT
            - AWAITING REVIEW
            - APPROVED
            - RETURNED
            - REJECTED
          readOnly: true
        started_at:
          description: Date started
          type: string
          format: date-time
        completed_at:
          description: Date completed
          type: string
          format: date-time
          nullable: true
        has_siblings:
          description: >-
            Whether or not the submission has sibling submissions (sharing the
            same study).
          type: boolean
        study_code:
          description: The completion code used by the participant to complete the study.
          type: string
          nullable: true
      example:
        id: 60d9aadeb86739de712faee0X
        participant_id: 60bf9310e8dec401be6e9615
        started_at: '2021-05-20T11:03:00.457Z'
        status: ACTIVE
        study_code: ABC123
    Submission:
      additionalProperties: true
      required:
        - id
        - started_at
        - status
        - study_id
      type: object
      properties:
        id:
          description: The id of the submission
          type: string
          readOnly: true
        completed_at:
          description: The time the submission was completed at.
          type: string
          nullable: true
        entered_code:
          description: The completion code used by the participant to complete the study.
          type: string
          nullable: true
        participant:
          description: Participant id.
          type: string
        started_at:
          description: The date and time that the user started the submission (UTC)
          type: string
        status:
          description: The current status of the submission
          type: string
          enum:
            - ACTIVE
            - APPROVED
            - AWAITING REVIEW
            - REJECTED
            - RESERVED
            - RETURNED
            - TIMED-OUT
            - UNKNOWN
        study_id:
          description: Study id.
          type: string
      example:
        id: 625d4a831bcda2d59ac5a251
        completed_at: '2022-04-18T11:25:02.734Z'
        entered_code: 8E8AC860
        participant: 60bf9310e8dec401be6e9615
        started_at: '2022-04-18T11:24:51.395Z'
        status: APPROVED
        study_id: 60aca280709ee40ec37d4885
    SubmissionDetail:
      additionalProperties: true
      required:
        - id
        - started_at
        - status
        - study_id
      type: object
      properties:
        id:
          description: The id of the submission
          type: string
          readOnly: true
        completed_at:
          description: The time the submission was completed at.
          type: string
          nullable: true
        entered_code:
          description: The completion code used by the participant to complete the study.
          type: string
          nullable: true
        participant:
          description: Participant id.
          type: string
        started_at:
          description: The date and time that the user started the submission (UTC)
          type: string
        status:
          description: The current status of the submission
          type: string
          enum:
            - ACTIVE
            - APPROVED
            - AWAITING REVIEW
            - REJECTED
            - RESERVED
            - RETURNED
            - TIMED-OUT
            - UNKNOWN
        study_id:
          description: Study id.
          type: string
        bonus_payments:
          description: >-
            Bonus payments that have been paid on the submission. Returned in
            pence / cents.
          type: array
          items:
            type: number
      example:
        id: 625d4a831bcda2d59ac5a251X
        completed_at: '2022-04-18T11:25:02.734Z'
        entered_code: 8E8AC860
        participant: 60bf9310e8dec401be6e9615
        started_at: '2022-04-18T11:24:51.395Z'
        status: APPROVED
        study_id: 60aca280709ee40ec37d4885
        bonus_payments:
          - 1000
          - 2536
    SubmissionTransition:
      required:
        - action
      type: object
      properties:
        action:
          description: Action to execute.
          type: string
          enum:
            - APPROVE
            - REJECT
          example: APPROVE
        message:
          description: |-
            Required if action is 'REJECT'. Message sent to the participant
            explaining the reason for the rejection.
            It must be at least 100 chars long.
          type: string
          example: Good explanation of the situation.
        rejection_category:
          description: |-
            Required if action is 'REJECT', it sums as the category of
            the rejection.
          type: string
          enum:
            - TOO_QUICKLY
            - TOO_SLOWLY
            - FAILED_INSTRUCTIONS
            - INCOMP_LONGITUDINAL
            - FAILED_CHECK
            - LOW_EFFORT
            - MALINGERING
            - NO_CODE
            - BAD_CODE
            - NO_DATA
            - UNSUPP_DEVICE
            - OTHER
          example: LOW_EFFORT
    ReturnRequestedResponse:
      type: object
      additionalProperties: true
      properties:
        id:
          description: the database id of the submission instance
          type: string
        status:
          description: The current status of the submission
          type: string
          enum:
            - ACTIVE
            - APPROVED
            - AWAITING REVIEW
            - REJECTED
            - RESERVED
            - RETURNED
            - TIMED-OUT
            - UNKNOWN
        participant:
          description: The participant who took part in the study.
          type: string
        return_requested:
          description: The date and time when a request was made to return a submission.
          type: string
          format: date-time
          nullable: true
    RequirementsResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          description: |-
            List of all defined requirements. There are many attributes
            per requirement that are not documented and are used by our webapp.
          type: array
          items:
            $ref: '#/components/schemas/Requirement'
    Requirement:
      additionalProperties: true
      required:
        - _cls
        - attributes
      type: object
      properties:
        _cls:
          description: Type of requirement
          type: string
          example: SelectAnswerEligibilityRequirement
        attributes:
          description: |-
            Attributes defining the requirement. Its values will depend
            on the type of requirement
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
        query:
          additionalProperties: true
          type: object
          properties:
            id:
              description: Id of the question
              type: string
              example: 54ac6ea9fdf99b2204feb899
            question:
              description: Question asked to the participant
              type: string
              nullable: true
              example: What is your first language?
    Attribute:
      additionalProperties: true
      required:
        - value
      type: object
      properties:
        index:
          description: |-
            Attribute index. It is mandatory for some type of requirements,
            like SelectAnswerEligibilityRequirement.
          type: number
          example: 5
        name:
          description: |-
            Attribute name. It is mandatory for some type of requirements,
            like AgeRangeEligibilityRequirement.
          type: string
        value:
          description: >-
            Attribute value. It can be null, a number, a date or a boolean
            depending on the type of requirement.

            For boolean values, there is no need to specify all false (non
            selected) options.
          oneOf:
            - type: object
              nullable: true
            - type: array
              nullable: true
              items:
                anyOf:
                  - type: string
                  - type: object
            - type: string
              nullable: true
            - type: number
              nullable: true
            - type: boolean
          x-nullable: true
          example: 'true'
    StudyCostRequest:
      additionalProperties: true
      required:
        - reward
        - total_available_places
      type: object
      properties:
        reward:
          description: >-
            How much are you going to pay the participants in cents. We use the
            currency of your account
          type: number
        total_available_places:
          description: How many participants are you looking to recruit
          type: number
    StudyCostResponse:
      additionalProperties: true
      type: object
      properties:
        total_cost:
          description: >-
            Total cost of the study including VAT and fees in cents. We use your
            account VAT and Fee percentage. The amount is in your account's
            currency.
          type: number
          example: 56
      required:
        - total_cost
    BulkBonus:
      type: object
      required:
        - id
        - total_amount
      properties:
        id:
          description: Bonus ID. It is the ID to be used when paying the bonus
          type: string
        study:
          description: Study ID
          type: string
        amount:
          description: The amount the participant will receive in cents
          type: number
        fees:
          description: The fees Prolific will charge for this bonus in cents
          type: number
        vat:
          description: The VAT cost for this bonus in cents
          type: number
        total_amount:
          description: Total ammount that will be deducted from your balance in cents
          type: number
      example:
        id: 621014cb8e9e0f81e387021f
        study: 620ca2735fcbba4fa2b3211a
        amount: 850
        fees: 283.34
        vat: 0
        total_amount: 1133.34
    SendMessage:
      required:
        - recipient_id
        - body
        - study_id
      type: object
      properties:
        recipient_id:
          description: Recipient user's id
          type: string
        body:
          description: Message Body. Text is sanitised for safe storage and display.
          type: string
        study_id:
          description: This study is the reason for this message
          type: string
    SendBulkMessage:
      required:
        - ids
        - body
        - study_id
      type: object
      properties:
        ids:
          description: A list of participant ID's
          type: array
          items:
            type: string
        body:
          description: Message Body. Text is sanitised for safe storage and display.
          type: string
        study_id:
          description: A study ID
          type: string
    Messages:
      type: object
      additionalProperties: true
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Message:
      required:
        - sender_id
        - body
        - sent_at
        - channel_id
      type: object
      properties:
        sender_id:
          description: Id of the user who sent the message
          type: string
        body:
          description: Body of the message.
          type: string
        sent_at:
          description: Date time when message was sent
          type: string
          format: date-time
        type:
          description: Will only me message for now
          type: string
        channel_id:
          description: The channel ID, for linking back to a thread in the Prolific app.
          type: string
          example: d45c8a5e812ff990fc6546beaf888c9820f4c184f7200a45d900cf0f321f7f38
        data:
          description: Metadata for a message
          type: object
          properties:
            study_id:
              description: >-
                What study the message relates to. In case this is not
                automatically filled for the participant, they can choose which
                study their message relates to.
              type: string
              example: 620ca2735fcbba4fa2b3211a
            category:
              description: >-
                Participants can self-categorise their message before sending
                it.
              type: string
              example: feedback
              enum:
                - payment-timing
                - payment-issues
                - technical-issues
                - feedback
                - rejections
                - other
    SubscriptionList:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          description: List of all subscriptions.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionDetail'
    SubscriptionUpdateDetail:
      additionalProperties: true
      required:
        - event_type
        - target_url
      type: object
      properties:
        event_type:
          description: The name of the event type associated to the subscription.
          type: string
        target_url:
          description: >-
            The URL that the subscription will notify when your event type is
            triggered.
          type: string
        is_enabled:
          description: Whether the subscription is enabled or not.
          type: boolean
    SubscriptionDetail:
      additionalProperties: true
      required:
        - event_type
        - target_url
        - workspace_id
      type: object
      properties:
        id:
          description: The ID of the subscription.
          type: string
          readOnly: true
        event_type:
          description: The name of the event type associated to the subscription.
          type: string
        target_url:
          description: >-
            The URL that the subscription will notify when your event type is
            triggered.
          type: string
        is_enabled:
          description: Whether the subscription is enabled or not.
          type: boolean
        workspace_id:
          description: The ID of the workspace we will create the subscription in.
          type: string
    SubscriptionEventList:
      type: object
      additionalProperties: true
      required:
        - results
      properties:
        results:
          description: All the events triggered for the subscription
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionEvent'
    SubscriptionEvent:
      type: object
      properties:
        id:
          description: The ID of the subscription event.
          type: string
        datetime_created:
          description: The time the event was created.
          type: string
        datetime_updated:
          description: The last time the event was updated.
          type: string
        event_type:
          description: The event type that was triggered.
          type: string
        resource_id:
          description: The Prolific Resource ID that the event is linked to.
          type: string
        status:
          description: >-
            The status of the event. Will be `FAILED` if the `target_url`
            response is not 2xx.
          type: string
          enum:
            - PENDING
            - SUCCEEDED
            - FAILED
        target_url:
          description: The URL where the event payload is sent.
          type: string
        payload:
          description: The event payload that was sent to the target url.
          type: object
          nullable: true
    EventTypeList:
      type: object
      additionalProperties: true
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/EventType'
    EventType:
      type: object
      properties:
        description:
          type: string
        event_type:
          type: string
      example:
        description: A status change event for studies
        event_type: study.status.change
    CreateSecret:
      type: object
      additionalProperties: true
      properties:
        workspace_id:
          description: The ID of the workspace you are creating the secret in
          type: string
    SecretList:
      type: object
      additionalProperties: true
      properties:
        results:
          description: A list of secrets.
          type: array
          items:
            $ref: '#/components/schemas/SecretDetail'
      example:
        - id: 63722971f9cc073ecc730f6a
          value: secret-and-safe
          workspace_id: 63722982f9cc073ecc730f6b
    SecretDetail:
      type: object
      additionalProperties: true
      properties:
        id:
          description: The ID of the secret.
          type: string
        value:
          description: The secret value.
          type: string
        workspace_id:
          description: The ID of the workspace that the secret belongs to.
          type: string
      example:
        id: 63722971f9cc073ecc730f6aX
        value: cGNqFPb6y0RT3XO9XVSessBDYIbHQ-....
        workspace_id: 63722982f9cc073ecc730f6b
    GetAllSurveysResponse:
      title: Get all the surveys API response
      type: object
      required:
        - results
      properties:
        results:
          description: List of all surveys matching the criteria.
          type: array
          items:
            $ref: '#/components/schemas/SurveyOut'
    SurveyIn:
      title: SurveyIn
      description: The model used to create a `Survey`.
      required:
        - researcher_id
        - title
      type: object
      properties:
        title:
          title: Title
          description: The survey title.
          type: string
          example: A survey about vegetables
        researcher_id:
          title: Researcher Id
          description: The Prolific researcher ID.
          type: string
          example: '7172727272'
        sections:
          title: Sections
          description: An array of sections in the survey, or use `questions`.
          type: array
          items:
            $ref: '#/components/schemas/SurveySection'
        questions:
          title: Questions
          description: An array of questions in the survey, or use `sections`.
          type: array
          items:
            $ref: '#/components/schemas/SurveyQuestion'
    SurveyOut:
      title: SurveyOut
      description: The model used to create a serialised representation a `Survey`.
      required:
        - researcher_id
        - title
      type: object
      properties:
        title:
          title: Title
          description: The survey title.
          type: string
          example: A survey about vegetables
        _id:
          title: ' Id'
          description: Auto generated by the system.
          type: string
        date_created:
          title: Date Created
          description: The date/time the survey was created (UTC).
          type: string
          format: date-time
          example: '2022-05-27T08:43:12'
        date_modified:
          title: Date Modified
          description: The date/time the survey was modified (UTC).
          type: string
          format: date-time
          example: '2022-05-27T08:43:12'
        researcher_id:
          title: Researcher Id
          description: The Prolific researcher ID.
          type: string
          example: '7172727272'
        sections:
          title: Sections
          description: >-
            Optional: An array of sections in the survey, otherwise `questions`
            will be defined.
          type: array
          items:
            $ref: '#/components/schemas/SurveySection'
        questions:
          title: Questions
          description: >-
            Optional: An array of questions in the survey, otherwise `sections`
            will be defined.
          type: array
          items:
            $ref: '#/components/schemas/SurveyQuestion'
    SurveyResponseIn:
      title: ResponseIn
      description: The model used to create a `Response`.
      required:
        - participant_id
        - submission_id
      type: object
      properties:
        participant_id:
          title: Participant Id
          description: The Prolific participant ID.
          type: string
          example: 62908f0b98a55b36ac68b992
        sections:
          title: Sections
          description: An array of sections from the survey, otherwise use `questions`.
          type: array
          items:
            $ref: '#/components/schemas/SurveyResponseSection'
        questions:
          title: Questions
          description: An array of questions from the survey, otherwise use `sections`.
          type: array
          items:
            $ref: '#/components/schemas/SurveyQuestionResponse'
        submission_id:
          title: Submission Id
          description: The Prolific submission ID.
          type: string
          example: 62908f0b98a55b36ac68b992
    SurveyResponseSection:
      title: Section
      description: |-
        Responsible for linking question/answers to a response for a survey.

        This is more of a long term thing, but helps if we add now.
      required:
        - questions
        - section_id
      type: object
      properties:
        questions:
          title: Questions
          description: The questions for a given section.
          type: array
          items:
            $ref: '#/components/schemas/SurveyQuestionResponse'
        section_id:
          title: Section Id
          description: The section ID.
          type: string
          format: uuid
    SurveyQuestionResponse:
      title: QuestionResponse
      description: Responsible for defining an answer to a survey question
      required:
        - answers
        - question_id
        - question_title
      type: object
      properties:
        answers:
          title: Answers
          description: The answers selected.
          type: array
          items:
            $ref: '#/components/schemas/SurveyResponseAnswer'
        question_id:
          title: Question Id
          description: The question ID.
          type: string
          format: uuid
        question_title:
          title: Question Title
          description: The title of the survey question.
          type: string
    SurveyResponseOut:
      title: ResponseOut
      description: The model used to create a serialised representation a `Response`.
      required:
        - participant_id
        - submission_id
      type: object
      properties:
        _id:
          title: ' Id'
          type: string
        date_created:
          title: Date Created
          description: The date/time the response was created (UTC).
          type: string
          format: date-time
          example: '2022-05-27T08:43:12'
        date_modified:
          title: Date Modified
          description: The date/time the response was modified (UTC).
          type: string
          format: date-time
          example: '2022-05-27T08:43:12'
        participant_id:
          title: Participant Id
          description: The Prolific participant ID.
          type: string
          example: 62908f0b98a55b36ac68b992
        sections:
          title: Sections
          description: An array of sections from the survey, otherwise `questions`.
          type: array
          items:
            $ref: '#/components/schemas/SurveyResponseSection'
        questions:
          title: Questions
          description: An array of questions from the survey, otherwise `sections`.
          type: array
          items:
            $ref: '#/components/schemas/SurveyQuestionResponse'
        submission_id:
          title: Submission Id
          description: The Prolific submission ID.
          type: string
          example: 62908f0b98a55b36ac68b992
    SurveyResponseAnswer:
      title: ResponseAnswer
      description: Responsible for defining a response to a question
      required:
        - answer_id
        - value
      type: object
      properties:
        answer_id:
          title: Answer Id
          description: The answer ID.
          type: string
          format: uuid
        value:
          title: Value
          description: The answer option value selected.
          type: string
          example: Potato
    SurveySection:
      title: Section
      description: |-
        Responsible for providing a section to the survey.

        This is more of a long term thing, but helps if we add now.
      required:
        - questions
        - title
      type: object
      properties:
        title:
          title: Title
          description: The section title.
          type: string
          example: Root vegetables
        id:
          title: Id
          description: Auto generated by the system.
          type: string
          format: uuid
        questions:
          title: Questions
          description: An array of questions a section within a Survey.
          maxItems: 5
          type: array
          items:
            $ref: '#/components/schemas/SurveyQuestion'
    SurveySummary:
      title: Summary
      description: >-
        Responsible for providing a base for all the aggregated answers for a
        survey.
      required:
        - survey_id
      type: object
      properties:
        survey_id:
          title: Survey Id
          description: The survey ID.
          type: string
        questions:
          title: Questions
          description: A list of questions for the given survey.
          type: array
          items:
            $ref: '#/components/schemas/SurveySummaryQuestion'
      example:
        survey_id: 63346b3a4fd1fe7b39f192e9
        questions:
          - question_id: 02dee012-25e4-449e-8f2f-a552b9007d92
            question: Do you feel that this will all be alright on the night?
            total_answers: 10
            answers:
              - answer_id: 4c69011b-9b6b-46c6-8ba2-da80761131dc
                answer: 'Yes'
                count: 4
              - answer_id: f3c8d38f-842c-49d9-a0bb-e17b7803b240
                answer: 'No'
                count: 6
    SurveySummaryAnswer:
      title: SummaryAnswer
      description: Responsible for housing the aggregation for a specific answer.
      required:
        - answer
      type: object
      properties:
        answer_id:
          title: Answer Id
          description: The answer ID.
          type: string
          format: uuid
        answer:
          title: Answer
          description: The answer selected.
          type: string
        count:
          title: Count
          description: The count of how many times this answer was used in a response.
          type: integer
          default: 0
    SurveySummaryQuestion:
      title: SummaryQuestion
      description: >-
        Responsible for housing the questions we want to aggregate for the
        summary.
      required:
        - question
      type: object
      properties:
        question_id:
          title: Question Id
          description: The question ID.
          type: string
          format: uuid
        question:
          title: Question
          description: The title of the question.
          type: string
        total_answers:
          title: Total Answers
          description: The total number of answered responses for a given question.
          type: integer
          default: 0
        answers:
          title: Answers
          description: A list of aggregated answer information.
          type: array
          items:
            $ref: '#/components/schemas/SurveySummaryAnswer'
    SurveyQuestion:
      title: Question
      description: Responsible for defining a question within a survey.
      required:
        - answers
        - title
        - type
      type: object
      properties:
        title:
          title: Title
          description: The question title.
          maxLength: 200
          type: string
          example: What is your favourite root vegetable?
        answers:
          title: Answers
          description: An array of answer options for a question.
          maxItems: 10
          type: array
          items:
            $ref: '#/components/schemas/SurveyAnswerOption'
        id:
          title: Id
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/SurveyQuestionType'
      x-konfig-properties:
        type:
          description: The type of question being asked.
          example: single
    SurveyAnswerOption:
      title: AnswerOption
      description: Responsible for defining an answer model for a given question
      required:
        - value
      type: object
      properties:
        id:
          title: Id
          type: string
          format: uuid
        value:
          title: Value
          description: The answer option value that can be selected.
          maxLength: 140
          type: string
          example: Potato
    SurveyQuestionType:
      title: QuestionType
      description: |-
        Responsible for articulating the question type. At the moment we have:

        - single answer
        - multiple answer

        Args:
            str (_type_): The type of question.
            Enum (_type_): The class to define an enum.
      enum:
        - single
        - multiple
      type: string
    ParticipantGroupListResponse:
      additionalProperties: true
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantGroup'
    ParticipantGroup:
      type: object
      properties:
        description:
          description: The user-provided description of the participant group
          type: string
          nullable: true
          example: My first participant group
        id:
          description: The id of the participant group
          type: string
          example: 5e9b9c9b0f9c9a0001b0b1f5
        name:
          description: The name of the participant group
          type: string
          example: Group 1
        project_id:
          description: The id of the project the participant group belongs to
          type: string
          nullable: true
          example: null
          deprecated: true
        workspace_id:
          description: >-
            The id of the workspace the participant group belongs to. A
            participant group can only belong to either a workspace or an
            organisation.
          type: string
          nullable: true
          example: 5e9b9c9b0f9c9a0001b1ca2f
        organisation_id:
          description: >-
            The id of the organisation the participant group belongs to. A
            participant group can only belong to either a workspace or an
            organisation.
          type: string
          nullable: true
          example: 5e9b9c9b0f9c9a0001b1ca2f
        participant_count:
          description: The number of participants in the participant group
          type: integer
          example: 10
          readOnly: true
        is_deleted:
          description: Whether the participant group has been deleted
          type: boolean
          example: false
          readOnly: true
        feeder_studies:
          description: >-
            Details of all studies which are configured to modify the
            participants in this group through completion codes.
          type: array
          readOnly: true
          items:
            type: object
            properties:
              id:
                description: The id of the study.
                type: string
                example: 5e9b9c9b0f9c9a0001b0b1f4
              name:
                description: The name of the study.
                type: string
                example: Study 1
              internal_name:
                description: The internal name of the study.
                type: string
                example: My Study
              status:
                description: The current status of the study.
                type: string
                example: COMPLETED
              feeder_completion_codes:
                description: >-
                  The completion codes which will modify the participants in
                  this group.
                type: array
                items:
                  description: >-
                    The code within this study that interacts with the
                    participant group.
                  type: object
                  properties:
                    code:
                      description: >-
                        The code that will modify the participants in this
                        group.
                      type: string
                      example: AJVRH234
                    code_type:
                      description: >-
                        The label or code type given to this code within the
                        context of the study.
                      type: string
                      example: COMPLETION_CODE
                    action:
                      description: The action that will be taken when this code is used.
                      type: string
                      example: ADD_TO_PARTICIPANT_GROUP
                      enum:
                        - ADD_TO_PARTICIPANT_GROUP
                        - REMOVE_FROM_PARTICIPANT_GROUP
    ParticipantGroupUpdate:
      type: object
      properties:
        name:
          description: The name of the participant group
          type: string
          example: Group 1
        participant_ids:
          description: >-
            The ids of participants to be included in the group.


            Note, this overwrites any existing participants in the group; use
            the participant group membership endpoints to
            [append](https://docs.prolific.com) or
            [remove](https://docs.prolific.com) participants from the group.
          type: array
          items:
            type: string
          example:
            - 5e9b9c9b0f9c9a0001b0b1f4
            - 5e9b9c9b0f9c9a0001b0b1f5
            - 5e9b9c9b0f9c9a0001b0b1f6
    ParticipantIDList:
      type: object
      properties:
        participant_ids:
          type: array
          items:
            description: The id of the participant
            type: string
            example: 5e9b9c9b0f9c9a0001b0b1f5
    ParticipantGroupMembership:
      type: object
      properties:
        participant_id:
          description: The id of the participant
          type: string
          example: 5e9b9c9b0f9c9a0001b0b1f5
        datetime_created:
          description: The date and time the participant was added to the Participant Group
          type: string
          example: '2020-04-20T12:00:00Z'
    ParticipantGroupMembershipListResponse:
      additionalProperties: true
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantGroupMembership'
    AutomaticallyApprove:
      type: object
      required:
        - action
      properties:
        action:
          description: The action to take
          type: string
          enum:
            - AUTOMATICALLY_APPROVE
    AddToParticipantGroup:
      type: object
      required:
        - action
        - participant_group
      properties:
        action:
          description: The action to take
          type: string
          enum:
            - ADD_TO_PARTICIPANT_GROUP
        participant_group:
          description: The participant group to add the participant to.
          type: string
          example: 636e4f379e7d29c6875313e3
    RemoveFromParticipantGroup:
      type: object
      required:
        - action
        - participant_group
      properties:
        action:
          description: The action to take
          type: string
          enum:
            - REMOVE_FROM_PARTICIPANT_GROUP
        participant_group:
          description: The participant group to remove the participant from.
          type: string
          example: 636e4f379e7d29c6875313e3
    ManuallyReview:
      type: object
      required:
        - action
      properties:
        action:
          description: The action to take
          type: string
          enum:
            - MANUALLY_REVIEW
    RequestReturn:
      type: object
      required:
        - action
        - return_reason
      properties:
        action:
          description: The action to take
          type: string
          enum:
            - REQUEST_RETURN
        return_reason:
          description: The reason you would like to request a return
          type: string
          example: Failed an attention check
    WorkspaceBalance:
      type: object
      properties:
        currency_code:
          description: >-
            The currency used for all financial transactions within the
            workspace.
          type: string
        total_balance:
          description: >-
            The total balance of the workspace, including funds which have
            already been assigned to active studies.


            All monetary values are shown in the sub-currency of your workspace
            currency (e.g. pence, cents).
          type: integer
        balance_breakdown:
          description: |-
            A breakdown of the total balance of the workspace into:
            - Funds available to pay to participants
            - Funds pre-paid to Prolific for our services
            - Funds for any VAT applied to our service fees
          type: object
        available_balance:
          description: >-
            The remaining balance of your workspace which is available to spend,
            after removing funds assigned to already active studies, etc.
          type: integer
        available_balance_breakdown:
          description: |-
            A breakdown of the available balance of the workspace into:
            - Funds available to pay to participants
            - Funds pre-paid to Prolific for our services
            - Funds for any VAT applied to our service fees
          type: object
      example:
        currency_code: GBP
        total_balance: 630
        balance_breakdown:
          rewards: 450
          fees: 150
          vat: 30
        available_balance: 210
        available_balance_breakdown:
          rewards: 150
          fees: 50
          vat: 10
    CreateInvitationResponse:
      additionalProperties: true
      type: object
      properties:
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/Invitation'
    Invitation:
      type: object
      properties:
        association:
          description: The ID of the workspace or project to which the invitee was invited.
          type: string
          format: objectId
        invitee:
          type: object
          properties:
            id:
              description: The unique ID of the invitee.
              type: string
              nullable: true
              format: objectId
            name:
              description: The name of the invitee.
              type: string
              nullable: true
            email:
              description: The email address of the invitee.
              type: string
              format: email
        invited_by:
          description: The ID of the user who sent the invitation.
          type: string
          format: objectId
        status:
          description: The current status of the invitation.
          type: string
          enum:
            - INVITED
            - ACCEPTED
        invite_link:
          description: The link that the invitee can use to accept the invitation.
          type: string
          format: uri
    CreateInvitationRequest:
      type: object
      properties:
        association:
          description: The ID of the workspace to which the users are being invited.
          type: string
          format: objectId
        emails:
          description: An array of email addresses of the users to invite.
          type: array
          items:
            type: string
            format: email
        role:
          description: >
            The role that the invited users will have in the workspace or
            project. This can be one of the following:

            - "WORKSPACE_ADMIN": The user will have administrative rights in the
            workspace. They can manage settings, invite users, and oversee all
            projects.

            - "WORKSPACE_COLLABORATOR": The user will be a regular collaborator
            in the workspace. They can contribute to projects but don't have
            administrative rights.

            - "PROJECT_EDITOR": The user will have edit rights for a specific
            project within a workspace.
          type: string
          enum:
            - WORKSPACE_ADMIN
            - WORKSPACE_COLLABORATOR
            - PROJECT_EDITOR
    FilterListAttributes:
      type: object
      properties:
        title:
          description: The title of the filter.
          type: string
        description:
          description: A description of the filter.
          type: string
        filter_id:
          description: >-
            The ID of the filter, based on a slugified version of the title at
            the time the filter was created.
          type: string
        type:
          description: The filter type.
          type: string
          enum:
            - select
            - range
        question:
          description: The question asked of participants to generate this filter.
          type: string
    FilterListDetailedAttributes:
      type: object
      properties:
        tags:
          description: >-
            Some additional tags that can be used to display the filter in a
            specific way, e.g. recommended, new, expiring.
          type: array
          nullable: true
          items:
            type: string
        researcher_help_text:
          description: >-
            Some help text to be displayed to researchers in the prescreening
            modal.
          type: string
          nullable: true
        participant_help_text:
          description: >-
            Some help text to be displayed to participants in the About You
            section.
          type: string
          nullable: true
        category:
          description: >-
            The category the filter is displayed in in About You and the
            prescreening modal.
          type: string
          nullable: true
        subcategory:
          description: >-
            The sub-category the filter is displayed in in the prescreening
            modal.
          type: string
          nullable: true
        display_order:
          description: >-
            The order in which the filter is displayed within its sub-category
            in the prescreening modal.
          type: integer
          nullable: true
    SelectFilterListAttributes:
      type: object
      properties:
        choices:
          description: >-
            An object containing all the filter's possible responses as
            key-value pairs, with sequential integer IDs or database ObjectIDs
            as the keys and the text of the response as the values.
          type: object
          additionalProperties: true
        data_type:
          description: >-
            The format of the keys in the choices object. If the keys are
            strings representing sequential integers,

            the data format is integer. If the keys are database ObjectIDs, the
            type of ID is specified.
          type: string
          enum:
            - ChoiceID
            - ParticipantID
            - StudyID
            - ParticipantGroupID
    RangeFilterListAttributes:
      type: object
      properties:
        min:
          description: The minimum valid value of the range.
          oneOf:
            - type: integer
            - type: string
        max:
          description: The maximum valid value of the range.
          oneOf:
            - type: integer
            - type: string
        data_type:
          description: >-
            The data type of the range. If the data type is integer, the lower
            and upper values must be integers.

            If the data type is date, the lower and upper values must be ISO8601
            dates.
          type: string
          enum:
            - date
            - integer
    SelectFilterListResponse:
      allOf:
        - $ref: '#/components/schemas/FilterListAttributes'
        - $ref: '#/components/schemas/SelectFilterListAttributes'
    SelectFilterListDetailedResponse:
      allOf:
        - $ref: '#/components/schemas/FilterListAttributes'
        - $ref: '#/components/schemas/SelectFilterListAttributes'
        - $ref: '#/components/schemas/FilterListDetailedAttributes'
    RangeFilterListResponse:
      allOf:
        - $ref: '#/components/schemas/FilterListAttributes'
        - $ref: '#/components/schemas/RangeFilterListAttributes'
    RangeFilterListDetailedResponse:
      allOf:
        - $ref: '#/components/schemas/FilterListAttributes'
        - $ref: '#/components/schemas/RangeFilterListAttributes'
        - $ref: '#/components/schemas/FilterListDetailedAttributes'
    FilterList:
      type: object
      properties:
        results:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SelectFilterListResponse'
              - $ref: '#/components/schemas/SelectFilterListDetailedResponse'
              - $ref: '#/components/schemas/RangeFilterListResponse'
              - $ref: '#/components/schemas/RangeFilterListDetailedResponse'
        _links:
          type: object
          additionalProperties: true
        meta:
          type: object
          additionalProperties: true
    SelectFilter:
      type: object
      required:
        - filter_id
        - selected_values
      properties:
        filter_id:
          description: ID of the "select" type filter.
          type: string
        selected_values:
          description: >-
            This schema applies for filters of the `select` type, as defined in
            the [filter list
            response](\#tag/Filters/paths/~1api~1v1~1filters~1/get).


            Array of IDs matching the response IDs, from the `select` filter's
            `choices` (see response linked above).


            String format should match the `data_type` of the `select` filter's
            `choices` (see response linked above).
          type: array
          items:
            type: string
        weightings:
          description: >-
            Ratios to control the distribution of participants across the
            selected values.


            Integer percentages, floats, and exact quantities are valid inputs.
          type: object
          additionalProperties:
            type: number
    RangeFilter:
      type: object
      required:
        - selected_range
        - filter_id
      properties:
        filter_id:
          description: ID of the "range" type filter.
          type: string
        selected_range:
          description: >-
            This schema applies for filters of the `range` type, as defined in
            the [filter list
            response](\#tag/Filters/paths/~1api~1v1~1filters~1/get).


            A dictionary with two possible objects, 'lower' and 'upper'. At
            least one must be present and a non-null value.


            The expected data type for these values is defined by the `range`
            filter's `data_type` (see response linked above).


            If the data_type is a date, string format should be a parseable
            ISO8601 date string. Date values should be provided as a string in
            ISO 8601 format.


            Leaving a value as null will result in that bound being set to the
            lowest or highest possible value, depending on whether it is the
            upper or lower bound.
          type: object
          properties:
            lower:
              description: Your selected lower bound for the range.
              anyOf:
                - type: integer
                - type: string
            upper:
              description: Your selected upper bound for the range.
              anyOf:
                - type: integer
                - type: string
    UpdateFilterSet:
      type: object
      properties:
        name:
          description: Name of the filter set.
          type: string
        filters:
          description: List of all filters contained in the filter set.
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SelectFilter'
              - $ref: '#/components/schemas/RangeFilter'
      example:
        - name: Left-handed 30-somethings
          filters:
            - id: handedness
              selected_values:
                - '1'
            - id: age
              selected_range:
                lower: 30
                upper: 39
    CreateFilterSet:
      allOf:
        - type: object
          properties:
            workspace_id:
              description: ID of the workspace where the filter set can be used.
              type: string
            organisation_id:
              description: ID of the organisation where the filter set can be used.
              type: string
            name:
              description: Name of the filter set.
              type: string
            filters:
              description: List of all filters contained in the filter set.
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/SelectFilter'
                  - $ref: '#/components/schemas/RangeFilter'
      example:
        - workspace_id: 644aaabfaf6bbc363b9d47c6
          name: Ambidextrous teenagers
          filters:
            - id: handednessX
              selected_values:
                - '2'
            - id: ageX
              selected_range:
                lower: 18
                upper: 19
    FilterSet:
      allOf:
        - type: object
          properties:
            version:
              description: >-
                An incrementing integer indicating the version of the filter
                set.
              type: integer
            id:
              description: ID of the filter set.
              type: string
            is_deleted:
              description: Whether the filter set has been deleted.
              type: boolean
            is_locked:
              description: Whether the filter set has been locked.
              type: boolean
            workspace_id:
              description: ID of the workspace where the filter set can be used.
              type: string
              nullable: true
            organisation_id:
              description: ID of the workspace where the filter set can be used.
              type: string
              nullable: true
            name:
              description: Name of the filter set.
              type: string
            filters:
              description: List of all filters contained in the filter set.
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/SelectFilter'
                  - $ref: '#/components/schemas/RangeFilter'
      example:
        version: 1
        id: 644ab312af6bbc363b9d47c7X
        workspace_id: 644aaabfaf6bbc363b9d47c6
        name: Ambidextrous teenagers
        filters:
          - id: handednessX
            selected_values:
              - '2'
          - id: ageX
            selected_range:
              lower: 18
              upper: 19
        is_locked: true
        is_deleted: false
        eligible_participant_count: 0
    FilterSetParticipantCount:
      properties:
        eligible_participant_count:
          description: >-
            The number of participants who match the filter sets filters. Please
            note that if the number is

            lower than 25 the count will be obscured to prevent identification
            of participants.
          type: integer
      additionalProperties: true
    FilterSetList:
      type: object
      properties:
        results:
          description: List of filter sets.
          type: array
          items:
            $ref: '#/components/schemas/FilterSet'
      additionalProperties: true
    RequirementsCountRequest:
      type: object
      required:
        - filters
      properties:
        filters:
          description: >-
            List of filters to apply to the count. This parameter uses the new,
            simplified

            filters schema for interacting with eligibility.
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SelectFilter'
              - $ref: '#/components/schemas/RangeFilter'
        workspace_id:
          description: >-
            The ID of the workspace you will be creating a study in.


            Due to US tax laws, non US residents may not participate in studies
            created by US researchers.

            For this reason, we use the country specified in the workspace to
            determine eligibility.


            If you do not specify a workspace ID, we will use the current
            workspace ID of the user making the request.

            Your eligibility count may not be accurate if you do not specify a
            workspace ID.
          type: string
        organisation_id:
          description: The ID of the workspace you will be creating a filterset in.
          type: string
    RequirementsCount:
      required:
        - count
      type: object
      additionalProperties: true
      properties:
        count:
          description: Number of participants passing all the requirements
          type: number
    MutuallyExclusiveStudyCollectionsResponse:
      required:
        - results
      type: object
      properties:
        results:
          description: List of all mutually exclusive study collections in a project
          type: array
          items:
            $ref: '#/components/schemas/MutuallyExclusiveStudyCollectionUpdate'
    MutuallyExclusiveStudyCollectionUpdate:
      type: object
      properties:
        description:
          description: A description of the study collection
          type: string
          example: This is a description of my mutually exclusive study collection
        name:
          description: Mutually exclusive study collection name
          type: string
          example: My Mutually Exclusive Study Collection
        publish_at:
          description: >-
            Datetime and timezone the study collection should be scheduled to be
            published at
          type: string
          example: 2050-02-28T13:45:00 Europe/London
          nullable: true
        study_ids:
          description: >-
            List of study ids you wish to include in the collection. Note, this
            will overwrite the current list of studies in the collection
          type: array
          items:
            type: string
            example: 5f7b9a7b5f7b9a7b5f7b9a7b
    StudiesDuplicateStudyRequest:
      type: object
      properties:
        block_previous_participants:
          description: Controls whether the block list is added or not.
          type: boolean
          default: true
    SubmissionsRequestReturnRequest:
      type: object
      required:
        - request_return_reasons
      properties:
        request_return_reasons:
          type: array
          items:
            type: string
      example:
        request_return_reasons:
          - Withdrew consent.
          - Did not finish study.
    SubmissionsBulkApproveRequest:
      oneOf:
        - title: Participant IDs
          properties:
            study_id:
              type: string
            participant_ids:
              type: array
              items:
                type: string
          required:
            - study_id
            - participant_ids
        - title: Submission IDs
          properties:
            submission_ids:
              type: array
              items:
                type: string
          required:
            - submission_ids
    BonusesSetUpPaymentsRequest:
      type: object
      properties:
        study_id:
          type: string
        csv_bonuses:
          type: string
      example:
        study_id: 60f6acb180a7b59ac0621f9e
        csv_bonuses: |-
          60ffe5c8371090c7041d43f8,4.25
          60ff44a1d00991f1dfe405d9,4.25
    ParticipantGroupsCreateNewGroupRequest:
      type: object
      required:
        - name
      properties:
        description:
          description: A description of the participant group
          type: string
          example: Participants with confirmed special dietary requirements.
        workspace_id:
          description: >-
            The id of the workspace to create the participant group in. Either a
            workspace or organisation ID must be specified.
          type: string
        organisation_id:
          description: >-
            The id of the organisation to create the participant group in.
            Either a workspace or organisation ID must be specified.
          type: string
        name:
          description: The name of the participant group
          type: string
          example: Group 1
        participant_ids:
          description: The ids of participants to be initially added to the group
          type: array
          items:
            type: string
          example:
            - 5e9b9c9b0f9c9a0001b0b1f4
            - 5e9b9c9b0f9c9a0001b0b1f5
            - 5e9b9c9b0f9c9a0001b0b1f6
    FilterSetsCloneFilterSetRequest:
      type: object
      properties:
        new_name:
          description: A new name for the cloned filter set.
          type: string
    StudyCollectionsTransitionMutuallyExclusiveRequest:
      type: object
      properties:
        action:
          type: string
          enum:
            - PUBLISH
            - SCHEDULE_PUBLISH
            - CANCEL_PUBLISH
        publish_at:
          description: >-
            Optional parameter for scheduling publish, indicating the datetime
            and timezone the study collection should be scheduled to be
            published at
          type: string
    SurveysDeleteSingleSurveyResponse:
      type: object
      properties: {}
      example: {}
    SurveysDeleteResponseResponse:
      type: object
      properties: {}
      example: {}
    StudiesDownloadDemographicDataResponse:
      description: A CSV string if no method is provided.
      type: string
    StudiesDownloadDemographicData200Response:
      description: A status report if the email method is provided.
      type: object
      properties:
        status:
          type: string
          enum:
            - Your export should arrive shortly.
    SubmissionsBulkApproveResponse:
      type: string
      example: The request to bulk approve has been made successfully.
    BonusesMakePaymentResponse:
      type: string
    SurveysDeleteAllResponsesResponse:
      type: object
      properties: {}
      example: {}
    SurveysGetAllResponsesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 63063d07691a81e96a6e8494
              date_created:
                type: string
                example: '2022-08-24T15:00:23.325000'
              date_modified:
                type: string
                example: '2022-08-24T15:00:23.325000'
              participant_id:
                type: string
                example: 5c83c95d4c266300156edc01
              submission_id:
                type: string
                example: 63063cfc71fd74aad90886c4
              sections:
                type: array
                items:
                  type: object
                  properties:
                    section_id:
                      type: string
                      example: 75ac961f-d94a-4490-af8f-935ca088315f
                    questions:
                      type: array
                      items:
                        type: object
                        properties:
                          question_id:
                            type: string
                            example: 3797222e-f731-4bea-838b-f668682d902d
                          question_title:
                            type: string
                            example: Do you like ice cream?
                          answers:
                            type: array
                            items:
                              type: object
                              properties:
                                answer_id:
                                  type: string
                                  example: c72d8cf9-5429-40ae-ac74-10041ed68824
                                value:
                                  type: string
                                  example: 'Yes'
      example:
        results:
          - id: 63063d07691a81e96a6e8494X
            date_created: '2022-08-24T15:00:23.325000'
            date_modified: '2022-08-24T15:00:23.325000'
            participant_id: 5c83c95d4c266300156edc01
            submission_id: 63063cfc71fd74aad90886c4
            sections:
              - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                questions:
                  - question_id: 3797222e-f731-4bea-838b-f668682d902d
                    question_title: Do you like ice cream?
                    answers:
                      - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                        value: 'Yes'
          - id: 63063d03691a81e96a6e8493X
            date_created: '2022-08-24T15:00:19.478000'
            date_modified: '2022-08-24T15:00:19.478000'
            participant_id: 5c83c95d4c266300156edc01
            submission_id: 5e0f36b63ccda26295505f0d
            sections:
              - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                questions:
                  - question_id: 3797222e-f731-4bea-838b-f668682d902d
                    question_title: Do you like ice cream?
                    answers:
                      - answer_id: a2de5745-b0b4-421b-98ec-23935c78be13
                        value: 'No'
    FilterSetsCreateFromFiltersResponse:
      allOf:
        - $ref: '#/components/schemas/FilterSet'
        - $ref: '#/components/schemas/FilterSetParticipantCount'
    FilterSetsGetDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/FilterSet'
        - $ref: '#/components/schemas/FilterSetParticipantCount'
    FilterSetsUpdateDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/FilterSet'
        - $ref: '#/components/schemas/FilterSetParticipantCount'
    FilterSetsCloneFilterSetResponse:
      allOf:
        - $ref: '#/components/schemas/FilterSet'
        - $ref: '#/components/schemas/FilterSetParticipantCount'
    FilterSetsLockForEditingResponse:
      allOf:
        - $ref: '#/components/schemas/FilterSet'
        - $ref: '#/components/schemas/FilterSetParticipantCount'
    FilterSetsUnlockForEditingResponse:
      allOf:
        - $ref: '#/components/schemas/FilterSet'
        - $ref: '#/components/schemas/FilterSetParticipantCount'
  securitySchemes:
    token:
      description: >-
        The Prolific API uses API token to authenticate requests. You can create
        an API token directly from your settings.


        Your API token does not have an expiry date and carries full permission,
        so be sure to keep them secure.


        If your token is leaked, delete it and create a new one directly in the
        app.


        In your requests add `Authorization` header with the value `Token <your
        token>`.
      type: apiKey
      name: Authorization
      in: header
