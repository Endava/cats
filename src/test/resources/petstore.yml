openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://petstore.swagger.io/api
paths:
  /pets/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
            example: 78
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: string
            example: test
        - name: ""
          in: query
          schema:
            type: string
            example: ""
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/operations/{id}:
    patch:
      description: Patch pet
      operationId: patchPets
      parameters:
        - description: ID
          in: path
          name: id
          required: true
          schema:
              type: string
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColoredPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    get:
      description: Create pet based on enum
      operationId: getOpPet
      parameters:
        - description: ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    delete:
      description: Create pet based on enum
      operationId: deleteOpPet
      parameters:
        - description: ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /pets/operations-bad/{id}:
    put:
      description: Put pet
      operationId: putPet
      parameters:
        - description: ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    post:
      description: Post pet
      operationId: postPet
      parameters:
        - description: ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    patch:
      description: Patch pet
      operationId: patchPet
      parameters:
        - description: ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    get:
      description: Create pet based on enum
      operationId: getOpPetBad
      parameters:
        - description: ID
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColoredPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    delete:
      description: Create pet based on enum
      operationId: deleteOpPetBad
      parameters:
        - description: ID
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColoredPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /pets/pet-enum:
    post:
      description: Create pet based on enum
      operationId: enumPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColoredPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /reference-pets:
    $ref: '#/paths/~1pets~1{id}'
  /pet/url-encoded/{hook_id}:
    put:
      description: Updates a hook configuration.
      operationId: updateHook
      parameters:
        - description: Hook ID
          in: path
          name: hook_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Error"
        description: Request body updates given hook.
        required: true
      responses:
        "200":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: "#/components/schemas/Error"
          description: "My error"
  /mimic/agent/{agentNum}/value/mset:
    put:
      description: This is a performance optimization of the mimic value set command, to be used when many variables are to be set.
      operationId: mset_value
      parameters:
        - description: Agent of the value space
          in: path
          name: agentNum
          required: true
          schema:
            format: int32
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                items:
                  type: string
                type: array
              type: array
        description: objInsVarValArray
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
        "400":
          description: Invalid agent number value
      summary: Set multiple variables in the Value Space.
      tags:
        - Valuespace
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/metadata"
        - name: Bad-Constraints
          in: header
          description: Header with bad constraints
          required: true
          schema:
            type: string
            pattern: '[A-Z]{30,40}'
            minLength: 3
            maxLength: 20
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            examples:
              default:
                $ref: "#/components/examples/pet-ex"
              another:
                value:
                  breed: dog-no-ref
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets-batch:
    post:
      description: Creates a batch of pets in the store.  Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pets'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pet-types:
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MegaPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /containers:
    post:
      description: Create containers
      operationId: createPetContainer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUtilizationReport'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /arns:
    post:
      description: Create containers
      operationId: createPetContainer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Name
              properties:
                Name:
                  description: 'A descriptive name for the analysis that you''re creating. This name displays for the analysis in the Amazon QuickSight console. '
                  type: string
                  minLength: 1
                  maxLength: 2048
                Parameters:
                  description: A list of Amazon QuickSight parameters and the list's override values.
                  type: object
                  properties:
                    StringParameters:
                      allOf:
                        - $ref: '#/components/schemas/StringParameterList'
                        - description: The parameters that have a data type of string.
                SourceEntity:
                  description: The source entity of an analysis.
                  type: object
                  properties:
                    SourceTemplate:
                      allOf:
                        - $ref: '#/components/schemas/AnalysisSourceTemplate'
                        - description: The source template for the source entity of the analysis.

      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /pet-types-rec:
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MegaPet'
            example:
              breed: dog-simple-example
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  responses:
    BadRequest:
      description: Request rejected due to a structural or business validation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  examples:
    pet-ex:
      value:
        id: 1
        breed: dog-example
  parameters:
    metadata:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Color"
      description: Metadata to attach to the file
      in: header
      name: x-metadata
      required: true
  schemas:
    ResourceUtilizationReport:
      description: Worker metrics exported from workers. This contains resource utilization metrics accumulated from a variety of sources. For more information, see go/df-resource-signals.
      properties:
        containers:
          additionalProperties:
            $ref: "#/components/schemas/ResourceUtilizationReport"
          description: "Per container information. Key: container name."
          type: object
      type: object
    StringParameterList:
      type: array
      items:
        $ref: '#/components/schemas/StringParameter'
      maxItems: 100
    StringParameter:
      type: object
      required:
        - Name
        - Values
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/NonEmptyString'
            - description: A display name for a string parameter.
    NonEmptyString:
      type: string
      pattern: .*\S.*
    Arn:
      type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    AnalysisSourceTemplate:
      type: object
      required:
        - DataSetReferences
        - Arn
      properties:
        Arn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - description: The Amazon Resource Name (ARN) of the source template of an analysis.
      description: The source template of an analysis.
    ColoredPet:
      properties:
        name:
          type: string
        colors:
          type: array
          items:
            $ref: '#/components/schemas/Colors'
    Pet:
      allOf:
        - $ref: '#/components/schemas/NewPet'
        - required:
            - id
            - breedType
          properties:
            birthDate:
              type: string
              format: date-time
            id:
              type: string
              format: time
            colors:
              type: array
              items: { }
            breed:
              description: Sensitive data that will be kept encrypted in the vault, associated with the Token
              oneOf:
                - $ref: '#/components/schemas/Husky'
                - $ref: '#/components/schemas/Labrador'
              discriminator:
                propertyName: breedType
    MegaPet:
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        code:
          type: string
          format: byte
          example: MjIyMjIyMg==
        additionalCode:
          type: string
          format: binary
          example: MjIyMjIyMg==
        petType:
          $ref: '#/components/schemas/PetType'
        dateOfBirth:
          type: string
          format: date
          example: "2000-12-12"
        timeOfVaccination:
          type: string
          format: date-time
          example: 2012-01-24T15:54:14.876Z
        age:
          type: string
          pattern: "[0-9]+"
        owner:
          type: object
        previousOwner:
          type: object
          example: "prev owner"
        metadata:
          type: object
          maxProperties: 10
          additionalProperties:
            type: string
            maxLength: 256
        creator:
          title: ''
          description: ''
          type: object
          properties:
            id:
              description: ''
              type: string
              example: 63d415e0dd0d828c3a878548
              readOnly: true
            email:
              description: ''
              type: string
              example: fett@intergalactic.com
              readOnly: true
            displayName:
              description: ''
              type: string
              example: Boba Fett
              readOnly: true

    AdditionalPet:
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
          format: byte
        metadata:
          additionalProperties:
            $ref: '#/components/schemas/Color'
    ObjectPet:
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
          format: byte
        metadata:
          additionalProperties:
            type: object
            properties:
              cast:
                type: string
              rast:
                type: integer
    CyclicPet:
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
          format: byte
        parent:
          $ref: '#/components/schemas/CyclicPet'
    MiniPet:
      properties:
        id:
          type: integer
        color:
          type: object
          allOf:
            - "$ref": "#/components/schemas/Color"
    Colors:
      type: string
      description: possible colors
      enum: ['RED', 'GREEN', 'BLUE', 'YELLOW', 'BLACK', 'WHITE']
    Color:
      properties:
        red:
          type: string
        green:
          type: string
        blue:
          type: string
    PetType:
      type: object
      oneOf:
        - $ref: '#/components/schemas/Husky'
        - $ref: '#/components/schemas/Labrador'
      discriminator:
        propertyName: breedType
        mapping:
          "Husky": '#/components/schemas/Husky'
          "Labrador": '#/components/schemas/Labrador'
    Husky:
      required:
        - breedType
      properties:
        breedType:
          type: string
          enum:
            - Husky
            - Labrador
    Labrador:
      required:
        - breedType
      properties:
        breedType:
          type: string
          enum:
            - Husky
            - Labrador
    NewPet:
      required:
        - name
      properties:
        name:
          type: string
          minLength: 0
          maxLength: 10
        tag:
          type: string
        ip:
          type: string
        ipv6:
          type: string
          format: ipv6
        email:
          type: string
        emailAddress:
          type: string
          format: email
        petUrl:
          type: string
          format: url
        petUri:
          type: string
          format: uri
        url:
          type: string
        uri:
          type: string
        isAlive:
          type: boolean
        size:
          type: number
        length:
          type: number
          format: float
        age:
          type: integer
          minimum: 0
          maximum: 100
        birth:
          type: string
          format: date-time
        identifier:
          type: string
          format: uuid
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

