openapi: 3.0.1
info:
  title: Token.io's Open Banking API for TPPs
  description: >-
    <b>Token.io's Open Banking API</b><br/><br/>Token.io Support: <a
    href="https://support.token.io"
    target="_blank">support.token.io</a><br/><br/>The Token.io Open Banking API
    enables you to connect securely with banks for a range of
    services.<br/><br/> Using our API you can: <ul><li>provide authorized access
    to an authenticated user's account information</li><li>get information on
    specific banks</li><li>initiate authorization with a user-selected
    bank</li><li>initate and track single immediate payments and future dated
    payments</li><li>use variable recurring payments (VRP) to grant long-held
    consents to Payment Initiation Service Providers (PISPs) to initiate series
    of payments from users' bank accounts</li><li>carry out settlements,
    payments and refunds using our virtual accounts</li></ul><br/>For more
    information see our <a
    href="https://developer.token.io/token_rest_api_doc/content/e-rest/dashboard-intro.htm"
    target="_blank">developer documentation</a>.
  version: v1.2.3.2
  x-konfig-ignore:
    object-with-no-properties: true
    potential-incorrect-type: true
servers:
  - url: https://api.token.io
tags:
  - description: >-
      These endpoints provide authorized access to an authenticated user's
      virtual account information, managing settlement rules for virtual
      accounts and retrieving a list of payouts generated by settlement rules
      for virtual accounts.
    name: Virtual Accounts - BETA
  - description: These endpoints enable you to initiate Variable Recurring Payments (VRP).
    name: Variable Recurring Payments
  - description: >-
      These endpoints provide authorized access to an authenticated user's
      account information.
    name: Accounts
  - description: >-
      These endpoints allow you to handle registration, posting, and retrieval
      of refunds associated with original transaction account information.
    name: Refunds - BETA
  - description: >-
      These endpoints are for resellers using Token.io's licence to create,
      retrieve and delete sub-TPPs.
    name: Sub-TPPs
  - description: >-
      These endpoints enable you to make single immediate payments and future
      dated payments using the redirect flow, embedded flow and decoupled flow.
    name: Single Immediate Payments v2
  - description: >-
      These endpoints allow you to submit new payment initiation requests and
      retrieve information about existing payments.
    name: Single Immediate Payments v1
  - description: These endpoints allow you to make payouts.
    name: Payouts - BETA
  - description: >-
      These endpoints retrieve all tokens, a filtered list of tokens, or a
      specific token, as well as allowing you to cancel an existing token.
    name: Tokens
  - description: >-
      These endpoints configure, retrieve and remove webhooks. See <a
      href="https://developer.token.io/token_rest_api_doc/content/e-rest/api-basics.htm#Webhook"
      target="_blank">Webhooks</a> for more details.
    name: Webhooks
  - description: >-
      These endpoints allow you to initiate a v1 payment request or an AIS
      request, and retrieve the status of the request.
    name: Requests
  - description: >-
      These endpoints filter and fetch the list of Token.io-connected banks, get
      information on specific banks, and initiate authorization with
      user-selected banks.
    name: Banks v1
  - description: >-
      These endpoints retrieve the current AIS and PIS status of
      Token.io-connected banks.
    name: Reports
  - description: >-
      This endpoint filters and fetches the list of Token.io-connected banks,
      gets information on specific banks, and initiates authorization with
      user-selected banks.
    name: Banks v2
  - description: >-
      This end point should be used when the TPP receives a callback directly
      from the bank after authorization is completed. This endpoint is for both
      v1 and v2 requests.
    name: TSP
paths:
  /accounts:
    get:
      tags:
        - Accounts
      summary: Get information for all accounts
      operationId: Accounts_getAllAccounts
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /accounts` endpoint retrieves information for all bank
        accounts.
      parameters:
        - description: >-
            The user's IP address if the user is currently logged in with the
            TPP. If the customer  IP address is supplied (recommended), it is
            inferred that the user is present during the session (<i>i.e.</i>,
            the request is user-initiated; adding a `customer-initiated` =
            `true` header makes this explicit). For AIS calls, if the customer's
            IP address is not provided in the request, the bank assumes it is a
            TPP-initiated request and may limit the TPP to 4 TPP-initiated
            access attempts within a given 24-hour period.
          name: token-customer-ip-address
          in: header
          schema:
            type: string
            format: ipv4
          required: false
          example: 172.16.254.1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountsResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetAllAccountsResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Get account information
      operationId: Accounts_getInfo
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /accounts/{accountId}` endpoint retrieves the information for a
        specific bank account.
      parameters:
        - description: >-
            The system-generated, unique bank account id, which specifies the
            account for which the information is requested.
          name: accountId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
        - description: >-
            The user's IP address if the user is currently logged in with the
            TPP. If the customer  IP address is supplied (recommended), it is
            inferred that the user is present during the session (<i>i.e.</i>,
            the request is user-initiated; adding a `customer-initiated` =
            `true` header makes this explicit). For AIS calls, if the customer's
            IP address is not provided in the request, the bank assumes it is a
            TPP-initiated request and may limit the TPP to 4 TPP-initiated
            access attempts within a given 24-hour period.
          name: token-customer-ip-address
          in: header
          schema:
            type: string
            format: ipv4
          required: false
          example: 172.16.254.1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetInfoResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /account-balance:
    get:
      tags:
        - Accounts
      summary: Get account balances
      operationId: Accounts_getMultipleBalances
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /account-balance` endpoint retrieves the balances for multiple
        bank accounts.
      parameters:
        - description: >-
            The user's IP address if the user is currently logged in with the
            TPP. If the customer  IP address is supplied (recommended), it is
            inferred that the user is present during the session (<i>i.e.</i>,
            the request is user-initiated; adding a `customer-initiated` =
            `true` header makes this explicit). For AIS calls, if the customer's
            IP address is not provided in the request, the bank assumes it is a
            TPP-initiated request and may limit the TPP to 4 TPP-initiated
            access attempts within a given 24-hour period.
          name: token-customer-ip-address
          in: header
          schema:
            type: string
            format: ipv4
          required: false
          example: 172.16.254.1
        - description: >-
            A comma-separated list of account ids for which you wish to retrieve
            account balances.
          name: accountId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
            - a:9TFpwkcQmcsMbdjQcpdjfsEBosDw28503fAAGPEMF2MVF19hfk3nc
            - a:rtmv254gaskGLdkadQvdNesk2Y9ferbvpaom5mvepm0mv2nfGnaix
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBalancesResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetMultipleBalancesResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /accounts/{accountId}/balance:
    get:
      tags:
        - Accounts
      summary: Get an account balance
      operationId: Accounts_getBalance
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /accounts/{accountId}/balance` endpoint retrieves the balance
        for a given bank account.
      parameters:
        - description: >-
            The unique bank account id, which specifies the account for which
            the information is requested.
          name: accountId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - description: >-
            The user's IP address if the user is currently logged in with the
            TPP. If the customer  IP address is supplied (recommended), it is
            inferred that the user is present during the session (<i>i.e.</i>,
            the request is user-initiated; adding a `customer-initiated` =
            `true` header makes this explicit). For AIS calls, if the customer's
            IP address is not provided in the request, the bank assumes it is a
            TPP-initiated request and may limit the TPP to 4 TPP-initiated
            access attempts within a given 24-hour period.
          name: token-customer-ip-address
          in: header
          schema:
            type: string
            format: ipv4
          required: false
          example: 172.16.254.1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBalanceResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetBalanceResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /accounts/{accountId}/standing-orders:
    get:
      tags:
        - Accounts
      summary: Get information for all standing orders
      operationId: Accounts_getStandingOrders
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /accounts/{accountId}/standing-orders` endpoint retrieves
        information for all standing orders in a given account, once consent has
        been given.
      parameters:
        - description: >-
            The unique bank account id, which specifies the account for which
            the information is requested.
          name: accountId
          in: path
          required: true
          schema:
            type: string
        - description: >-
            The offset for the current page. If the offset has been provided in
            the request, this offset will be equal to the provided one. But if
            no offset was provided in the request (<i>i.e.</i> this is the first
            page) and the page is not empty, this field will be populated with a
            non-empty string. This may be helpful for loading the same page
            again, which might not always be possible with an empty offset due
            to a dynamic nature of the data. <br>The offset is not visible to a
            user and should not be parsed and/or understood in any way.
          name: page.offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - description: The maximum number of records to return. This must be less than 200.
          name: page.limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 175
            default: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStandingOrdersResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetStandingOrdersResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /accounts/{accountId}/standing-orders/{standingOrderId}:
    get:
      tags:
        - Accounts
      summary: Get standing order information
      operationId: Accounts_getStandingOrder
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /accounts/{accountId}/standing-orders/{standingOrderId}`
        endpoint retrieves information for a specific standing order in a given
        account, once consent has been given.
      parameters:
        - description: >-
            The system-generated, unique bank account id, which specifies the
            account for which the information is requested.
          name: accountId
          in: path
          required: true
          schema:
            type: string
            example: a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
        - name: standingOrderId
          in: path
          required: true
          schema:
            description: >-
              The unique standing order identifier, which specifies the standing
              order requested.
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStandingOrderResponse'
      deprecated: false
      x-hideTryItPanel: true
  /accounts/{accountId}/transactions:
    get:
      tags:
        - Accounts
      summary: Get account transactions
      operationId: Accounts_getTransactions
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /accounts/{accountId}/transactions` endpoint retrieves
        information for all transactions in a given account.
      parameters:
        - description: >-
            The system-generated unique bank account id, which specifies the
            account for which the information is requested.
          name: accountId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
        - description: >-
            The user's IP address if the user is currently logged in with the
            TPP. If the customer  IP address is supplied (recommended), it is
            inferred that the user is present during the session (<i>i.e.</i>,
            the request is user-initiated; adding a `customer-initiated` =
            `true` header makes this explicit). For AIS calls, if the customer's
            IP address is not provided in the request, the bank assumes it is a
            TPP-initiated request and may limit the TPP to 4 TPP-initiated
            access attempts within a given 24-hour period.
          name: token-customer-ip-address
          in: header
          schema:
            type: string
            format: ipv4
          required: false
          example: 172.16.254.1
        - description: >-
            The offset for the current page. If the offset has been provided in
            the request, this offset will be equal to the provided one. But if
            no offset was provided in the request (<i>i.e.</i> this is the first
            page) and the page is not empty, this field will be populated with a
            non-empty string. This may be helpful for loading the same page
            again, which might not always be possible with an empty offset due
            to a dynamic nature of the data. <br/>The offset is not visible to a
            user and should not be parsed and/or understood in any way.
          name: page.offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - description: The maximum number of records to return. This must be less than 200.
          name: page.limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 175
            default: 1
        - description: >-
            The earliest transaction date requested, in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format.
          name: startDate
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: '2022-06-15'
        - description: >-
            The latest transaction date requested, in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format.
          name: endDate
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: '2022-11-30'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionsResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetTransactionsResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /accounts/{accountId}/transaction/{transactionId}:
    get:
      tags:
        - Accounts
      summary: Get transaction information
      operationId: Accounts_getTransactionDetails
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /accounts/{accountId}/transaction/{transactionId}` endpoint
        retrieves information for a specific transaction in a given account.
      parameters:
        - description: >-
            The unique bank account id, which specifies the account for which
            the information is requested.
          name: accountId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - description: >-
            The unique transaction identifier, which specifies the transaction
            requested.
          name: transactionId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 42909b155d4942299c39017686b5dc36
        - description: >-
            The user's IP address if the user is currently logged in with the
            TPP. If the customer  IP address is supplied (recommended), it is
            inferred that the user is present during the session (<i>i.e.</i>,
            the request is user-initiated; adding a `customer-initiated` =
            `true` header makes this explicit). For AIS calls, if the customer's
            IP address is not provided in the request, the bank assumes it is a
            TPP-initiated request and may limit the TPP to 4 TPP-initiated
            access attempts within a given 24-hour period.
          name: token-customer-ip-address
          in: header
          schema:
            type: string
            format: ipv4
          required: false
          example: 172.16.254.1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetTransactionDetailsResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /accounts/{accountId}/funds-confirmation:
    put:
      tags:
        - Accounts
      summary: Confirm available funds
      operationId: Accounts_confirmFundsAvailability
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `PUT /accounts/{accountId}/funds-confirmation` endpoint confirms
        that sufficient funds are available in the account.
      parameters:
        - description: >-
            The system-generated, unique bank account id, which specifies the
            account for which the information is requested.
          name: accountId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmFundsRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmFundsResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsConfirmFundsAvailabilityResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /banks:
    get:
      tags:
        - Banks v1
      summary: Get banks v1
      operationId: BanksV1_getList
      description: >-
        The `GET /banks` endpoint retrieves a list of Token.io-integrated banks
        matching the parameters specified.
      parameters:
        - description: The index of the page currently being retrieved.
          name: page
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
          example: 1
        - description: The number of records per page.
          name: perPage
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 175
        - description: >-
            The key to sort the result. This can be `name` (<i>i.e.</i>, bank
            name), `provider`, or `country`.
          name: sort
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: country
            default: name
        - description: The Token.io-assigned member id of the TPP.
          name: memberId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
        - description: >-
            Filters for banks with a `bankId` (case-insensitive) matching any of
            the ids listed, up to a maximum of 1000. Only exact (full string)
            matches are returned.
          name: ids
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            example:
              - goldbank
              - opalbank
              - platinumbank
            items:
              type: string
        - description: >-
            Filters for banks with a name or identifiers containing this search
            string.
          name: search
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: hsbc
        - description: >-
            Filters for banks for which the TPP represented by this `tppId` has
            access.
          name: tppId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 4h27g823-g73s-07v3-l49s-prte94bf21v
        - description: >-
            Filters for banks that are accessed through any of the listed
            providers.
          name: providers
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            example: Token.io
            items:
              type: string
        - description: >-
            Filters for banks with a BIC (or BLZ, if German) that matches this
            `bankCode`. The BIC must have a string length of 8 or 11. The BLZ
            must have a string length of 8.
          name: bankCode
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: NBAGDE3E
        - description: >-
            Filters for banks that are located in the countries specified by
            this list of <a href="https://www.iso.org/obp/ui/#search"
            target="_blank">ISO 3166-1 Alpha 2 country codes</a>, in upper case.
          name: countries
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            example:
              - IT
              - DE
              - RO
            items:
              type: string
        - description: Filters for banks that support payment initiation.
          name: bank_features.supports_send_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support receiving payments.
          name: bank_features.supports_receive_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for the banks that support retrieving balances
          name: bank_features.supports_balance.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support future dated scheduled payments.
          name: bank_features.supports_scheduled_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support recurring payments/standing orders.
          name: bank_features.supports_standing_order.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: >-
            Filters for banks that only support immediate redemption of
            transfers.
          name: bank_features.requires_one_step_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for the banks that support confirmation of available funds.
          name: bank_features.supports_funds_confirmation.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for the banks that support request of refund account.
          name: bank_features.supports_return_refund_account.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: >-
            Filters for banks that support retrieving transactions by date
            filter.
          name: bank_features.supports_transactions_date_filter.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support retrieval of account information.
          name: bank_features.supports_account_information.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support single immediate payments.
          name: bank_features.supports_single_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support variable recurring payments.
          name: bank_features.supports_variable_recurring_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: >-
            Filters for banks whose BIC matches any of the listed BICs
            (case-insensitive), up to a maximum of 1000.
          name: bics
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              example: BKENGB2L, BNPAFRPH, NBAGDE3E
        - description: Filters for banks that support any of the listed payment networks.
          name: supportedPaymentNetworks
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: Filters for banks that are part of the bank group specified.
          name: bankGroup
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example:
            - HSBC
            - Coop
        - description: Filters for banks that are part of the bank sub-group specified.
          name: bankSubGroup
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example:
            - CMM Grand
            - Banque Populaire
            - La Banque
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBanksResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanksV1GetListResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: false
  /bank/countries:
    get:
      tags:
        - Banks v1
      summary: Get bank countries
      operationId: BanksV1_getBankCountries
      description: >-
        The `GET /banks/countries` endpoint retrieves the list of countries that
        have Token.io-integrated banks which match the parameters specified.
      parameters:
        - description: >-
            Filters for banks with bank ids that are represented in this list of
            ids (case-insensitive), up to a maximum of 1000.
          name: ids
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - goldbank
            - opalbank
            - platinumbank
        - description: >-
            Filters for banks with names or identifiers that contain this search
            string (case sensitive).
          name: search
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: banca
        - description: Filters for banks to which the TPP with this `tppId` has access.
          name: tppId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 9fk3m361-f12r-04b9-p39f-rio2m3pw9v8s
        - description: >-
            Filters for banks with a BIC (or BLZ, if German) that matches this
            `bankCode`. The BIC must have a string length of 8 or 11. The BLZ
            must have a string length of 8.
          name: bankCode
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: NBAGDE3E
        - description: >-
            Filters for banks that are located in the countries specified by
            this list of <a href="https://www.iso.org/obp/ui/#search"
            target="_blank">ISO 3166-1 Alpha 2 country codes</a>, in upper case.
          name: countries
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              example: GB, RO, AT
        - description: >-
            Filters for banks that are accessed through any of this list of
            providers.
          name: providers
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            example: Token.io
            items:
              type: string
        - description: Filters for banks that support payment initiation.
          name: bank_features.supports_send_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support the receipt of payments.
          name: bank_features.supports_receive_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for the banks that support retrieving account balances.
          name: bank_features.supports_balance.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support future dated scheduled payments.
          name: bank_features.supports_scheduled_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support standing orders/recurring payments.
          name: bank_features.supports_standing_order.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: >-
            Filters for banks that only support immediate redemption of transfer
            tokens.
          name: bank_features.requires_one_step_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support confirmation of available funds.
          name: bank_features.supports_funds_confirmation.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support the request of refund account.
          name: bank_features.supports_return_refund_account.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: >-
            Filters for banks that support retrieving transactions by date
            filter.
          name: bank_features.supports_transactions_date_filter.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: >-
            Filters for banks that support retrieving account information using
            Account Information Services (AIS).
          name: bank_features.supports_account_information.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support single immediate payments.
          name: bank_features.supports_single_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: Filters for banks that support variable recurring payments.
          name: bank_features.supports_variable_recurring_payment.value
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
        - description: The Token.io-assigned member id of the TPP.
          name: memberId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
          example: m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
        - description: Filters for banks that support any of the listed payment networks.
          name: supportedPaymentNetworks
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              example: SEPA
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBanksCountriesResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanksV1GetBankCountriesResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: false
  /member/sub-tpps:
    post:
      tags:
        - Sub-TPPs
      summary: Create a sub-TPP
      operationId: SubTpPs_createSubTpp
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /member/sub-tpps` endpoint creates a new sub-TPP for a
        reseller.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubTppRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSubTppResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a sub-tpp, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubTpPsCreateSubTppResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
    get:
      tags:
        - Sub-TPPs
      summary: Get sub-TPPs
      operationId: SubTpPs_getList
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /member/sub-tpps` endpoint retrieves a list of all sub-TPPs for
        a reseller.
      parameters:
        - description: >-
            The offset for the current page. If the offset has been provided in
            the request, this offset will be equal to the provided one. But if
            no offset was provided in the request (<i>i.e.</i> this is the first
            page) and the page is not empty, this field will be populated with a
            non-empty string. This may be helpful for loading the same page
            again, which might not always be possible with an empty offset due
            to a dynamic nature of the data. <br/>The offset is not visible to a
            user and should not be parsed and/or understood in any way.
          name: page.offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - description: The maximum number of records to return. This must be less than 200.
          name: page.limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 175
            default: 1
        - description: Filters the sub-TPPs by the list of company names submitted.
          name: filter.byCompanyNames
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              example: '["Company A","Company B","Company C"]'
        - description: Filters the sub-TPPs by the list of registration dates submitted.
          name: filter.byRegistrationDates
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              example: '["22-03-21","19-05-21","27-07-21"]'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveSubTppsResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a sub-tpp, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubTpPsGetListResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /member/sub-tpps/{subTppId}:
    get:
      tags:
        - Sub-TPPs
      summary: Get sub-TPP information
      operationId: SubTpPs_getSubTppInfo
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /member/sub-tpps/{subTppId}` endpoint retrieves the details of
        the specified sub-TPP for a reseller.
      parameters:
        - description: This id specifies the sub-TPP to be retrieved.
          name: subTppId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveSubTppResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a sub-tpp, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubTpPsGetSubTppInfoResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
    delete:
      tags:
        - Sub-TPPs
      summary: Delete a sub-TPP
      operationId: SubTpPs_deleteSubTpp
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `DELETE /member/sub-tpps/{subTppId}` endpoint deletes an existing
        sub-TPP for a reseller.
      parameters:
        - description: Specifies the sub-TPP to delete.
          name: subTppId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubTppResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a sub-tpp, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubTpPsDeleteSubTppResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /member/sub-tpps/{subTppId}/children:
    get:
      tags:
        - Sub-TPPs
      summary: Get sub-TPP children
      operationId: SubTpPs_getChildren
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /member/sub-tpps/{subTppId}/children` endpoint retrieves the
        sub-TPP children for given sub-TPP.
      parameters:
        - description: Specifies the sub-TPP for which the children are to be retrieved.
          name: subTppId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveSubTppChildrenResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a sub-tpp, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubTpPsGetChildrenResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /reports/banks/status:
    get:
      tags:
        - Reports
      summary: Get bank statuses
      operationId: Reports_getBankStatus
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /reports/banks/status` endpoint returns the current AIS and PIS
        service status along with server status for all banks.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBanksStatusResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportsGetBankStatusResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /reports/banks/{bankId}/status:
    get:
      tags:
        - Reports
      summary: Get a bank status
      operationId: Reports_bankStatus
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /reports/banks/{bankId}/status` endpoint returns the current
        AIS and PIS service status for a specific bank.
      parameters:
        - description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          name: bankId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: goldbank
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBankStatusResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportsBankStatusResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /token-requests:
    post:
      tags:
        - Requests
      summary: Initiate a token request
      operationId: Requests_initiateTokenRequest
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /token-requests` endpoint persists the required information
        used by AIS requests and PIS requests using the API and the Token.io
        Hosted Pages.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreTokenRequestRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreTokenRequestResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestsInitiateTokenRequestResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /token-requests/{tokenRequestId}/result:
    get:
      tags:
        - Requests
      summary: Get a token request
      operationId: Requests_checkTokenResult
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /token-requests/{tokenRequestId}/result` endpoint checks
        whether a token request result is available. This endpoint will return a
        `PENDING` status while the result is not available. The status will
        become `PROCESSED` once the result is available. If the request is
        rejected by the bank, the status will become `REJECTED`. The status will
        become `EXPIRED` if the request is not processed or rejected before the
        token request expiration.
      parameters:
        - description: >-
            The token request id received in response to the original token
            request.
          name: tokenRequestId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: rq:ej5ACWNwi1EcqBeuDPc4Z8C4Bgc:5zKtXEAq
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTokenRequestResultWithStatusResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestsCheckTokenResultResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /callback/initiation:
    post:
      tags:
        - TSP
      summary: Initiate a callback
      operationId: Tsp_processBankCallback
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /callback/initiation` endpoint processes a bank authorization
        callback notification. If you're responsible for handling callbacks, the
        bank will callback to your `callbackUrl` provided in the payment
        initiation, after the user finishes authentication at the bank. Send the
        query of the bank's callback url to Token.io via the `POST
        /callback/initiation` endpoint to process the payment.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnBankAuthCallbackRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnBankAuthCallbackResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TspProcessBankCallbackResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /tokens:
    get:
      tags:
        - Tokens
      summary: Get tokens
      operationId: Tokens_getAll
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /tokens` endpoint retrieves a list of all tokens for the
        authenticated member.
      parameters:
        - description: Specifies the type of token returned.
          name: type
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: ACCESS
            default: INVALID
            enum:
              - INVALID
              - ACCESS
              - TRANSFER
        - description: >-
            The offset for the current page. If the offset has been provided in
            the request, this offset will be equal to the provided one. But if
            no offset was provided in the request (<i>i.e.</i> this is the first
            page) and the page is not empty, this field will be populated with a
            non-empty string. This may be helpful for loading the same page
            again, which might not always be possible with an empty offset due
            to a dynamic nature of the data. <br/>The offset is not visible to a
            user and should not be parsed and/or understood in any way.
          name: page.offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - description: The maximum number of records to return. This must be less than 200.
          name: page.limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 175
            default: 1
        - description: Identifies the payer's account.
          name: filter.sourceAccountId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: a:J72REftaRoiaDYRDU7M9FDgf8jeh3eqek9DvKeyBWbuA:3VMczyq7r7b6HwC
        - description: Identifies the payee/beneficiary's account.
          name: filter.destinationAccountId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: a:f34VSeqwfWGTGH23vsa2cDgecew209jdvcd5vdfv4vds:5VSWVRqicm4Csa2
        - description: >-
            The filtered list start timestamp in milliseconds, 1 day (24 hours)
            = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
          name: filter.startTimeMs
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
          example: 67505
        - description: >-
            The filtered list end timestamp in milliseconds, 1 day (24 hours) =
            8640000000, 1 hour = 36000000, and 1 minute = 60000.
          name: filter.endTimeMs
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
          example: 365650
        - description: Filters by `accountHolder` role.
          name: filter.role
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: ISSUER
            default: ANY
            enum:
              - ANY
              - FROM
              - TO
              - ISSUER
        - description: >-
            Filters the list by the sub-TPP identifier generated by Token.io
            once a merchant has been onboarded.
          name: filter.actingAsRefId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 4kwl35c9sp3fwp4xq
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTokensResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensGetAllResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /tokens/{tokenId}:
    get:
      tags:
        - Tokens
      summary: Get a token
      operationId: Tokens_getInfo
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /tokens/{tokenId}` endpoint retrieves information about a
        specific token for the authenticated member.
      parameters:
        - description: >-
            Identifies a unique authorization token for a transfer, standing
            order, or account information access.
          name: tokenId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTokenResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensGetInfoResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /tokens/{tokenId}/cancel:
    put:
      tags:
        - Tokens
      summary: Cancel a token
      operationId: Tokens_cancelToken
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `PUT /tokens/{tokenId}/cancel` endpoint cancels a given token.
      parameters:
        - description: >-
            The user's IP address if the user is currently logged in with the
            TPP. If the customer  IP address is supplied (recommended), it is
            inferred that the user is present during the session (<i>i.e.</i>,
            the request is user-initiated; adding a `customer-initiated` =
            `true` header makes this explicit). For AIS calls, if the customer's
            IP address is not provided in the request, the bank assumes it is a
            TPP-initiated request and may limit the TPP to 4 TPP-initiated
            access attempts within a given 24-hour period.
          name: token-customer-ip-address
          in: header
          schema:
            type: string
            format: ipv4
          required: false
          example: 172.16.254.1
        - description: >-
            Identifies a unique authorization token for a transfer, standing
            order, or account information access.
          name: tokenId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: ta:3eYPU1BEKKunfmYgQuSKXFCeo851C5Y3XiZW3XA465TU:5zKtXEAq
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelTokenResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensCancelTokenResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /transfers:
    post:
      tags:
        - Single Immediate Payments v1
      summary: Redeem a transfer token
      operationId: SingleImmediatePaymentsV1_createTransferRequest
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /transfers` endpoint creates a request to move money between
        accounts. This is only required for banks that support 2-step payments.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransferResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SingleImmediatePaymentsV1CreateTransferRequestResponse
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
    get:
      tags:
        - Single Immediate Payments v1
      summary: Get transfers
      operationId: SingleImmediatePaymentsV1_getTransfers
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `GET /transfers` endpoint retrieves information for all transfers.
      parameters:
        - description: Identifies the authorization token for the request.
          name: tokenId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: rq:ej5ACWNwi1EcqBeuDPc4Z8C4Bgc:5zKtXEAq
        - description: >-
            The offset for the current page. If the offset has been provided in
            the request, this offset will be equal to the provided one. But if
            no offset was provided in the request (<i>i.e.</i> this is the first
            page) and the page is not empty, this field will be populated with a
            non-empty string. This may be helpful for loading the same page
            again, which might not always be possible with an empty offset due
            to a dynamic nature of the data. <br/>The offset is not visible to a
            user and should not be parsed and/or understood in any way.
          name: page.offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - description: The maximum number of records to return. This must be less than 200.
          name: page.limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 175
            default: 1
        - description: Filters by the token id.
          name: filter.tokenId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: tt:3kFGtpEKHu8S2fJuEkb6YPnHZ4bJ2oUrYPCsJop68vCH:5zKcENpV
        - description: >-
            Filtered list start time boundary in milliseconds, 1 day (24 hours)
            = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
          name: filter.startTimeMs
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
          example: 72799
        - description: >-
            Filtered list end time boundary in milliseconds, 1 day (24 hours) =
            8640000000, 1 hour = 36000000, and 1 minute = 60000.
          name: filter.endTimeMs
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
          example: 3341983424
        - description: >-
            Filters by transaction status. <ul> <li><b>PROCESSING</b> – This
            status indicates that the transaction is in process and that the
            final status has not been received from the
            bank.</li><li><b>SUCCESS</b> – This status indicates that successful
            payment initiation has been received from the bank. Settlement might
            not be complete.</li> <li><b>INITIATED</b> – This status is set when
            the status has remained as PROCESSING for 30 days and cannot be
            updated. The transaction has been initiated but the result is
            unknown. This is the final status and will not be updated
            later.</li> <li><b>PENDING</b> – This status indicates that the user
            has successfully completed the authorization process at the bank and
            the transfer is pending redemption. This status is only relevant for
            2-step payment flows.</li><li><b>PENDING_EXTERNAL_AUTHORIZATION</b>
            – This status indicates that the user has been sent to the bank to
            complete the authorization process. If not completed within the
            allowed timeframe (usually around 15 mins, but there are variations
            between banks) the transaction will expire and transition to
            `FAILURE_EXPIRED`. This status is only relevant for 1-step payment
            flows.</li> <li><b>FAILURE_GENERIC</b> – This status usually
            indicates a technical failure. Possibly, a failure callback was
            received from the bank, with no transaction status and no further
            information.</li> <li><b>FAILURE_PERMISSION_DENIED</b> – This status
            indicates that the user has been denied authorization at the bank
            This status is only relevant for 2-step payment flows.</li>
            <li><b>FAILURE_CANCELED</b> – This status indicates that the payment
            initiation has been canceled before execution.</li>
            <li><b>FAILURE_EXPIRED</b> – This status indicates that the user did
            not complete the authorization process within the allowed timeframe
            (usually around 15 mins, but there are variations between banks) and
            the payment has expired.</li> <li><b>FAILURE_INSUFFICIENT_FUNDS</b>
            – This status indicates that the payment initiation request has been
            rejected due to insufficient funds.</li> <li><b>FAILURE_DECLINED</b>
            – This status indicates that the payment initiation has been
            rejected by the bank.</li> <li><b>SETTLEMENT_IN_PROGRESS</b> – This
            status is provided when a Token.io virtual account is used as the
            beneficiary for the payment, and replaces the payment initiation
            status. Token.io is waiting for the payment to reach the payee bank.
            No action is required; await the next step, <i>e.g.</i>, Token.io
            sends a webhook with the status update, or a polling call. The
            status will change to `SETTLEMENT_IN_PROGRESS` soon after Token.io
            receives the final status from the debtor bank.</li>
            <li><b>SETTLEMENT_COMPLETED</b> – This status is provided when a
            Token.io virtual account is used as the beneficiary for the payment,
            and replaces the payment initiation status. The payment has reached
            the payee bank and Token.io has matched the transaction in the TPP’s
            settlement account to the initiated payment. For instant payments,
            `SETTLEMENT_COMPLETED` will be achieved within 30-45 minutes from
            payment initiation, at the latest. For non-instant payments, the
            time to reach `SETTLEMENT_COMPLETED` will depend on the clearing
            period for the payment.</li><li><b>SETTLEMENT_INCOMPLETE</b> – This
            status is provided when a Token.io virtual account is used as the
            beneficiary for the payment, and replaces the payment initiation
            status. Reconciliation has failed. This happens when Token.io
            doesn't find the corresponding transaction in the TPP’s settlement
            account automatically.</li></ul><br/>During settlement of a virtual
            accounts payment, the status update job will run first for up to 30
            days. Payment will then enter into a 'final' status, normally
            `SUCCESS`.<br/>Once the status update job has run, the
            reconciliation job looks for matching inbound payments.<br/><br/>For
            SEPA payments:<ul><li>if a matching inbound payment is found within
            15 days of the final payment status update ->
            `SETTLEMENT_COMPLETED`</li><li>if no matching inbound payment is
            found within 15 days of the final payment status update ->
            `SETTLEMENT_INCOMPLETE`</li></ul>For SEPA Instant
            payments:<ul><li>if a matching inbound payment is found within 1 day
            of the final payment status update ->
            `SETTLEMENT_COMPLETED`</li><li>if no matching inbound payment is
            found within 1 day of the final payment status update ->
            `SETTLEMENT_INCOMPLETE`</li></ul>
          name: filter.transactionStatus
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: SUCCESS
            enum:
              - PROCESSING
              - SUCCESS
              - INITIATED
              - PENDING
              - PENDING_EXTERNAL_AUTHORIZATION
              - FAILURE GENERIC
              - FAILURE_PERMISSION_DENIED
              - FAILURE_CANCELED
              - FAILURE_EXPIRED
              - FAILURE_INSUFFICIENT_FUNDS
              - FAILURE_DECLINED
              - SETTLEMENT_IN_PROGRESS
              - SETTLEMENT_COMPLETED
              - SETTLEMENT_INCOMPLETE
        - description: Filters list by the account holder role.
          name: filter.role
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: PAYER
            enum:
              - ANY
              - PAYER
              - PAYEE
        - description: >-
            Filters the list by the sub-TPP identifier generated by Token.io
            once a merchant has been onboarded.
          name: filter.actingAsRefId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 4kwl35c9sp3fwp4xq
        - description: Filters list by `refID`.
          name: filter.refId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 9htio4a1sp2akdr1aa
        - description: Filters list by refund status.
          name: filter.transferRefundStatus
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: PARTIAL
            enum:
              - UNSET
              - NONE
              - PARTIAL
              - FULL
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransfersResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SingleImmediatePaymentsV1GetTransfersResponse
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /token-requests/{tokenRequestId}/authorization:
    post:
      tags:
        - Single Immediate Payments v1
      summary: Initiate bank authorization
      operationId: SingleImmediatePaymentsV1_initiateBankAuthorization
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /token-requests/{tokenRequestId}/authorization` endpoint
        initiates the bank authorization process with a given bank id and token
        request id.
      parameters:
        - description: >-
            The token request id received in response to the original token
            request.
          name: tokenRequestId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: rq:ej5ACWNwi1EcqBeuDPc4Z8C4Bgc:5zKtXEAq
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateBankAuthorizationRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiateBankAuthorizationResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SingleImmediatePaymentsV1InitiateBankAuthorizationResponse
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /transfers/{transferId}:
    get:
      tags:
        - Single Immediate Payments v1
      summary: Get a transfer
      operationId: SingleImmediatePaymentsV1_getTransferDetails
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /transfers/{transferId}` endpoint retrieves information about a
        specific transfer in a given account.
      parameters:
        - description: >-
            The unique id of the transfer sent in the `POST /transfers` response
            and/or included in a respective `GET /transfers` response.
          name: transferId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - description: >-
            If `skipTransferUpdate` is false, the request will call the bank for
            a status update. If set to true, the cached result will be returned
            instead.
          name: skipTransferUpdate
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: false
            default: false
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransferResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SingleImmediatePaymentsV1GetTransferDetailsResponse
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /webhook/config:
    get:
      tags:
        - Webhooks
      summary: Get webhook config
      operationId: Webhooks_getConfig
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `GET /webhook/config` endpoint retrieves the webhook configuration.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWebhookConfigResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksGetConfigResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
    put:
      tags:
        - Webhooks
      summary: Set webhook config
      operationId: Webhooks_setConfig
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `PUT /webhook/config` endpoint sets the webhook configuration.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetWebhookConfigRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetWebhookConfigResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksSetConfigResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
    delete:
      tags:
        - Webhooks
      summary: Delete webhook config
      operationId: Webhooks_deleteConfig
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `GET /webhook/config` endpoint deletes the webhook configuration.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWebhookConfigResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksDeleteConfigResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /vrp-consents:
    post:
      tags:
        - Variable Recurring Payments
      summary: Create a VRP consent
      operationId: VariableRecurringPayments_createConsent
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `POST /vrp-consents` endpoint creates a new VRP consent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vrpconsents_body'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VrpConsentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_2'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/VariableRecurringPaymentsCreateConsentResponse
      deprecated: false
      x-hideTryItPanel: true
    get:
      tags:
        - Variable Recurring Payments
      summary: Get VRP consents
      operationId: VariableRecurringPayments_getConsents
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /vrp-consents` endpoint retrieves all VRP consents created by
        the calling member.
      parameters:
        - description: The maximum number of records to return.
          name: limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            maximum: 200
            minimum: 1
            type: integer
            format: int32
          example: 10
        - description: The offset from the previous page.
          name: offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VrpConsentsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/VariableRecurringPaymentsGetConsentsResponse
      deprecated: false
      x-hideTryItPanel: true
  /vrp-consents/{id}:
    get:
      tags:
        - Variable Recurring Payments
      summary: Get a VRP consent
      operationId: VariableRecurringPayments_getConsentDetails
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /vrp-consents/{id}` endpoint retrieves the details for an
        individual VRP consent.
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            description: VRP consent id
            type: string
            example: vc:12345abcd:abcde
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VrpConsentResponse'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '404':
          description: VRP consent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/VariableRecurringPaymentsGetConsentDetailsResponse
      deprecated: false
      x-hideTryItPanel: true
    delete:
      tags:
        - Variable Recurring Payments
      summary: Revoke a VRP consent
      operationId: VariableRecurringPayments_revokeConsent
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `DELETE /vrp-consents/{id}` endpoint revokes an individual VRP
        consent.
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            description: VRP consent id
            type: string
            example: vc:12345abcd:abcde
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VrpConsentResponse'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '404':
          description: VRP consent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/VariableRecurringPaymentsRevokeConsentResponse
      deprecated: false
      x-hideTryItPanel: true
  /vrp-consents/{id}/payments:
    get:
      tags:
        - Variable Recurring Payments
      summary: Get payments under a VRP consent
      operationId: VariableRecurringPayments_getPaymentsUnderConsent
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /vrp-consents/{id}/payments` endpoint retrieves the payments
        under a given VRP consent.
      parameters:
        - description: VRP consent id
          name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: vc:12345abcd:abcde
        - description: The maximum number of records to return.
          name: limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            maximum: 200
            minimum: 1
            type: integer
            format: int32
          example: 10
        - description: The offset from the previous page.
          name: offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VrpsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/VariableRecurringPaymentsGetPaymentsUnderConsentResponse
      deprecated: false
      x-hideTryItPanel: true
  /vrps:
    post:
      tags:
        - Variable Recurring Payments
      summary: Initiate a VRP payment
      operationId: VariableRecurringPayments_initiatePayment
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `POST /vrps` initiates a new VRP payment.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vrps_body'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VrpResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_3'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: VRP consent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/VariableRecurringPaymentsInitiatePaymentResponse
      deprecated: false
      x-hideTryItPanel: true
    get:
      tags:
        - Variable Recurring Payments
      summary: Get VRP payments
      operationId: VariableRecurringPayments_listPayments
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /vrps` endpoint provides you with a list of vrp payments and
        their details.
      parameters:
        - description: The maximum number of records to return.
          name: limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            maximum: 200
            minimum: 1
            type: integer
            format: int32
          example: 10
        - description: The offset from the previous page.
          name: offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - description: >-
            Filters vrp payments by their ids - returns only payments with ids
            listed in this parameter.
          name: ids
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - vrp:4QExXrhKTxfShBdcTeqFabqJJhUF:2gFUX1NDgpN
            - vrp:N5cJDFsQzVca3Qvr8kQocgEnjgX:2gFUX1NEdYA
        - description: >-
            Invert ids query - returns only vrp payments with ids not listed in
            the ids parameter.
          name: invertIds
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: false
        - description: >-
            Filters vrp payments by their statuses - returns only payments with
            statuses listed in this parameter.
          name: statuses
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VrpStatus'
          example:
            - INITIATION_COMPLETED
            - INITIATION_REJECTED
        - description: >-
            Invert statuses query - returns only vrp payments with statuses not
            listed in the statuses parameter.
          name: invertStatuses
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: true
        - description: >-
            Returns only vrp payments created after this time (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          name: createdAfter
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: '2022-04-05T17:00:00.000Z'
        - description: >-
            Returns only vrp payments created before this time (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          name: createdBefore
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: '2022-04-05T17:00:00.000Z'
        - description: >-
            Filters vrp payments by their `refId` values - returns only payments
            with `refIds` listed in this parameter.
          name: refIds
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - ShBdcTeqFabqJJhUF
            - N5cJDFsQzVca3Q
        - description: >-
            Filters vrp payments by their `VRP consent id` value - returns only
            payments with `vrpConsentId` listed in this parameter.
          name: vrpConsentId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: vc:12345abcd:abcde
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VrpsResponse'
        '400':
          description: The client specified an invalid argument.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/VariableRecurringPaymentsListPaymentsResponse
      deprecated: false
      x-hideTryItPanel: true
  /vrps/{id}:
    get:
      tags:
        - Variable Recurring Payments
      summary: Get a VRP payment
      operationId: VariableRecurringPayments_getPaymentDetails
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /vrps/{id}` endpoint retrieves the details for an individual
        VRP payment.
      parameters:
        - description: VRP id
          name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: vrp:12345abcd:abcde
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VrpResponse'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_2'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/VariableRecurringPaymentsGetPaymentDetailsResponse
      deprecated: false
      x-hideTryItPanel: true
  /vrps/{id}/confirm-funds:
    get:
      tags:
        - Variable Recurring Payments
      summary: Verify if funds are available or not
      operationId: VariableRecurringPayments_checkFundsAvailability
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /vrps/{id}/confirm-funds` endpoint confirms whether the funds
        are available to initiate VRP.
      parameters:
        - description: The VRP consent id.
          name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: vc:12345abcd:abcde
        - description: The amount to confirm availability for.
          name: amount
          in: query
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmFundsResponse'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_2'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/VariableRecurringPaymentsCheckFundsAvailabilityResponse
      deprecated: false
      x-hideTryItPanel: true
  /refunds:
    post:
      tags:
        - Refunds - BETA
      summary: Initiate a refund
      operationId: RefundsBeta_initiateRefund
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /refunds` endpoint initiates a refund. After the refund is
        settled, the refund status of the original transfer will be updated.
        <br/> The debtor field can be optional if you're using the debtor in
        registration. The creditor field can be optional if the information is
        available in the original payment.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refunds_body'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundsBetaInitiateRefundResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
    get:
      tags:
        - Refunds - BETA
      summary: Get refunds
      operationId: RefundsBeta_getList
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /refunds` endpoint retrieves a complete or filtered list of
        refunds.
      parameters:
        - description: The maximum number of records to return.
          name: limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            maximum: 200
            minimum: 1
            type: integer
            format: int32
          example: 10
        - description: The offset from the previous page.
          name: offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - description: >-
            Lower bound for a refund creation date in the format 'YYYY-MM-DD'
            (UTC time zone). If specified, only refunds created at or after the
            given date will be returned.
          name: startDate
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: '2010-01-01'
        - description: >-
            Upper bound for a refund creation date in the format 'YYYY-MM-DD'
            (UTC time zone). If specified, only refunds created at or before the
            given date will be returned.
          name: endDate
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: '2010-01-01'
        - description: >-
            Filters refunds by their ids - returns only refunds with ids listed
            in this parameter.
          name: ids
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - rf:4QExXrhKTxfShBdcTeqFabqJJhUF:2gFUX1NDgpN
            - rf:N5cJDFsQzVca3Qvr8kQocgEnjgX:2gFUX1NEdYA
        - description: >-
            Invert ids query - returns only refunds with ids not listed in the
            ids parameter.
          name: invertIds
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: false
        - description: >-
            Filters refunds by their statuses - returns only refunds with
            statuses listed in this parameter.
          name: statuses
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RefundStatus'
          example:
            - INITIATION_COMPLETED
            - INITIATION_REJECTED
        - description: >-
            Invert statuses query - returns only refunds with statuses not
            listed in the statuses parameter.
          name: invertStatuses
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: true
        - description: >-
            Filters refunds by their `refId` values - returns only refunds with
            `refIds` listed in this parameter.
          name: refIds
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - ShBdcTeqFabqJJhUF
            - N5cJDFsQzVca3Q
        - description: >-
            Returns refunds in a partial format - with only id and status fields
            populated.
          name: partial
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: true
        - description: The result can be filtered on the basis of multiple OnBehalfOfIds.
          name: onBehalfOfIds
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - c5a863bc-86f2-4418-a26f-25b24c7983c7
            - 6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundsResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundsBetaGetListResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /refunds/{id}:
    get:
      tags:
        - Refunds - BETA
      summary: Get a refund
      operationId: RefundsBeta_getRefund
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `GET /refunds/{id}` endpoint retrieves a given refund.
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            description: The refund id.
            type: string
            example: your refund id
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundsBetaGetRefundResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
  /transfers/{id}/refunds:
    get:
      tags:
        - Refunds - BETA
      summary: Get all refunds by transfer
      operationId: RefundsBeta_getAllRefunds
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /transfers/{id}/refunds` endpoint retrieves all refunds
        associated with a given transfer.
      parameters:
        - description: The maximum number of records to return.
          name: limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            maximum: 200
            minimum: 1
            type: integer
            format: int32
          example: 10
        - description: The offset from the previous page.
          name: offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            description: The transfer id.
            type: string
            example: your transfer id
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundsResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundsBetaGetAllRefundsResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /payouts:
    post:
      tags:
        - Payouts - BETA
      summary: Initiate a payout
      operationId: PayoutsBeta_initializePayout
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `POST /payouts` endpoint initiates a payout.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payouts_body'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsBetaInitializePayoutResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
    get:
      tags:
        - Payouts - BETA
      summary: Get payouts
      operationId: PayoutsBeta_getList
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /payouts` endpoint retrieves a complete or filtered list of
        payouts.
      parameters:
        - description: The maximum number of records to return.
          name: limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            maximum: 200
            minimum: 1
            type: integer
            format: int32
          example: 10
        - description: The offset from the previous page.
          name: offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - description: >-
            Lower bound for a payout creation date in the format 'YYYY-MM-DD'
            (UTC time zone). If specified, only payouts created at or after the
            given date will be returned.
          name: startDate
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: '2010-01-01'
        - description: >-
            Upper bound for a payout creation date in the format 'YYYY-MM-DD'
            (UTC time zone). If specified, only payouts created at or before the
            given date will be returned.
          name: endDate
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: '2010-01-01'
        - description: >-
            Filters payouts by their ids - returns only payouts with ids listed
            in this parameter.
          name: ids
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - po:28oivvd3iFhBrcbNj4tmtLEhxRTk:2gFUX1NE1T6
            - po:3ZfdHxbpXmRZ1TVmiYNPgcwEocBy:2gFUX1NDdqr
        - description: >-
            Invert ids query - returns only payouts with ids not listed in the
            ids parameter.
          name: invertIds
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: false
        - description: >-
            Filters payouts by their statuses - returns only payouts with
            statuses listed in this parameter.
          name: statuses
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PayoutStatus'
          example:
            - INITIATION_COMPLETED
            - INITIATION_REJECTED
        - description: >-
            Invert statuses query - returns only payouts with statuses not
            listed in the statuses parameter.
          name: invertStatuses
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: true
        - description: >-
            Filters payouts by their `refId` values - returns only payouts with
            `refIds` listed in this parameter.
          name: refIds
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - ShBdcTeqFabqJJhUF
            - N5cJDFsQzVca3Q
        - description: >-
            Filters payouts by their `onBehalfOfId` value - returns only payouts
            with `onBehalfOfId` listed in this parameter.
          name: onBehalfOfId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: onBahalfOfId001
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsBetaGetListResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /payouts/{id}:
    get:
      tags:
        - Payouts - BETA
      summary: Get a payout
      operationId: PayoutsBeta_getPayout
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `GET /payouts/{id}` endpoint retrieves a given payout.
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            description: The payout id.
            type: string
            example: your payout id
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsBetaGetPayoutResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
  /secrets/upload/key-and-certificate:
    post:
      tags:
        - Refunds - BETA
      summary: Upload a private key and certificate
      operationId: RefundsBeta_uploadKeyAndCertificate
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /secrets/upload/key-and-certificate` endpoint uploads a
        private key and certificate.       
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadKeyAndCertificate'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadKeyAndCertificateResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_429'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RefundsBetaUploadKeyAndCertificateResponse
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: true
  /v2/banks:
    get:
      tags:
        - Banks v2
      summary: Get banks v2
      operationId: BanksV2_getList
      description: >-
        The `GET /v2/banks` endpoint retrieves a list of Token.io-integrated
        banks matching the parameters specified.
      parameters:
        - description: The index of the page currently being retrieved.
          name: page
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - description: The number of records per page.
          name: perPage
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 200
            example: 10
        - description: >-
            The key to sort the result. This can be `NAME` (Bank's name),
            `STANDARD` (OpenBankingStandard), `RANK`, or `COUNTRY`.
          name: sort
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - COUNTRY
              - STANDARD
              - RANK
              - NAME
            example: COUNTRY
            default: NAME
        - description: The Token.io-assigned member id of the TPP.
          name: memberId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - description: >-
            Filters for banks for which the TPP represented by this `tppId` has
            access.
          name: tppId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - description: >-
            Filters for banks with a `bankId` (case-insensitive) matching any of
            the ids listed, up to a maximum of 1000. Only exact (full string)
            matches are returned.
          name: ids
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            Filters for banks with a name or identifiers containing this search
            string.
          name: search
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: hsbc
        - description: Filters for banks that are members of the bank group specified.
          name: bankGroup
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example:
            - HSBC
            - Coop
        - description: Filters for banks that are part of the bank sub-group specified.
          name: bankSubGroup
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example:
            - CMM Grand
            - Banque Populaire
            - La Banque
        - description: >-
            Filters for banks with a BIC (or BLZ, if German) that matches this
            `bankCode`. The BIC must have a string length of 8 or 11. The BLZ
            must have a string length of 8.
          name: bankCode
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - description: >-
            Filters for banks that are accessed through any of the listed
            standards.
          name: openBankingStandards
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - UK_Open_Banking_Standard
                - Starling_Bank_API
                - PolishAPI
                - STET_PSD2_API
                - Citi_Handlowy_PSD2_API
                - NextGenPSD2
                - Slovak_Banking_API_Standard
                - Czech_Open_Banking_Standard
                - American_Express_PSD2_API
                - Budapest_Bank_API
                - Token
              example: UK_Open_Banking_Standard
              default: UK_Open_Banking_Standard
        - description: >-
            Filters for banks that are located in the countries specified by
            this list of <a href="https://www.iso.org/obp/ui/#search"
            target="_blank">ISO 3166-1 Alpha 2 country codes</a>, in upper case.
          name: countries
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            Filters for banks whose BIC matches any of the listed BICs
            (case-insensitive), up to a maximum of 1000.
          name: bics
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              example: BKENGB2L
        - description: Filters for banks that support any of the listed payment networks.
          name: supportedLocalInstruments
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - SEPA_INSTANT
            - FASTER_PAYMENTS
            - SEPA
        - description: Filters for banks that support fetching accounts.
          name: supportsAccountList
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for banks that support fetching account details.
          name: supportsAccountDetails
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for banks that support fetching account balances.
          name: supportsAccountBalance
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for banks that support fetching transactions.
          name: supportsTransactionList
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for banks that support fetching transaction details.
          name: supportsTransactionDetails
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for banks that support the fetching standing orders.
          name: supportsStandingOrderList
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: >-
            Filters for banks that support feting transactions using a date
            filter.
          name: supportsTransactionsDateFilter
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: >-
            Filters for banks that only support immediate redemption of
            transfers.
          name: requiresOneStepPayment
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for banks that support single immediate payments.
          name: supportsSinglePayment
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            example: true
        - description: Filters for banks that support future dated scheduled payments.
          name: supportsScheduledPayment
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for banks that support recurring payments/standing orders.
          name: supportsStandingOrder
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for the banks that support request of refund account.
          name: supportsReturnRefundAccount
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: >-
            Filters for banks that support returning the refund account holder
            name.
          name: supportsReturnRefundAccountHolderName
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for the banks that support confirmation of available funds.
          name: supportsFundsConfirmation
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for banks that support variable recurring payments.
          name: supportsVariableRecurringPayment
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
        - description: Filters for banks that are part of the bank sub-group specified.
          name: bankSubGroup
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example:
            - CMM Grand
            - Banque Populaire
            - La Banque
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBanksV2Response'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_2'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanksV2GetListResponse'
        '501':
          description: The operation was not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_501'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
        '504':
          description: Gateway has timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_504'
      deprecated: false
      x-hideTryItPanel: false
  /v2/payments:
    post:
      tags:
        - Single Immediate Payments v2
      summary: Initiate a payment
      operationId: SingleImmediatePaymentsV2_initiatePayment
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /v2/payments` endpoint enables you to initiate a payment with
        a bank.<br/><br/>Once the payment has been initiated, the end user needs
        to authenticate themselves with their bank.<br/><br/><b>Check payment
        status:</b><br/><ol><li>If the status in the initiation response is
        `INITIATION_PENDING_REDIRECT_AUTH`, redirect the user to the redirect
        url found in the authentication payload of the payment, to authenticate
        at the bank.</li><br/><li>If the status in the initiation response is
        `INITIATION_PENDING_EMBEDDED_AUTH`, collect the requested data listed in
        the authentication payload of the payment and use the `POST
        /v2/payments/{paymentId}/embedded-auth` endpoint to provide the
        requested field values.</li><br/><li>If the status in the initiation
        response is `INITIATION_PENDING`, Token.io needs more time to process
        this request with the bank. In the case of a successful scenario, the
        status will be updated to `INITIATION_PENDING_REDIRECT_AUTH`,
        `INITIATION_PENDING_EMBEDDED_AUTH` or
        `INITIATION_PENDING_DECOUPLED_AUTH` when the authentication details are
        ready. The update can be checked by the `GET /v2/payments/{paymentId}`
        endpoint or received via a webhook (see <a
        href="https://developer.token.io/token_rest_api_doc/content/e-rest/api-basics.htm#Webhook"
        target="_blank">Webhooks</a>).</li><br/><li>If the status is
        `INITIATION_PENDING_DECOUPLED_AUTH`, the bank has requested a decoupled
        authentication from the user and Token.io is awaiting the result. No
        further action is required.</li><br/><li>If the status is
        `PENDING_MORE_INFO` and you're not using Token.io's Hosted Payment Page
        (HPP), you need to populate the required information and make the
        payment initiation call again. Information about the missing data can be
        found in the `statusReasonInformation` field. If you're using Token.io's
        Hosted Payment Page, the required data will be collected from the user.
        You'll need to redirect the user to Token.io's Hosted Payment Page url
        constructed with the returned payment
        `id`.</li></ol><br/><b>`request-timeout` header:</b><br/><br/>Banks may
        take some time to respond when an initial request is made for an
        authorisation url. Therefore, Token.io recommends that you set a
        `request-timeout` header in your API-only `POST /v2/payments` requests.
        If this is set, Token.io sends a response when this timeout period has
        passed and will send a follow up response as soon as the bank has
        responded.<br/>The following example demonstrates what happens when you
        set a timeout of 10 seconds and the call to the bank takes 15
        seconds:<br/><br/><ol><li>The TPP makes a `POST /v2/payments`
        call.</li><br/><li>Tolen.io creates a resource with the status
        `INITIATION_PENDING`.</li><br/><li>Token.io starts the call to the
        bank.</li><br/><li>After 10 seconds from (1): Token.io returns the
        payment status `INITIATION_PENDING`.</li><br/><li>After 15 seconds from
        (3): Token.io receives a response from the bank and changes the status
        to, for example, `INITIATION_PENDING_REDIRECT_AUTH`.</li><br/><li>The
        TPP makes the `GET /v2/payments/{id}` call and receives the payment with
        the status `INITIATION_PENDING_REDIRECT_AUTH`.</li></ol>
      parameters:
        - description: >-
            Sets the number of elapsed seconds until the call is aborted with a
            `DEADLINE_EXCEEDED` exception due to no response received.
          name: request-timeout
          in: header
          schema:
            type: integer
          required: false
          example: 10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2_payments_body'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: The client specified an invalid argument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_2'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SingleImmediatePaymentsV2InitiatePaymentResponse
      deprecated: false
      x-hideTryItPanel: true
    get:
      tags:
        - Single Immediate Payments v2
      summary: Get payments
      operationId: SingleImmediatePaymentsV2_listPayments
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /v2/payments` endpoint provides you with a list of payments and
        their details.
      parameters:
        - description: The maximum number of records to return.
          name: limit
          in: query
          required: true
          style: form
          explode: true
          schema:
            maximum: 200
            minimum: 1
            type: integer
            format: int32
          example: 10
        - description: The offset from the previous page.
          name: offset
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: LerV6Jmex
        - description: >-
            Filters payments by their ids - returns only payments with ids
            listed in this parameter.
          name: ids
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - pm2:4QExXrhKTxfShBdcTeqFabqJJhUF:2gFUX1NDgpN
            - pm2:N5cJDFsQzVca3Qvr8kQocgEnjgX:2gFUX1NEdYA
        - description: >-
            Invert ids query - returns only payments with ids not listed in the
            ids parameter.
          name: invertIds
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: false
        - description: >-
            Filters payments by their statuses - returns only payments with
            statuses listed in this parameter.
          name: statuses
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentStatus'
          example:
            - INITIATION_COMPLETED
            - INITIATION_REJECTED
        - description: >-
            Invert statuses query - returns only payments with statuses not
            listed in the statuses parameter.
          name: invertStatuses
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: true
        - description: >-
            Returns only payments created after this time (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          name: createdAfter
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: '2022-04-05T17:00:00.000Z'
        - description: >-
            Returns only payments created before this time (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          name: createdBefore
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: '2022-04-05T17:00:00.000Z'
        - description: >-
            Filters payments by their `refId` values - returns only payments
            with `refIds` listed in this parameter.
          name: refIds
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - ShBdcTeqFabqJJhUF
            - N5cJDFsQzVca3Q
        - description: >-
            Filters payments by the `onBehalfOfId` value - returns only payments
            with `onBehalfOfId` specified in this parameter.
          name: onBehalfOfId
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: c5a863bc-86f2-4418-a26f-25b24c7983c7
        - description: >-
            Filters payments by their refund status values - returns only
            payments with refund statuses listed in this parameter.
          name: refundStatuses
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentRefundStatus'
          example:
            - PARTIAL
            - NONE
        - description: >-
            Returns payments in a partial format - with only id and status
            fields populated.
          name: partial
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
          example: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsResponse'
        '400':
          description: The client specified an invalid argument.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SingleImmediatePaymentsV2ListPaymentsResponse
      deprecated: false
      x-hideTryItPanel: true
  /v2/payments/{paymentId}/embedded-auth:
    post:
      tags:
        - Single Immediate Payments v2
      summary: Provide information for embedded authentication
      operationId: SingleImmediatePaymentsV2_provideEmbeddedAuthInfo
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /v2/payments/{paymentId}/embedded-auth` endpoint provides you
        with the requested information when the payment status is
        `INITIATION_PENDING_EMBEDDED_AUTH`. The requested information can be
        found in the authentication field of the payment. <br/> <br/> It's
        possible that some banks might request the user's input multiple times.
        In this case you might need to call this endpoint again for a new field
        set.
      parameters:
        - name: paymentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paymentIdEmbeddedAuthBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: The client specified an invalid argument.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_4'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '403':
          description: Permission to access this endpoint is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SingleImmediatePaymentsV2ProvideEmbeddedAuthInfoResponse
      deprecated: false
      x-hideTryItPanel: true
  /v2/payments/{paymentId}:
    get:
      tags:
        - Single Immediate Payments v2
      summary: Get a payment
      operationId: SingleImmediatePaymentsV2_getPaymentDetails
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /v2/payments/{paymentId}` endpoint provides you with details of
        an individual payment and checks the payment status for the next step,
        if any.
      parameters:
        - name: paymentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '401':
          description: The authorization information is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        '404':
          description: The requested entity, such as a payment, was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        '500':
          description: An unexpected or internal server error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SingleImmediatePaymentsV2GetPaymentDetailsResponse
      deprecated: false
      x-hideTryItPanel: true
  /virtual-accounts:
    post:
      tags:
        - Virtual Accounts - BETA
      summary: Create a virtual account
      operationId: VirtualAccountsBeta_createAccount
      security:
        - BasicAuth: []
        - Bearer: []
      description: The `POST /virtual-accounts` endpoint creates a virtual account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualAccountRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualAccountResponse'
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '404':
          $ref: '#/components/responses/CustomerNotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
    get:
      tags:
        - Virtual Accounts - BETA
      summary: Get virtual accounts
      operationId: VirtualAccountsBeta_getAll
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /virtual-accounts` endpoint retrieves information for all
        virtual accounts.
      parameters:
        - description: >-
            The maximum number of records to return. <br/>The maximum allowed
            limit is 200. If the passed limit is bigger than this, it will be
            set to 200.
          name: limit
          in: query
          required: false
          schema:
            format: int32
            type: integer
        - description: >-
            The offset for the current page. The offset is not required to fetch
            the first page. To fetch subsequent pages, use the 'nextOffset'
            value from the previous page response. <br/>The offset value should
            not be parsed and/or understood in any way.
          name: offset
          in: query
          required: false
          schema:
            type: string
        - description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          name: currency
          in: query
          required: false
          example: EUR
          schema:
            type: string
        - description: >-
            The <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO
            3166-1 Alpha 2 country codes</a>.
          name: country
          in: query
          required: false
          example: PL
          schema:
            type: string
        - description: The alias name that identifies the virtual account.
          name: nickname
          in: query
          required: false
          example: Account Alias
          schema:
            type: string
        - description: >-
            An id of the ultimate client on whose behalf the account is created.
            If the account is created on behalf of a sub-TPP, this field should
            contain the sub-TPP `referenceId`.
          name: onBehalfOfId
          in: query
          required: false
          example: c5a863bc-86f2-4418-a26f-25b24c7983c7
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualAccountsResponse'
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '404':
          $ref: '#/components/responses/CustomerNotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
  /virtual-accounts/{accountId}:
    get:
      tags:
        - Virtual Accounts - BETA
      summary: Get a virtual account
      operationId: VirtualAccountsBeta_getInfo
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /virtual-accounts/{accountId}` endpoint the information for a
        specific virtual account.
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualAccountByIdResponse'
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '404':
          $ref: '#/components/responses/AccountNotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
  /virtual-accounts/{accountId}/transactions:
    get:
      tags:
        - Virtual Accounts - BETA
      summary: Get virtual account transactions
      operationId: VirtualAccountsBeta_getTransactions
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /virtual-accounts/{accountId}/transactions` endpoint retrieves
        information of transactions in a given virtual account.
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - description: >-
            The maximum number of records to return. <br/>The maximum allowed
            limit is 200. If the passed limit is bigger than this, it will be
            set to 200.
          name: limit
          in: query
          required: false
          schema:
            format: int32
            type: integer
        - description: >-
            The offset for the current page. The offset is not required to fetch
            the first page. To fetch subsequent pages, use the 'nextOffset'
            value from the previous page response. <br/>The offset value should
            not be parsed and/or understood in any way.
          name: offset
          in: query
          required: false
          schema:
            type: string
        - description: >-
            Filters transactions by their `refId` value - returns only
            transactions with `refId` mentioned in the reference.
          name: refId
          in: query
          required: false
          schema:
            type: string
        - description: >-
            Returns transactions created on or after this date, inclusive (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          name: startDate
          in: query
          required: false
          schema:
            type: string
          example: '2022-04-05'
        - description: >-
            Returns transactions created on or before this date, inclusive (in
            <a href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          name: endDate
          in: query
          required: false
          schema:
            type: string
          example: '2022-04-05'
        - description: Filters transactions by their transaction amount.
          name: amount
          in: query
          required: false
          schema:
            type: string
        - description: Filters transactions by the provider-payment-id.
          name: providerPaymentId
          in: query
          required: false
          schema:
            type: string
        - description: >-
            Filters transactions by type to include only CREDIT or DEBIT
            transactions.
          name: transactionType
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransactionType'
          example: CREDIT
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualAccountTransactionsResponse'
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '404':
          $ref: '#/components/responses/AccountNotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
  /virtual-accounts/{accountId}/transactions/{providerPaymentId}:
    get:
      tags:
        - Virtual Accounts - BETA
      summary: Get a virtual account transaction
      operationId: VirtualAccountsBeta_getTransaction
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET
        /virtual-accounts/{accountId}/transactions/{provider-payment-id}`
        endpoint retrieves information for a specific transaction in a given
        virtual account.
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: providerPaymentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualAccountTransactionResponse'
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '404':
          $ref: '#/components/responses/AccountNotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
  /virtual-accounts/{account_id}/settlement-rule:
    post:
      tags:
        - Virtual Accounts - BETA
      summary: Create a settlement rule
      operationId: VirtualAccountsBeta_createSettlementRule
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `POST /virtual-accounts/{account_id}/settlement-rule` endpoint
        creates a settlement rule for virtual account.
      parameters:
        - name: account_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualAccountSettlementRuleRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/CreateVirtualAccountSettlementRuleResponse
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '404':
          $ref: '#/components/responses/AccountNotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
  /virtual-accounts/{account_id}/settlement-rules/{settlement_rule_id}:
    get:
      tags:
        - Virtual Accounts - BETA
      summary: Get a settlement rule
      operationId: VirtualAccountsBeta_getRule
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET
        /virtual-accounts/{account_id}/settlement-rules/{settlement_rule_id}`
        endpoint retrieves information of a settlement rule for virtual account.
      parameters:
        - description: The id of the virtual account.
          name: account_id
          in: path
          required: true
          schema:
            type: string
        - description: The id of the settlement rule.
          name: settlement_rule_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualAccountSettlementRuleResponse'
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '404':
          $ref: '#/components/responses/SettlementRuleNotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
    delete:
      tags:
        - Virtual Accounts - BETA
      summary: Delete a settlement rule
      operationId: VirtualAccountsBeta_deleteSettlementRule
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The ` DELETE
        /virtual-accounts/{account_id}/settlement-rules/{settlement_rule_id}`
        endpoint delete an active settlement rule for virtual account.
      parameters:
        - description: The id of the virtual account.
          name: account_id
          in: path
          required: true
          schema:
            type: string
        - description: The id of the settlement rule.
          name: settlement_rule_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DeleteVirtualAccountSettlementRuleResponse
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '404':
          $ref: '#/components/responses/SettlementRuleNotFoundResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
  /virtual-accounts/{account_id}/settlement-rules:
    get:
      tags:
        - Virtual Accounts - BETA
      summary: Get settlement rules
      operationId: VirtualAccountsBeta_getSettlementRules
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /virtual-accounts/{account_id}/settlement-rules` endpoint
        retrieves information about settlement rules for the virtual account
        according to the given settlement rule status in the request. If no
        status is provided, the endpoint retrieves all settlement rules for the
        virtual account.
      parameters:
        - description: The id of the virtual account.
          name: account_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetVirtualAccountSettlementRulesRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualAccountSettlementRulesResponse'
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
  /virtual-accounts/{account_id}/settlement-rule-payouts:
    get:
      tags:
        - Virtual Accounts - BETA
      summary: Get virtual account settlement payouts
      operationId: VirtualAccountsBeta_getSettlementPayouts
      security:
        - BasicAuth: []
        - Bearer: []
      description: >-
        The `GET /virtual-accounts/{account_id}/settlement-rules/payouts`
        endpoint retrieves information about payouts created by a settlement
        rule.
      parameters:
        - description: The id of the virtual account.
          name: account_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetVirtualAccountSettlementPayoutsRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GetVirtualAccountSettlementPayoutsResponse
        '400':
          $ref: '#/components/responses/InvalidArgumentRequest'
        '401':
          $ref: '#/components/responses/UnauthenticatedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
        '500':
          $ref: '#/components/responses/UnexpectedErrorResponse'
        '501':
          $ref: '#/components/responses/NotImplementedResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableResponse'
        '504':
          $ref: '#/components/responses/GatewayTimeoutResponse'
      deprecated: false
      x-hideTryItPanel: true
components:
  parameters:
    Paging-Limit:
      description: The maximum number of records to return.
      name: limit
      in: query
      required: true
      style: form
      explode: true
      schema:
        maximum: 200
        minimum: 1
        type: integer
        format: int32
      example: 10
    Paging-Offset:
      description: The offset from the previous page.
      name: offset
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: LerV6Jmex
    FilterRefund-StartDate:
      description: >-
        Lower bound for a refund creation date in the format 'YYYY-MM-DD' (UTC
        time zone). If specified, only refunds created at or after the given
        date will be returned.
      name: startDate
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: '2010-01-01'
    FilterRefund-EndDate:
      description: >-
        Upper bound for a refund creation date in the format 'YYYY-MM-DD' (UTC
        time zone). If specified, only refunds created at or before the given
        date will be returned.
      name: endDate
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: '2010-01-01'
    Consent-ID-Header:
      description: The associated account info consent id.
      name: consentId
      in: header
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: acount-info-consent-1234
    PSU-IP-Address:
      description: >-
        The forwarded IP Address header field consists of the corresponding http
        request IP Address field between user and TPP. If not available, the TPP
        shall use the IP Address used by the TPP when submitting this request.
      name: psuIpAddress
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
        format: ipv4
      example: 192.168.8.78
    PSU-User-Agent:
      description: >-
        The forwarded Agent header field of the HTTP request between user and
        TPP, if available.
      name: psuUserAgent
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
    PSU-Device-ID:
      description: >-
        The UUID (Universally Unique Identifier) for a user's device, if
        available. The UUID identifies either a device or a device dependant
        application installation. In case of an installation identification this
        ID needs to be unaltered until removal from device.
      name: psuDeviceId
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
      example: 99435c7e-ad88-49ec-a2ad-99ddcb1f5555
    PSU-Geo-Location:
      description: >-
        The forwarded Geo Location of the corresponding http request between
        user and TPP if available.
      name: psuGeoLocation
      in: header
      required: false
      style: simple
      explode: false
      schema:
        pattern: GEO:-?[0-9]{1,2}\.[0-9]{6};-?[0-9]{1,3}\.[0-9]{6}
        type: string
      example: GEO:52.506931;13.144558
    Account-ID:
      description: >-
        The account id. Available account ids can be found in the account info
        consent.
      name: accountId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: '1234567890'
    Transaction-ID:
      description: >-
        The account id. Available account ids can be found in the account info
        consent.
      name: transactionId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: '1234567890'
    Payment-ID:
      description: The payment id.
      name: paymentId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: '1234567890'
    Standing-Order-ID:
      description: The standing order id.
      name: standingOrderId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: '1234567890'
    Consent-ID:
      description: The consent id.
      name: consentId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: '1234567890'
    Start-Date:
      description: >-
        Optional lower bound for a transaction's booking date as returned by the
        bank, in the format 'YYYY-MM-DD' (<i>e.g.</i> '2016-01-01'). If
        specified, then only transactions whose bank booking date is equal to or
        later than the given date will be regarded.
      name: startDate
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
      example: '2020-12-12'
    End-Date:
      description: >-
        Optional upper bound for a transaction's booking date as returned by the
        bank (= original booking date), in the format 'YYYY-MM-DD' (<i>e.g.</i>
        '2016-01-01'). If specified, then only transactions whose bank booking
        date is equal to or earlier than the given date will be regarded.
      name: endDate
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
      example: '2020-12-24'
    Filter-Ids:
      description: >-
        Filters payments by their ids - returns only payments with ids listed in
        this parameter.
      name: ids
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
      example:
        - pm2:4QExXrhKTxfShBdcTeqFabqJJhUF:2gFUX1NDgpN
        - pm2:N5cJDFsQzVca3Qvr8kQocgEnjgX:2gFUX1NEdYA
    Filter-InvertIds:
      description: >-
        Invert ids query - returns only payments with ids not listed in the ids
        parameter.
      name: invertIds
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: false
    Filter-Statuses:
      description: >-
        Filters payments by their statuses - returns only payments with statuses
        listed in this parameter.
      name: statuses
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/PaymentStatus'
      example:
        - INITIATION_COMPLETED
        - INITIATION_REJECTED
    Filter-InvertStatuses:
      description: >-
        Invert statuses query - returns only payments with statuses not listed
        in the statuses parameter.
      name: invertStatuses
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: true
    Filter-CreatedAfter:
      description: >-
        Returns only payments created after this time (in <a
        href="https://www.iso.org/iso-8601-date-and-time-format.html"
        target="_blank">ISO 8601</a> format).
      name: createdAfter
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: '2022-04-05T17:00:00.000Z'
    Filter-CreatedBefore:
      description: >-
        Returns only payments created before this time (in <a
        href="https://www.iso.org/iso-8601-date-and-time-format.html"
        target="_blank">ISO 8601</a> format).
      name: createdBefore
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: '2022-04-05T17:00:00.000Z'
    Filter-RefIds:
      description: >-
        Filters payments by their `refId` values - returns only payments with
        `refIds` listed in this parameter.
      name: refIds
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
      example:
        - ShBdcTeqFabqJJhUF
        - N5cJDFsQzVca3Q
    Filter-OnBehalfOfId:
      description: >-
        Filters payments by the `onBehalfOfId` value - returns only payments
        with `onBehalfOfId` specified in this parameter.
      name: onBehalfOfId
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
      example: c5a863bc-86f2-4418-a26f-25b24c7983c7
    Filter-RefundStatuses:
      description: >-
        Filters payments by their refund status values - returns only payments
        with refund statuses listed in this parameter.
      name: refundStatuses
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/PaymentRefundStatus'
      example:
        - PARTIAL
        - NONE
    Format-Partial:
      description: >-
        Returns payments in a partial format - with only id and status fields
        populated.
      name: partial
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      example: true
  responses:
    BadResponse:
      description: The client specified an invalid argument
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_400'
    InvalidArgumentRequest:
      description: The client specified an invalid argument
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_400'
    UnauthenticatedResponse:
      description: The authorization information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
    UnexpectedErrorResponse:
      description: An unexpected or internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VirtualAccountsBetaGetAllResponse'
    PermissionDeniedResponse:
      description: Permission to access this endpoint is denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_403'
    CustomerNotFoundResponse:
      description: The requested entity, such as a TPP, was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
    AccountNotFoundResponse:
      description: The requested entity, such as a account, was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
    BadRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_400_1'
    PaymentNotFoundResponse:
      description: The requested entity, such as a payment, was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
    SettlementRuleNotFoundResponse:
      description: The requested entity, such as a settlement rule, was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
    TooManyRequestsResponse:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_429'
    NotImplementedResponse:
      description: The operation was not implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_501'
    ServiceUnavailableResponse:
      description: Service is unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_503'
    GatewayTimeoutResponse:
      description: Gateway has timed out
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_504'
    VrpConsentNotFoundResponse:
      description: VRP consent not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404_1'
  schemas:
    Account:
      description: Contains information about the requested bank account.
      type: object
      properties:
        accountDetails:
          $ref: '#/components/schemas/AccountDetails'
        accountFeatures:
          $ref: '#/components/schemas/AccountFeatures'
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: goldbank
        id:
          description: The system-generated, unique identifier for this account.
          type: string
          example: a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
        isLocked:
          description: All services are locked out for this account if `isLocked` = true.
          type: boolean
          format: boolean
          example: false
          default: false
        name:
          description: The unique name of this account.
          type: string
          example: John A Smith
    AccountDetails:
      description: >-
        Contains the details needed to identify, correlate and validate the bank
        account.
      type: object
      properties:
        accountHolderName:
          description: The name of the account holder/owner.
          type: string
          example: John Arthur Smith
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: BOFIIE2D
        identifier:
          description: >-
            The type of `accountIdentifier` being used, <i>e.g.</i>, bban,
            gbDomestic, iban, msisdn, pan or token.
          type: string
          example: iban
        accountIdentifiers:
          description: >-
            The account numbers and other strings that identify this as a unique
            bank account.
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentifier'
        metadata:
          description: >-
            Additional fields returned by the bank in response to your
            particular request. The presence and type of metadata are dependent
            on the bank and generally comprise additional information about the
            account or the transaction pertinent to your specific use case. You
            define how this information is used when included in the bank's
            response.
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailsMetadataEntry'
        providerAccountDetails:
          description: >-
            Specific information regarding the bank required by the respective
            Open Banking API standard adopted (CMA9, NextGenPSD2, PolishAPI, or
            STET).
          type: array
          items:
            $ref: '#/components/schemas/ProviderAccountDetails'
        status:
          description: >-
            Specifies the bank-defined status of the account (open, closed,
            active, inactive, <i>etc</i>.)
          type: string
          example: Active
        type:
          description: Specifies the type of account.
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailsAccountType'
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
    AccountDetailsAccountType:
      description: Specifies the type of account.
      type: string
      example: SAVINGS
      default: INVALID
      enum:
        - INVALID
        - OTHER
        - CHECKING
        - SAVINGS
        - LOAN
        - CARD
    AccountDetailsMetadataEntry:
      description: >-
        Additional fields returned by the bank in response to your particular
        request. The presence and type of metadata are dependent on the bank and
        generally comprise additional information about the account or the
        transaction pertinent to your specific use case. You define how this
        information is used when included in the bank's response.
      type: object
      additionalProperties:
        description: >-
          Bank-defined | [*] – bank-dependent fields 0 .. n; each respective
          data type is also bank-dependent (string, number, boolean, null/empty,
          object, or array).
        type: string
    AccountFeatures:
      description: Open Banking features supported for this account.
      type: object
      properties:
        supportsInformation:
          description: An account available for AIS operations.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsReceivePayment:
          description: An account that can receive money transfers.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsSendPayment:
          description: An account that can send money transfers.
          type: boolean
          format: boolean
          example: false
          default: false
    AccountIdentifier:
      description: >-
        Account numbers and other strings that identify this as a unique bank
        account.
      type: object
      required:
        - bankgiro
        - bban
        - gbDomestic
        - iban
        - msisdn
        - pan
        - plus giro
        - token
      oneOf:
        - title: bankgiro
          properties:
            bankgiro:
              $ref: '#/components/schemas/AccountIdentifierBankgiro'
        - title: bban
          properties:
            bban:
              $ref: '#/components/schemas/AccountIdentifierBban'
        - title: gbDomestic
          properties:
            gbDomestic:
              $ref: '#/components/schemas/AccountIdentifierGbDomestic'
        - title: iban
          properties:
            iban:
              $ref: '#/components/schemas/AccountIdentifierIban'
        - title: msisdn
          properties:
            msisdn:
              $ref: '#/components/schemas/AccountIdentifierMsisdn'
        - title: pan
          properties:
            pan:
              $ref: '#/components/schemas/AccountIdentifierPan'
        - title: plusgiro
          properties:
            plusgiro:
              $ref: '#/components/schemas/AccountIdentifierPlusgiro'
        - title: token
          properties:
            token:
              $ref: '#/components/schemas/AccountIdentifierToken'
    AccountIdentifierBankgiro:
      description: The identifier for domestic bank accounts in Sweden.
      type: object
      properties:
        bankgiroNumber:
          description: >-
            The unique identifier for the bank account in Sweden (known in
            Swedish as Bankgironummer); it consists of 7 or 8 digits; the
            clearing code is not used.
          type: string
          example: '56781234'
    AccountIdentifierBban:
      type: object
      properties:
        bban:
          description: >-
            Represents a country-specific bank account number. The BBAN is the
            last part of the IBAN when used for international funds transfers.
            Every country has its own specific BBAN format and length. At
            present, there is no common EU or other standard unifying the BBAN.
            This is why IBAN was introduced to standardise international bank
            transfers.
          type: string
          example: NWBK60161331926819
        clearingNumber:
          description: >-
            The bank clearing number or BC number is a number used for the
            identification of financial institutions in Switzerland and
            Liechtenstein. Bank clearing numbers are connected to the Swiss
            Interbank Clearing and the EuroSIC system.
          type: string
          example: 87654321
    AccountIdentifierGbDomestic:
      description: A domestic bank account in the UK.
      type: object
      properties:
        accountNumber:
          description: The unique identifier for the bank account in the UK or Ireland.
          type: string
          example: '12345678'
        sortCode:
          description: >-
            The number assigned to a branch of a bank, typically containing six
            digits and most commonly used in the UK and Ireland.
          type: string
          example: 123456
    AccountIdentifierIban:
      description: >-
        The International Bank Account Number, used when sending interbank
        transfers or wiring money from one bank to another, especially across
        international borders.
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number. This consists of a two-letter
            country code followed by two check digits and up to thirty-five
            alphanumeric characters.
          type: string
          example: GB29NWBK60161331926819
    AccountIdentifierMsisdn:
      description: >-
        The Mobile Station International Subscriber Director Number (MSISDN) is
        the user's mobile phone number, used as a unique identifier to enable
        routing of voice and SMS traffic to and from a specific
        subscription/device on a wireless/mobile network.
      type: object
      properties:
        msisdn:
          description: >-
            The MSISDN is composed of the country code and the national
            destination code. Ensure you remove the + sign and any 0 before the
            mobile number.
          type: string
          example: '447949123456'
    AccountIdentifierPan:
      description: >-
        The Primary Account Number (PAN). The card identifier found on payment
        cards, such as credit cards and debit cards, as well as stored-value
        cards, gift cards and other similar card, sometimes referred to as a
        bank card number.
      type: object
      properties:
        pan:
          description: >-
            The 14, 15, or 16 digit number generated as a unique identifier for
            a primary account.
          type: string
          example: '4658552288550023'
    AccountIdentifierPlusgiro:
      description: >-
        The domestic transaction clearing system in Sweden. The credit transfer
        function, which is part of <a href="https://www.nordea.com"
        target="blank">Nordea</a>, and used for mediating payments between
        accounts held by companies and individuals.
      type: object
      properties:
        plusgiroNumber:
          description: >-
            The account number (minimum 2 and maximum 8 digits) for a PlusGiro
            account. The clearing code is not used.
          type: string
          example: '987654'
    AccountIdentifierToken:
      description: >-
        The primary account number; the card identifier found on payment cards,
        such as credit cards and debit cards, as well as stored-value cards,
        gift cards and other similar card, sometimes referred to as a bank card
        number.
      type: object
      properties:
        accountId:
          description: >-
            The bank account identifier for a linked account used by Token.io's
            Bank Integration Account Linking Service.
          type: string
          example: a:b6037206ca7311ed:afa1
        memberId:
          description: The Token.io-generated member id for the user/account holder.
          type: string
          example: m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
    RefundInfo:
      description: Contains information about each refund initiation record in the list.
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountIdentifier'
        name:
          description: Name of the account.
          type: string
          example: John A Smith
    AddressInfo:
      description: The complete postal address of a party.
      type: object
      properties:
        city:
          description: Name of the city as given in postal addresses of the building/area.
          type: string
          example: Berlin
        conscriptionNumber:
          description: >-
            A special kind of house number. This relates to a settlement instead
            of a street. Conscription numbers are in use in some parts of
            Europe, sometimes together with street-related house numbers, which
            are also called orientation numbers.
          type: string
          example: '2831'
        country:
          description: >-
            A nation with its own government, occupying a particular territory
            containing the address.
          type: string
          example: Germany
        district:
          description: >-
            A defined district within the city or country containing the
            address.
          type: string
          example: Friedrichshain
        flats:
          description: House numbers (range or list) of flats behind a door.
          type: string
          example: 21A - 21C
        full:
          description: >-
            This is used for a full-text, often multi-line address if you find
            the structured address fields unsuitable for denoting the address of
            this particular location. Typically such strings cannot be parsed by
            software.
          type: string
          example: >-
            Fifth house on the left after the village oak, Smalltown,
            Smallcountry
        hamlet:
          description: >-
            A small settlement. In different jurisdictions and geographies, a
            hamlet may be the size of a town, village, or parish, or may be
            considered to be a smaller settlement or subdivision or satellite
            entity to a larger settlement.
          type: string
          example: Botzowviertel
        houseName:
          description: >-
            The name of a house. Sometimes used in countries like England
            instead of (or in addition to) a house number.
          type: string
          example: Grossen Blauen Haus
        houseNumber:
          description: >-
            The house number (may contain letters, dashes, or other characters).
            This identifies a single building with multiple addresses.
          type: string
          example: '123'
        place:
          description: >-
            The part of an address which refers to the name of some territorial
            zone (like an island or square) instead of a street. It should not
            be included together with `street`.
          type: string
          example: Arnswalder Platz
        postCode:
          description: >-
            An identifier consisting of a group of letters and/or numbers that
            is added to a postal address to assist the sorting of mail.
          type: string
          example: '10243'
        province:
          description: >-
            For Canada, uppercase two-letter postal abbreviations, <i>e.g.</i>,
            BC, AB, ON, QC.
          type: string
          example: BC
        state:
          description: >-
            For the US, uppercase two-letter postal abbreviations, <i>e.g.</i>,
            AK, CA, HI, NY, TX, WY.
          type: string
          example: CA
        street:
          description: >-
            the name of the respective street in which the dwelling or business
            is located or where mail is received.
          type: string
          example: Hans-Otto-Strasse
        subdistrict:
          description: A smaller, readily identifiable part of a district.
          type: string
          example: Friedrichshain Nord
        suburb:
          description: >-
            Suburbs and localities are the names of geographic subdivisions of
            urban areas in Australia.
          type: string
          example: Altona Meadows Suburb
    Alias:
      description: Alternate or additional member identification information.
      type: object
      properties:
        realmId:
          description: Identifies a member created under the realm of a specific bank.
          type: string
          example: m:vHZUAMFt6s64vn6aDyMiwBYbPDN:5zKtXEAq
        type:
          $ref: '#/components/schemas/Type'
        value:
          description: The alias string representing the type.
          type: string
          example: e-sales@token.io
    Type:
      description: The types of alias available.
      type: string
      example: EMAIL
      default: INVALID
      enum:
        - INVALID
        - UNKNOWN
        - EMAIL
        - PHONE
        - DOMAIN
        - BANK
        - CUSTOM
        - EIDAS
    OpenBankingStandard:
      description: Specifies the API standard adopted by the bank.
      type: string
      example: UK_Open_Banking_Standard
      default: Invalid_Standard
      enum:
        - Invalid_Standard
        - UK_Open_Banking_Standard
        - Starling_Bank_API
        - PolishApi
        - STET_PSD2_API
        - Citi_Handlowy_PSD2_API
        - NextGenPsd2
        - Slovak_Banking_API_Standard
        - Czech_Open_Banking_Standard
        - American_Express_PSD2_API
        - Budapest_Bank_API
    Paging:
      description: Contains the page information for response content.
      type: object
      properties:
        page:
          description: The index of the current page.
          type: integer
          format: int32
          example: 15
        pageCount:
          description: The number of records per page.
          type: integer
          format: int32
          example: 80
        perPage:
          description: The number of total pages.
          type: integer
          format: int32
          example: 32
        totalCount:
          description: The number of total records.
          type: integer
          format: int32
          example: 2500
    FieldFormatInformation:
      description: >-
        Contains bank-dependent formatting constraints indicating allowable
        characters, if any.
      type: object
      properties:
        constraint:
          description: >-
            The regex specifying allowed characters. See <a
            href=\"https://regexr.com/3cr6f\"
            target=\"_blank\">https://regexr.com/3cr6f</a>https://regexr.com/3cr6f
            for more details.
          type: string
          example: ^[A-Za-z0-9?:()./,'+\-\s]*$
        name:
          description: >-
            The name of the field in the Token.io `requestpayload` with
            bank-imposed formatting constraints.
          type: string
          example: description
        path:
          description: >-
            The `object.field` path indicating the constrained field's position
            in the Token.io `requestPayload`.
          type: string
          example: credentials.credentials1
    MandatoryFields:
      description: >-
        Contains the fields required by the bank, which the TPP must populate in
        the token request, where applicable.
      type: object
      properties:
        access:
          $ref: '#/components/schemas/MandatoryFieldsAccess'
        standingOrder:
          $ref: '#/components/schemas/MandatoryFieldsStandingOrder'
        transfer:
          $ref: '#/components/schemas/MandatoryFieldsTransfer'
    MandatoryFieldsAccess:
      description: Specifies the mandatory fields for an access token request.
      type: object
      properties:
        domestic:
          $ref: '#/components/schemas/MandatoryFieldsAccessDomestic'
        international:
          $ref: '#/components/schemas/MandatoryFieldsAccessInternational'
    MandatoryFieldsAccessDomestic:
      description: Specifies the mandatory fields for an access request.
      type: object
      properties:
        fields:
          description: The full path to the field within the domestic access request.
          type: array
          example:
            - >-
              access_body.instructions.access_destinations.customer_data.legal_names
            - access_body.instructions.source.bic
            - access_body.instructions.source.account_identifier
          items:
            type: string
        PolishApiFields:
          description: >-
            Lists other Polish API fields which must be included in the domestic
            access request.
          type: array
          example: >-
            access_body.instructions.metadata.provider_access_metadata.polish_api_access_metadata.delivery_mode
          items:
            type: string
        StetFields:
          description: >-
            Lists other STET API fields which must be included in the domestic
            access request.
          type: array
          example: >-
            access_body.instructions.metadata.provider_access_metadata.stet_access_metadata.beneficiary.creditor_agent
          items:
            type: string
    MandatoryFieldsAccessInternational:
      description: Specifies the mandatory fields for an international access request.
      type: object
      properties:
        fields:
          description: The full path to the field within the international access request.
          type: array
          example:
            - >-
              access_body.instructions.access_destinations.customer_data.legal_names
            - access_body.instructions.source.bic
            - access_body.instructions.source.account_identifier
          items:
            type: string
        PolishApiFields:
          description: >-
            Lists other Polish API fields which must be included in the access
            request.
          type: array
          example: >-
            access_body.instructions.metadata.provider_access_metadata.polish_api_access_metadata.delivery_mode
          items:
            type: string
        StetFields:
          description: >-
            Lists other STET API fields which must be included in the access
            request.
          type: array
          example: >-
            access_body.instructions.metadata.provider_access_metadata.stet_access_metadata.beneficiary.creditor_agent
          items:
            type: string
    MandatoryFieldsTransferDomestic:
      description: Specifies the mandatory fields for a domestic transfer.
      type: object
      properties:
        fields:
          description: The full path to the field within the domestic transfer.
          type: array
          example:
            - >-
              transfer_body.instructions.transfer_destinations.customer_data.legal_names
            - transfer_body.instructions.source.bic
            - transfer_body.instructions.source.account_identifier
          items:
            type: string
        PolishApiFields:
          description: >-
            Lists other Polish API fields which must be included in the domestic
            transfer.
          type: array
          example: >-
            transfer_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
          items:
            type: string
        StetFields:
          description: >-
            Lists other STET API fields which must be included in the domestic
            transfer.
          type: array
          example: >-
            transfer_body.instructions.metadata.provider_transfer_metadata.stet_transfer_metadata.beneficiary.creditor_agent
          items:
            type: string
    MandatoryFieldsTransferInternational:
      description: Specifies the mandatory fields for an international transfer.
      type: object
      properties:
        fields:
          description: The full path to the field within the international transfer.
          type: array
          example:
            - >-
              transfer_body.instructions.transfer_destinations.customer_data.legal_names
            - transfer_body.instructions.source.bic
            - transfer_body.instructions.source.account_identifier
          items:
            type: string
        PolishApiFields:
          description: >-
            Lists other Polish API fields which must be included in the
            international transfer.
          type: array
          example: >-
            transfer_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
          items:
            type: string
        StetFields:
          description: >-
            Lists other STET API fields which must be included in the
            international transfer.
          type: array
          example: >-
            transfer_body.instructions.metadata.provider_transfer_metadata.stet_transfer_metadata.beneficiary.creditor_agent
          items:
            type: string
    MandatoryFieldsStandingOrderDomestic:
      description: Specifies the mandatory fields for a domestic standing order.
      type: object
      properties:
        fields:
          description: The full path to the field within the domestic standing order.
          type: array
          example:
            - >-
              standing_order_body.instructions.transfer_destinations.customer_data.legal_names
            - standing_order_body.instructions.source.bic
            - standing_order_body.instructions.source.account_identifier
          items:
            type: string
        PolishApiFields:
          description: >-
            Lists other Polish API fields which must be included in the domestic
            standing order.
          type: array
          example: >-
            standing_order_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
          items:
            type: string
        StetFields:
          description: >-
            Lists other STET API fields which must be included in the domestic
            standing order.
          type: array
          example: >-
            standing_order_body.instructions.metadata.provider_transfer_metadata.stet_transfer_metadata.beneficiary.creditor_agent
          items:
            type: string
    MandatoryFieldsStandingOrderInternational:
      description: Specifies the mandatory fields for an international standing order.
      type: object
      properties:
        fields:
          description: The full path to the field within the international standing order.
          type: array
          example:
            - >-
              standing_order_body.instructions.transfer_destinations.customer_data.legal_names
            - standing_order_body.instructions.source.bic
            - standing_order_body.instructions.source.account_identifier
          items:
            type: string
        PolishApiFields:
          description: >-
            Lists other Polish API fields which must be included in the
            international token request.
          type: array
          example: >-
            standing_order_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
          items:
            type: string
        StetFields:
          description: >-
            Lists other STET API fields which must be included in the
            international token request.
          type: array
          example: >-
            standing_order_body.instructions.metadata.provider_transfer_metadata.polish_api_transfer_metadata.delivery_mode
          items:
            type: string
    MandatoryFieldsStandingOrder:
      description: Specifies the mandatory fields for a standing order token request.
      type: object
      properties:
        domestic:
          $ref: '#/components/schemas/MandatoryFieldsStandingOrderDomestic'
        international:
          $ref: '#/components/schemas/MandatoryFieldsStandingOrderInternational'
    MandatoryFieldsTransfer:
      description: Specifies the mandatory fields for a transfer token request.
      type: object
      properties:
        domestic:
          $ref: '#/components/schemas/MandatoryFieldsTransferDomestic'
        international:
          $ref: '#/components/schemas/MandatoryFieldsTransferInternational'
    Attachment:
      description: >-
        Contains optional provider blob objects supporting the
        transfer/transaction.
      type: object
      properties:
        blobId:
          description: The unique numeric value that references blob data.
          type: string
          example: '7124783462147'
        name:
          description: >-
            The name of the attachment. This can contain any combination of
            characters.
          type: string
          example: 3Etyewchj27
        type:
          description: >-
            Specifies the type of attachment, <i>e.g.</i>, image, audio,
            multimedia, or binary executable code.
          type: string
          example: Image
    Money:
      description: The balance currency and value.
      type: object
      required:
        - currency
        - value
      properties:
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        value:
          description: >-
            The transaction amount with up to four digits after the decimal
            point.
          type: string
          example: '10.23'
    MoneyRequest:
      description: The balance currency and value.
      type: object
      properties:
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        value:
          description: >-
            The transaction amount with up to four digits after the decimal
            point.
          type: string
          example: '10.23'
    CredentialField:
      description: Contains information used in embedded authentication flows.
      type: object
      properties:
        description:
          description: The description of the credentials.
          type: string
          example: User authentication
        displayName:
          description: The display name for the credentials.
          type: string
          example: Client ID
        flickerCode:
          description: The Flicker code displayed to the user.
          type: string
          example: FLICKERCODE
        id:
          description: >-
            Specifies the identifier to be used when passing the value for this
            credential.
          type: string
          example: clientId
        image:
          description: A Base64 representation of an image displayed to the user.
          type: string
          example: YWJAeXoyWhAeXohteQ
        options:
          description: >-
            A list of options for the user to select from. For example, it can
            be an SCA method choice (SMS message, phone call <i>etc</i>.), or
            confirm/decline options for a confirmation page. The customer sends
            one of the values back to Token.io with the corresponding id.
          type: array
          example:
            - SMS
            - Phone call
          items:
            type: string
        type:
          $ref: '#/components/schemas/CredentialFieldType'
    CredentialFieldType:
      description: Specifies the type of credential.
      type: string
      example: PASSWORD
      default: INVALID
      enum:
        - INVALID
        - FIELD
        - PASSWORD
        - PSU_MESSAGE
        - IMAGE
        - FLICKER
        - DECOUPLED
        - CONFIRMATION
    ProviderAccountDetails:
      description: >-
        Specific information regarding the bank required by the respective Open
        Banking API standard adopted (CMA9, NextGenPSD2, PolishAPI, or STET).
      type: object
      properties:
        cma9AccountDetails:
          $ref: '#/components/schemas/Cma9AccountDetails'
        nextGenPsd2AccountDetails:
          $ref: '#/components/schemas/NextGenPsd2AccountDetails'
        polishApiAccountDetails:
          $ref: '#/components/schemas/PolishApiAccountDetails'
        stetAccountDetails:
          $ref: '#/components/schemas/StetAccountDetails'
    ProviderTransactionDetails:
      description: >-
        Specific information regarding the bank required by the respective Open
        Banking API standard adopted.
      type: object
      properties:
        budapestApiTransactionDetails:
          $ref: '#/components/schemas/BudapestApiTransactionDetails'
        cma9ApiTransactionDetails:
          $ref: '#/components/schemas/Cma9ApiTransactionDetails'
        czechApiTransactionDetails:
          $ref: '#/components/schemas/CzechApiTransactionDetails'
        nextGenPsd2TransactionDetails:
          $ref: '#/components/schemas/NextGenPsd2TransactionDetails'
        polishApiTransactionDetails:
          $ref: '#/components/schemas/PolishApiTransactionDetails'
        slovakApiTransactionDetails:
          $ref: '#/components/schemas/SlovakApiTransactionDetails'
        stetTransactionDetails:
          $ref: '#/components/schemas/StetTransactionDetails'
    ProviderTransferDetails:
      description: Information about the transfer.
      type: object
      properties:
        id:
          description: A provider-specific reference id generated upon TPP submission.
          type: string
          example: uXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu
        status:
          description: >-
            The status provided by the bank. This can be the <a
            href="https://www.iso20022.org/" target="_blank">ISO 20022</a>
            payment status code. See <a
            href="https://developer.token.io/token_rest_api_doc/content/e-rest/iso-20022-statuses.htm"
            target="_blank">ISO 20022 payment status codes</a> for more
            information.
          type: string
          example: AcceptedSettlementCompleted
    ProviderTransferMetadata:
      description: >-
        The transfer metadata required under the Open Banking API standard
        adopted by the bank.
      type: object
      oneOf:
        - title: CMA9 API
          properties:
            cma9TransferMetadata:
              $ref: '#/components/schemas/Cma9TransferMetadata'
        - title: NextGenPSD2
          properties:
            nextGenPsd2TransferMetadata:
              $ref: '#/components/schemas/NextGenPsd2TransferMetadata'
        - title: Polish API
          properties:
            polishApiTransferMetadata:
              $ref: '#/components/schemas/PolishApiTransferMetadata'
        - title: French PSD2
          properties:
            stetTransferMetadata:
              $ref: '#/components/schemas/StetTransferMetadata'
    ScaStatus:
      description: This status indicates whether the SCA process succeeded or failed.
      type: string
      example: AUTHENTICATED
      default: INVALID
      enum:
        - INVALID
        - AUTHENTICATED
        - AUTHENTICATION_FAILED
        - DECLINED_BY_PSU
    BudapestApiAccountReference:
      description: >-
        The unique provider account identifier required under the Budapest Bank
        API standards.
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
    BudapestApiTransactionDetails:
      description: >-
        Provider transaction details required under the Budapest Bank API
        standards.
      type: object
      properties:
        creditorAccount:
          $ref: '#/components/schemas/BudapestApiAccountReference'
        creditorName:
          description: The name of the creditor/payee.
          type: string
          example: ACME Company
        debtorAccount:
          $ref: '#/components/schemas/BudapestApiAccountReference'
        debtorName:
          description: The name of the debtor/payer.
          type: string
          example: John Smith
        transactionCategory:
          description: The category for the transaction, <i>e.g.</i>, Debit, Credit.
          type: string
          example: Credit
    Cma9CardInstrument:
      description: >-
        Card instrument details required under the <a
        href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/432800080/CMA+SQM+API+Specification+-+v1.0.1"
        target="_blank">CMA9 API standard</a>.
      type: object
      properties:
        accountIdentification:
          type: string
          example: a:J72REftaRoiaDYRDU7M9FDgf8jeh3eqek9DvKeyBWbuA:3VMczyq7r7b6HwC
        authorizationType:
          type: string
        cardSchemeName:
          type: string
        name:
          type: string
    Cma9AccountDetails:
      description: >-
        Provider account details required under the <a
        href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/432800080/CMA+SQM+API+Specification+-+v1.0.1"
        target="_blank">CMA9 API standard</a>.
      type: object
      properties:
        description:
          description: A description of the account type.
          type: string
          example: Personal
        accountType:
          $ref: '#/components/schemas/Cma9AccountDetailsAccountType'
        accountSubtype:
          $ref: '#/components/schemas/Cma9AccountDetailsAccountSubtype'
        address:
          type: array
          items:
            $ref: '#/components/schemas/Cma9AccountDetailsAddress'
        emailAddress:
          description: The electronic mail address associated with the account.
          type: string
          example: john.smith@email.com
        mobile:
          description: The mobile phone number associated with the account.
          type: string
          example: 07999 123456
        name:
          description: >-
            Name of the account, as assigned by the account servicing
            institution. The account name is the name or names of the account
            owner(s) represented at an account level. The account name is not
            the product name or the nickname of the account.
          type: string
          example: John Smith
        partyId:
          description: >-
            The unique and immutable identifier used to identify the TPP
            resource; this identifier has no meaning to the account owner.
          type: string
          example: '68973542'
        partyNumber:
          description: The number assigned by an agent to identify its customer.
          type: string
          example: '24354657'
        partyType:
          $ref: '#/components/schemas/Cma9AccountDetailsPartyType'
        phone:
          description: >-
            The collection of information that identifies a phone number, as
            defined by the telecom service.
          type: string
          example: 020 123 4567
    Cma9AccountDetailsAccountSubtype:
      description: This specifies the sub type of the account.
      type: string
      example: CURRENT_ACCOUNT
      default: INVALID_ACCOUNT_SUBTYPE
      enum:
        - INVALID_ACCOUNT_SUBTYPE
        - CHARGE_CARD
        - CREDIT_CARD
        - CURRENT_ACCOUNT
        - EMONEY
        - LOAN
        - MORTGAGE
        - PREPAID_CARD
        - SAVINGS
    Cma9AccountDetailsAccountType:
      description: Specifies the type of account.
      type: string
      example: PERSONAL_ACCOUNT
      default: INVALID_ACCOUNT_TYPE
      enum:
        - INVALID_ACCOUNT_TYPE
        - BUSINESS_ACCOUNT
        - PERSONAL_ACCOUNT
    Cma9AccountDetailsAddressType:
      description: Specifies the type of address.
      type: string
      example: BUSINESS
      default: INVALID_ADDRESS_TYPE
      enum:
        - INVALID_ADDRESS_TYPE
        - BUSINESS
        - CORRESPONDENCE
        - DELIVERYTO
        - MAILTO
        - POBOX
        - POSTAL
        - RESIDENTIAL
        - STATEMENT
    Cma9AccountDetailsAddress:
      description: The complete postal address of a party.
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressInfo'
        addressType:
          $ref: '#/components/schemas/Cma9AccountDetailsAddressType'
    Cma9AccountDetailsPartyType:
      description: The party type, in a coded form.
      type: string
      example: JOINT
      default: INVALID_PARTY_TYPE
      enum:
        - INVALID_PARTY_TYPE
        - DELEGATE
        - JOINT
        - SOLE
    Cma9ApiTransactionDetails:
      description: >-
        Provider transaction details required under the <a
        href=https://openbanking.atlassian.net/wiki/spaces/DZ/pages/937656404/Read+Write+Data+API+Specification+-+v3.1
        target="_blank">CMA9 API standard</a>.
      type: object
      properties:
        creditorAccount:
          $ref: '#/components/schemas/Cma9CreditorAccount'
        creditorAgent:
          $ref: '#/components/schemas/Cma9CreditorAgent'
        debtorAccount:
          $ref: '#/components/schemas/Cma9DebtorAccount'
        debtorAgent:
          $ref: '#/components/schemas/Cma9DebtorAgent'
        merchantDetails:
          $ref: '#/components/schemas/Cma9MerchantDetails'
    Cma9TransferMetadata:
      description: >-
        Transfer metadata required under the <a
        href=https://openbanking.atlassian.net/wiki/spaces/DZ/pages/937656404/Read+Write+Data+API+Specification+-+v3.1
        target="_blank">CMA9 API standard</a>.
      type: object
      properties:
        endToEndIdentification:
          description: >-
            A short reference field to share an invoice or receipt number for
            your records; this reference is important to the debtor (this could
            be an internal reference id against the transaction) but it Is NOT
            the reference information that will be primarily populated on the
            statement of the creditor (beneficiary).
          type: string
        instructionIdentification:
          description: >-
            The TPP-generated, unique transaction id passed to the bank
            (mandatory) but does not have to go any further in the payment flow.
            The expectation is that this is unique indefinitely across all time
            periods by including a date or date time element to the field, or by
            inserting a unique id.
          type: string
        risk:
          $ref: '#/components/schemas/Cma9Risk'
    Cma9CreditorAccount:
      description: Specifies the payee's account with the creditor.
      type: object
      properties:
        accountIdentification:
          description: The payee's creditor account id or number.
          type: string
        creditorName:
          description: The name of the payee listed for the creditor account.
          type: string
        schemeName:
          description: The creditor-defined recurring payment scheme name.
          type: string
          example: Purchase instalment plan
        secondaryIdentification:
          description: Secondary identification required for the transaction.
          type: string
    Cma9CreditorAgent:
      description: >-
        The unique and unambiguous identification of a financial institution, as
        assigned under an internationally recognised or proprietary
        identification scheme.
      type: object
      properties:
        creditorAgentAddress:
          $ref: '#/components/schemas/Cma9DeliveryAddress'
        creditorAgentName:
          description: >-
            The name of financial institution servicing an account for the
            creditor.
          type: string
          example: Creditor bank
        identification:
          description: >-
            The unique identifier for financial institution servicing an account
            for the creditor.
          type: string
          example: '98765432'
        schemeName:
          description: The creditor-defined recurring payment scheme name.
          example: Purchase instalment plan
    Cma9DebtorAccount:
      description: >-
        The source account information for the payment, the payer's bank
        account.
      type: object
      properties:
        accountIdentification:
          description: The payer's debtor account id or number.
          type: string
        cardInstrument:
          $ref: '#/components/schemas/Cma9CardInstrument'
        debtorName:
          description: The name of the payee listed for the creditor account.
          type: string
        schemeName:
          description: The creditor-defined recurring payment scheme name.
          type: string
          example: Purchase instalment plan
        secondaryIdentification:
          description: Additional identification required.
          type: string
    Cma9DebtorAgent:
      description: >-
        The unique and unambiguous identification of a financial institution, as
        assigned under an internationally recognised or proprietary
        identification scheme.
      type: object
      properties:
        debtorAgentAddress:
          $ref: '#/components/schemas/Cma9DeliveryAddress'
        debtorAgentName:
          description: >-
            The name of financial institution servicing an account for the
            debtor.
          type: string
          example: Debtor bank.
        identification:
          description: >-
            The unique identifier for financial institution servicing an account
            for the debtor.
          type: string
        schemeName:
          description: The creditor-defined recurring payment scheme name.
          type: string
          example: Purchase instalment plan
    Cma9DeliveryAddress:
      description: Specifies the recipient's delivery address details.
      type: object
      properties:
        addressLine:
          description: Specifies the delivery address using multiple lines, as necessary.
          type: array
          example:
            - Flat 2, The Red Lodge, 1 High Street
          items:
            type: string
        addressType:
          description: Specifies the type of address.
          type: string
          example: BUSINESS
          default: INVALID_ADDRESS_TYPE
          enum:
            - INVALID_ADDRESS_TYPE
            - BUSINESS
            - CORRESPONDENCE
            - DELIVERYTO
            - MAILTO
            - POBOX
            - POSTAL
            - RESIDENTIAL
            - STATEMENT
        buildingNumber:
          description: The building number within the delivery address.
          type: string
          example: '1'
        country:
          description: >-
            A nation with its own government, occupying a particular territory
            containing the address.
          type: string
          example: UK
        countrySubDivision:
          description: >-
            Identifies a subdivision of a country; for instance, a state,
            region, or county.
          type: array
          example:
            - North Yorkshire
          items:
            type: string
        department:
          description: >-
            This <a
            href="https://openbankinguk.github.io/read-write-api-site3/v3.1.6/resources-and-data-models/pisp/international-payment-consents.html"
            target="_blank">OBIE specification</a> maps to house number.
          type: string
          example: '1'
        postCode:
          description: >-
            An identifier consisting of a group of letters and/or numbers that
            is added to a postal address to assist the sorting of mail.
          type: string
          example: YO62 5JB
        streetName:
          description: >-
            The name of the respective street or thoroughfare in which the
            dwelling or business is located or where mail is received.
          type: string
          example: High Street
        subDepartment:
          description: >-
            This <a
            href="https://openbankinguk.github.io/read-write-api-site3/v3.1.6/resources-and-data-models/pisp/international-payment-consents.html"
            target="_blank">OBIE specification</a> maps to flats.
          type: string
          example: Flat 2
        townName:
          description: >-
            The name of a built-up area with defined boundaries and a local
            government.
          type: string
          example: York
    Cma9MerchantDetails:
      type: object
      properties:
        merchantCategoryCode:
          description: >-
            The category code conforming to <a
            href="https://www.iso.org/standard/33365.html" target="_blank">ISO
            18245</a>, relating to the type of services or goods provided by the
            merchant. A list of codes can be purchased <a
            href="https://www.iso.org/standard/79450.html"
            target="_blank">here</a>."
          type: string
          example: 5699-V
        merchantName:
          description: The name of the merchant.
          type: string
          example: Merchants R US
    Cma9PaymentContextCode:
      description: Specifies the context of the payment.
      type: string
      example: ECOMMERCE_GOODS
      enum:
        - INVALID_PAYMENT_CONTEXT_CODE
        - BILL_PAYMENT
        - ECOMMERCE_GOODS
        - ECOMMERCE_SERVICES
        - OTHER
        - PARTY_TO_PARTY
    Cma9BeneficiaryAccountType:
      description: To be provided if the AccountType is known.
      type: string
      example: BUSINESS
      enum:
        - PERSONAL
        - JOINT_PERSONAL
        - PERSONAL_SAVINGS_ACCOUNT
        - BUSINESS
        - BUSINESS_SAVINGS_ACCOUNT
        - CHARITY
        - COLLECTION
        - CORPORATE
        - GOVERNMENT
        - EWALLET
        - INVESTMENT
        - ISA
        - PREMIER
        - WEALTH
        - PENSION
    Cma9Risk:
      description: This object specifies additional details for risk scoring of payments.
      type: object
      properties:
        deliveryAddress:
          $ref: '#/components/schemas/Cma9DeliveryAddress'
        merchantCustomerIdentification:
          description: >-
            The unique customer identifier for the user with the merchant
            (maximum 70 characters).
          type: string
          example: '0000789123'
        paymentContextCode:
          $ref: '#/components/schemas/Cma9PaymentContextCode'
        paymentPurposeCode:
          description: >-
            The category code conforming to the Recommended UK Purpose Code in
            the <a href="https://www.iso.org/standard/55005.html"
            target="_blank">ISO 20022</a> Payment Messaging List, related to the
            type of services or goods corresponding to the underlying purpose of
            the payment. This also includes the values listed for <a
            href="https://www.stet.eu" target="_blank">STET</a>’s purpose code
            and <a href="https://www.openbanking.org.uk" target="_blank">OBIE's
            </a> standards, <i>e.g.</i>, CASH, CORT, DVMP, INTC, TREA.
          type: string
        beneficiaryAccountType:
          $ref: '#/components/schemas/Cma9BeneficiaryAccountType'
        contractPresentIndicator:
          description: >-
            This field indicates whether the Payment Service Provider (PSP) has
            a contract with the payee and has undertaken some form of validation
            or due diligence on the payee; values: true or false. This field can
            be pre-populated by Token.io, for PSPs using Token.io's license.
          type: string
          example: 'true'
        beneficiaryPrepopulatedIndicator:
          description: >-
            This field indicates whether the PSP, rather than the user, has
            generated the TRI fields and that the user can't change them during
            the transaction journey; values: true or false. This field can be
            pre-populated by the PSP.
          type: string
          example: 'true'
    CzechApiAccountReference:
      description: >-
        The unique provider account identifier required under the Czech Standard
        for Open Banking.
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        bban:
          description: >-
            Represents a country-specific bank account number. The BBAN is the
            last part of the IBAN when used for international funds transfers.
            Every country has its own specific BBAN format and length. At
            present, there is no common EU or other standard unifying the BBAN.
            This is why IBAN was introduced to standardise international bank
            transfers.
          type: string
          example: NWBK60161331926819
    CzechApiTransactionDetails:
      description: >-
        Provider transaction details required under the <a
        href="https://cbaonline.cz/upload/838-czech-standard-for-open-banking-v3-0.pdf"
        target="_blank">Czech Standard for Open Banking</a>.
      type: object
      properties:
        creditorAccount:
          $ref: '#/components/schemas/CzechApiAccountReference'
        creditorName:
          description: The name of the creditor/payee.
          type: string
        debtorAccount:
          $ref: '#/components/schemas/CzechApiAccountReference'
        debtorName:
          description: The name of the debtor/payer.
          type: string
    NextGenPsd2AccountReference:
      description: >-
        The unique provider account identifier required under the <a
        href="https://www.berlin-group.org/nextgenpsd2-downloads"
        target="_blank">NextGenPSD2 standard</a>.
      type: object
      properties:
        bban:
          description: >-
            Represents a country-specific bank account number. The BBAN is the
            last part of the IBAN when used for international funds transfers.
            Every country has its own specific BBAN format and length; 10 to 30
            characters comprising the bank code (including the account number)
            and a checksum key. At present, there is no common EU or other
            standard unifying the BBAN. This is why IBAN was introduced to
            standardise international bank transfers.
          type: string
          example: NWBK60161331926819
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        maskedPan:
          description: >-
            The masked primary account number; tokenised identification for data
            protection.
          type: string
        msisdn:
          description: >-
            The Mobile Station International Subscriber Director Number (MSISDN)
            is the user's mobile phone number, used as a unique identifier to
            enable routing of voice and SMS traffic to and from a specific
            subscription/device on a wireless/mobile network. It's composed of
            the country code and the national destination code. Ensure you
            remove the + sign and any 0 before the mobile number.
          type: string
          example: '447949123456'
        pan:
          description: >-
            The primary account number. The card identifier found on payment
            cards, such as credit cards and debit cards, as well as stored-value
            cards, gift cards and other similar card, sometimes referred to as a
            bank card number.
          type: string
          example: '4658552288550023'
    NextGenPsd2AccountDetails:
      description: >-
        Provider account details required under the <a
        href="https://www.berlin-group.org/nextgenpsd2-downloads"
        target="_blank">NextGenPSD2 standard</a>.
      type: object
      properties:
        cashAccountType:
          description: >-
            The `ExternalCashAccountType1Code` from the <a
            href="https://www.iso.org/standard/55005.html" target="_blank">ISO
            20022</a> code.
          type: string
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        details:
          description: >-
            The details provided by the bank regarding characteristics of the
            account or characteristics of the relevant card.
          type: string
        linkedAccounts:
          description: >-
            In the case of a set of pending card transactions, the relevant cash
            account the card is set up on; this is the same as the `resourceId`
            of the relevant cash account.
          type: string
        product:
          description: >-
            The bank-defined product name for this account; the proprietary
            definition.
          type: string
        usage:
          description: >-
            Specifies the usage of the account (PRIV = private personal account,
            ORGA = professional account).
          type: string
          example: PRIV
    NextGenPsd2TransactionDetails:
      description: >-
        Provider transaction details required under the <a
        href="https://www.berlin-group.org/nextgenpsd2-downloads"
        target="_blank">NextGenPSD2 standard</a>.
      type: object
      properties:
        additionalInformation:
          description: Additional bank-provided information about the transaction.
          type: string
          example: Additional bank information
        domain:
          $ref: '#/components/schemas/BankTransactionCodeDomain'
        checkId:
          description: The identifier for the electronic check, where applicable.
          type: string
          example: 4vn6aDyMiwBYbP
        creditorAccount:
          $ref: '#/components/schemas/NextGenPsd2AccountReference'
        creditorId:
          description: The creditor/payee identifier provided by the bank.
          type: string
          example: 4vn6aDyMiwBYbP
        creditorName:
          description: The name of the creditor/payee.
          type: string
          example: ACME Company
        currencyExchange:
          description: The currency exchange rate.
          type: array
          items:
            $ref: '#/components/schemas/NextGenPsd2ReportExchangeRate'
        debtorAccount:
          $ref: '#/components/schemas/NextGenPsd2AccountReference'
        debtorName:
          description: The name of the debtor/payer.
          type: string
          example: John Smith
        endToEndId:
          description: >-
            A short reference field to share an invoice or receipt number for
            your records; this reference is important to the debtor (could be an
            internal reference ID against the transaction) but it Is NOT the
            reference information that will be primarily populated on the
            statement of the creditor (beneficiary).
          type: string
          example: 6aDyMiwB
        entryReference:
          description: >-
            The identification of the transaction referencing delta function on
            an application level; same id used within camt.05x messages.
          type: string
          example: 72REftaRoiaDYRDU
        mandateId:
          description: The identifier for mandates; <i>e.g.</i>, a SEPA Mandate id.
          type: string
          example: DE452399865089
        purposeCode:
          description: >-
            The <a href="https://www.iso.org/standard/55005.html"
            target="_blank">ISO 20022</a> external purpose code. Purpose Codes
            are four letter codes which are carried across the payment chain,
            providing information to all users in the payments chain to indicate
            the reason a payment is being made. Purpose Codes are one of the
            policy areas of Enhanced Data that can deliver the benefits of the
            ISO 20022 payment messaging standard.
          type: string
          example: CBLK
        remittanceInformationStructured:
          description: >-
            Structured remittance information; a reference issued by the seller
            used to establish a link between the payment of an invoice and the
            invoice instance.
          type: string
          example: REf:taRoiaDY34DU
        ultimateCreditor:
          description: The ultimate party to which the transfer is due.
          type: string
          example: ACME GmbH
        ultimateDebtor:
          description: >-
            The ultimate party that owes that owes money to the (ultimate)
            creditor.
          type: string
          example: John Smith
        valueDate:
          description: >-
            The date, in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format, when funds are posted to an
            account and available for immediate use.
          type: string
          example: '2022-03-27T17:00:00.000Z'
    NextGenPsd2TransferMetadata:
      description: >-
        The transfer metadata required under the <a
        href="https://www.berlin-group.org/nextgenpsd2-downloads"
        target="_blank">NextGenPSD2 standard</a>.
      type: object
      properties:
        creditorAgent:
          description: >-
            A unique and unambiguous identifier for a financial institution, as
            assigned under an internationally recognised or proprietary
            identification scheme.
          type: string
        creditorAgentName:
          description: >-
            The name of the financial institution servicing an account for the
            creditor.
          type: string
        endToEndIdentification:
          description: >-
            The unique identifier assigned by the initiating party to
            unambiguously identify the transaction; this identification is
            passed on, unchanged, throughout the entire end-to-end chain.
          type: string
        remittanceInformationStructured:
          description: >-
            The information supplied to enable matching of an entry with the
            items that the transfer is intended to settle, such as commercial
            invoices in an accounts receivable system.
          type: string
    NextGenPsd2ReportExchangeRate:
      description: The currency exchange rate.
      type: object
      properties:
        contractIdentification:
          description: Identifies the forward or spot exchange contract.
          type: string
        exchangeRate:
          description: >-
            The rate of exchange between the `sourceCurrencyand` the
            `targetCurrency`.
          type: string
        quotationDate:
          description: >-
            The date of the FX quote, in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format.
          type: string
          example: '2022-04-05T17:00:00.000Z'
        sourceCurrency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        targetCurrency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        unitCurrency:
          description: The price of one currency expressed in terms of another currency.
          type: string
          example: 1.4 to 1.
    PolishApiAccountHolderType:
      description: Specifies the type of account holder.
      type: string
      example: INDIVIDUAL
      default: INVALID_ACCOUNT_HOLDER_TYPE
      enum:
        - INVALID_ACCOUNT_HOLDER_TYPE
        - INDIVIDUAL
        - CORPORATION
    PolishApiAccountPsuRelation:
      description: >-
        The bank-provided information concerning the relationship between the
        user and an account.
      type: object
      properties:
        stake:
          description: >-
            The total value, expressed as a percentage, specifying the user's
            share of the funds on the account or its liability in the case of
            credit products; applies to the Owner, Borrower, Guarantor
            relationship.
          type: integer
          format: int32
        typeOfProxy:
          $ref: '#/components/schemas/PolishApiTypeOfProxy'
        typeOfRelation:
          $ref: '#/components/schemas/PolishApiTypeOfRelation'
    PolishApiBank:
      description: Specifies information about the bank itself.
      type: object
      properties:
        address:
          description: The physical/mailing address of the bank.
          type: array
          example: 45, Torunska, Gdansk
          items:
            type: string
        bicOrSwift:
          description: >-
            The standard format for business identifier codes (BIC), used to
            identify banks and financial institutions globally.
          type: string
          example: HBUKGB7F261
        code:
          description: The bank code for foreign transfers.
          type: string
          example: BKAFEWFK564
        countryCode:
          description: >-
            The <a href="https://www.iso.org/obp/ui/#search" target="_blank">ISO
            3166-1 Alpha 2 country codes</a> in upper case.
          type: string
          example: PL
        name:
          description: The official name of the bank corresponding to its SWIFT/BIC code.
          type: string
          example: Polska Bank
    PolishApiBankAccountInfo:
      description: Specifies information about the bank itself.
      type: object
      properties:
        address:
          description: The physical/mailing address of the bank.
          type: array
          items:
            type: string
            example: 123 Torunska, Srodmiescie, Gdansk, 62-345
        name:
          description: The official name of the bank corresponding to its SWIFT/BIC code.
          type: string
          example: Polska Bank
    PolishApiCurrencyRate:
      description: The currency conversion rate information.
      type: object
      properties:
        fromCurrency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code for the
            convert-from currency.
          type: string
          example: EUR
        rate:
          description: The currency exchange rate.
          type: number
          format: double
        toCurrency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code for the
            convert-to currency.
          type: string
          example: EUR
    PolishApiDeliveryMode:
      description: The urgency classification for delivery.
      type: string
      example: STANDARD_D2
      default: INVALID_DELIVERY_MODE
      enum:
        - INVALID_DELIVERY_MODE
        - STANDARD_D2
        - STANDARD_D1
        - URGENT_D1
        - EXPRESS_D0
    PolishApiNameAddress:
      description: Doing Business As (DBA) and/or other names and addresses of the company.
      type: object
      properties:
        value:
          description: The bank-defined name and postal address.
          type: array
          items:
            type: string
            example: ACME Business Ltd, 299 Zywiecka, Gdansk
    PolishApiPayer:
      description: Information about the tax payer.
      type: object
      properties:
        payerId:
          description: The payer's tax id.
          type: string
          example: '444433332211'
        payerIdType:
          description: The type of tax payer id.
          type: string
          example: R
          default: 'N'
          enum:
            - 'N'
            - P
            - R
            - '1'
            - '2'
            - '3'
    PolishApiAccountDetails:
      description: >-
        The provider account details required under the <a
        href="https://polishapi.org/en/dokumentacja-standardu/"
        target="_blank">Polish API standard</a>.
      type: object
      properties:
        accountHolderType:
          $ref: '#/components/schemas/PolishApiAccountHolderType'
        accountNameClient:
          description: Specifies the account owner name.
          type: string
        auxData:
          $ref: '#/components/schemas/PolishApiAccountDetailsAuxDataEntry'
        bank:
          $ref: '#/components/schemas/PolishApiBankAccountInfo'
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        nameAddress:
          $ref: '#/components/schemas/PolishApiNameAddress'
        psuRelations:
          description: >-
            The bank-provided information concerning the relationship between
            the user and an account.
          type: array
          items:
            $ref: '#/components/schemas/PolishApiAccountPsuRelation'
    PolishApiAccountDetailsAuxDataEntry:
      description: The bank-defined auxiliary data associated with the account.
      type: object
      additionalProperties:
        description: >-
          Bank-defined | [*] – bank-dependent fields 0 .. n; each respective
          data type is also bank-dependent (string, number, boolean, null/empty,
          object, or array).
        type: string
    PolishApiTransactionDetails:
      description: >-
        The provider transaction details required under the <a
        href="https://polishapi.org/en/dokumentacja-standardu/"
        target="_blank">Polish API standard</a>.
      type: object
      properties:
        accountBaseCurrency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code for the
            account's currency.
          type: string
          example: EUR
        auxData:
          $ref: '#/components/schemas/PolishApiTransactionDetails.AuxDataEntry'
        baseCurrency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code for the
            transaction's currency.
          type: string
          example: EUR
        cardInfo:
          $ref: '#/components/schemas/PolishApiTransactionInfoCard'
        currencyDate:
          description: The transaction currency valuation date.
          type: string
        holdExpirationDate:
          description: >-
            The date the bank hold expires, in < <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format.
          type: string
          example: '2022-11-12T17:00:00.000Z'
        initiator:
          $ref: '#/components/schemas/PolishApiNameAddress'
        mcc:
          description: The code for each transaction or operation performed by card.
          type: string
          example: 5699-V
        postTransactionBalance:
          description: The account balance after the transaction.
          type: string
        recipient:
          $ref: '#/components/schemas/PolishApiSenderRecipient'
        rejectionDate:
          description: >-
            The date, in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format, when the transaction was
            rejected.
          type: string
          example: '2022-10-23T17:00:00.000Z'
        rejectionReason:
          description: The reason the transaction was rejected.
          type: string
        sender:
          $ref: '#/components/schemas/PolishApiSenderRecipient'
        taxInfo:
          $ref: '#/components/schemas/PolishApiTransactionInfoTax'
        tppName:
          description: The name of the third-party provider.
          type: string
          example: Mario's Pizzas
        tppTransactionId:
          description: The TPP's unique transaction Identifier.
          type: string
          example: esaWvvr4l32iaDRqvrekkfwe212vsfvkcddEaVFaVR:4DVLaMVWER4VC6b
        tradeDate:
          description: >-
            The date of the transaction operation, in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format.
          type: string
          example: '2022-11-30T17:00:00.000Z'
        transactionRate:
          type: array
          items:
            $ref: '#/components/schemas/PolishApiCurrencyRate'
        transactionType:
          description: The type of transaction.
          type: string
          example: CREDIT
          default: CREDIT
          enum:
            - CREDIT
            - DEBIT
        usedPaymentInstrumentId:
          description: >-
            The unique identifier of the payment instrument used to execute the
            transaction/payment instrument id.
          type: string
        zusInfo:
          $ref: '#/components/schemas/PolishApiTransactionInfoZus'
    PolishApiTransactionDetails.AuxDataEntry:
      description: The bank-defined auxiliary data associated with the account.
      type: object
      additionalProperties:
        description: >-
          Bank-defined | [*] – bank-dependent fields 0 .. n; each respective
          data type is also bank-dependent (string, number, boolean, null/empty,
          object, or array).
        type: string
    PolishApiTransferMetadata:
      description: >-
        Transfer metadata required under the <a
        href="https://polishapi.org/en/dokumentacja-standardu/"
        target="blank">Polish API standard</a>.
      type: object
      properties:
        deliveryMode:
          $ref: '#/components/schemas/PolishApiDeliveryMode'
        hold:
          description: >-
            Indicates whether payment should be held until confirmation of
            delivery.
          type: boolean
          format: boolean
          example: false
          default: false
    PolishApiSenderRecipient:
      description: Information about the recipient.
      type: object
      properties:
        accountMassPayment:
          description: The virtual account number of the recipient/virtual account name.
          type: string
        accountNumber:
          description: The recipient's account number.
          type: string
          example: 87654321
        bank:
          $ref: '#/components/schemas/PolishApiBank'
        nameAddress:
          $ref: '#/components/schemas/PolishApiNameAddress'
    PolishApiSocialSecurityPayer:
      description: >-
        The information associated with payer social security; <i>i.e.</i>,
        Polish Security Institution (ZUS).
      type: object
      properties:
        additionalPayerId:
          description: The payer's additional identification number.
          type: string
        additionalPayerIdType:
          description: The type of additional payer id.
          type: string
        nip:
          description: The payer's tax identification number.
          type: string
          example: '444433332211'
    PolishApiTransactionInfoCard:
      description: The information about the card used in/for the transaction.
      type: object
      properties:
        cardHolder:
          description: The name of the cardholder.
          type: string
          example: Piotr Brama
        cardNumber:
          description: The card account number.
          type: string
          example: '5687243201834817'
    PolishApiTransactionInfoTax:
      description: The data for a tax transfer to the Tax Office or Customs Chamber.
      type: object
      properties:
        formCode:
          description: The data for a tax transfer to the Tax Office or Customs Chamber.
          type: string
          example: 49DtA9CoF9qYzh77FA9nVrCn2jia:5zKtXEAq
        obligationId:
          description: >-
            The identifier of the liability from which the tax is due;
            <i>e.g.</i>, decision, executive title, resolution.
          type: string
          example: DECISION
        payerInfo:
          $ref: '#/components/schemas/PolishApiPayer'
        periodId:
          description: The tax period number.
          type: string
          example: '11'
        periodType:
          description: The tax period type.
          type: string
          example: Month
        year:
          description: The tax year (YYYY).
          type: integer
          format: int32
          example: 2022
    PolishApiTransactionInfoZus:
      description: >-
        Data information for transfers to <a href="https://www.zus.pl"
        target="_blank">ZUS</a>.
      type: object
      properties:
        contributionId:
          description: The declaration number/contribution identifier.
          type: string
        contributionPeriod:
          description: The declaration period/contribution period in MMYYYY format.
          type: string
        contributionType:
          description: The contribution type.
          type: string
        obligationId:
          description: The execution title number/obligation identifier or number.
          type: string
        payerInfo:
          $ref: '#/components/schemas/PolishApiSocialSecurityPayer'
        paymentTypeId:
          description: The payment type identifier.
          type: string
    PolishApiTypeOfProxy:
      description: >-
        The type of user's power of attorney for the payment account; required
        when the relationship type is an account representative.
      type: string
      example: GENERAL
      default: INVALID_TYPE_OF_PROXY
      enum:
        - INVALID_TYPE_OF_PROXY
        - GENERAL
        - SPECIAL
        - ADMINISTRATOR
        - USER
    PolishApiTypeOfRelation:
      description: The type of relation between the user and the account.
      type: string
      example: OWNER
      default: INVALID_TYPE_OF_RELATION
      enum:
        - INVALID_TYPE_OF_RELATION
        - OWNER
        - BORROWER
        - GUARANTOR
        - PROXY_OWNER
        - BENEFICIARY
        - TRUSTEE
    slovakApiCreditorAccountReference:
      description: Information about the payee/creditor's account.
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        bban:
          description: >-
            Represents a country-specific bank account number. The BBAN is the
            last part of the IBAN when used for international funds transfers.
            Every country has its own specific BBAN format and length. At
            present, there is no common EU or other standard unifying the BBAN.
            This is why IBAN was introduced to standardise international bank
            transfers.
          type: string
          example: NWBK60161331926819
    slovakApiDebtorAccountReference:
      description: Information about the payer/debtor's account.
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        bban:
          description: >-
            Represents a country-specific bank account number. The BBAN is the
            last part of the IBAN when used for international funds transfers.
            Every country has its own specific BBAN format and length. At
            present, there is no common EU or other standard unifying the BBAN.
            This is why IBAN was introduced to standardise international bank
            transfers.
          type: string
          example: NWBK60161331926819
    SlovakApiTransactionDetails:
      description: >-
        Provider transaction details required under the <a
        href="https://www.sbaonline.sk/projekt/slovak-banking-api-standard/"
        target="_blank">Slovak Banking API Standard</a>.
      type: object
      properties:
        creditorAccount:
          $ref: '#/components/schemas/slovakApiCreditorAccountReference'
        creditorName:
          description: The name of creditor/payee.
          type: string
        debtorAccount:
          $ref: '#/components/schemas/slovakApiDebtorAccountReference'
        debtorName:
          description: The name of the debtor/payer.
          type: string
    StetAccountIdentification:
      description: Bank-defined account identifiers.
      type: object
      properties:
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        other:
          $ref: '#/components/schemas/StetGenericIdentification'
    StetCreditorAccountReference:
      description: Information about the payee/creditor's account.
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
    StetDebtorAccountReference:
      description: Information about the payer/debtor's account.
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
    StetBeneficiary:
      description: The creditor or payee receiving the transfer.
      type: object
      properties:
        creditor:
          $ref: '#/components/schemas/StetPartyIdentification'
        creditorAccount:
          $ref: '#/components/schemas/StetAccountIdentification'
        creditorAgent:
          $ref: '#/components/schemas/StetFinancialInstitutionIdentification'
        id:
          description: >-
            The unique identification of an account, a person, or an
            organisation assigned by an issuer.
          type: string
    StetClearingSystemMemberIdentification:
      description: >-
        Identifies a member within a clearing system; to be used for certain
        international credit transfers in order to identify the beneficiary
        bank.
      type: object
      properties:
        clearingSystemId:
          description: >-
            The specification of a pre-agreed offering between clearing agents
            or the channel through which the payment instruction is processed.
          type: string
        memberId:
          description: Identification of a member of a clearing system.
          type: string
          example: m:49DtA9CoF9qYzh77FA9nVrCn2jia:5zKtXEAq
    StetFinancialInstitutionIdentification:
      description: >-
        The unique and unambiguous identification of a financial institution, as
        assigned under an internationally recognised or proprietary
        identification scheme.
      type: object
      properties:
        bicFi:
          description: >-
            The code allocated to a financial institution by the <a
            href="https://www.iso.org/standard/84108.html"  target="_blank">ISO
            9362</a> Registration Authority as described in <a
            href="https://www.iso.org/standard/84108.html"  target="_blank">ISO
            9362</a> "Banking - Banking telecommunication messages - Business
            identification code (BIC)".
          type: string
        clearingSystemMemberId:
          $ref: '#/components/schemas/StetClearingSystemMemberIdentification'
        name:
          description: >-
            The name by which the party is known and which is usually used to
            identify that party.
          type: string
          example: Credit Bureau
        postalAddress:
          $ref: '#/components/schemas/StetPostalAddressCreditor'
    StetGenericIdentification:
      description: Bank-defined account information.
      type: object
      properties:
        identification:
          description: The alias of the account.
          type: string
        issuer:
          description: >-
            The entity that assigned the identification; country code or any
            organisation name or identifier that can be recognized by both
            parties.
          type: string
        schemeName:
          description: >-
            The name of the identification scheme. Possible values for the
            scheme name, partially based on <a
            href="https://www.iso.org/standard/55005.html" target="_blank">ISO
            20022</a> external code list, are (a) BANK
            (BankPartyIdentification): Unique and unambiguous assignment made by
            a specific bank or similar financial institution to identify a
            relationship as defined between the bank and its client; (b) COID
            (CountryIdentificationCode) : Country authority given organisation
            identification; <i>e.g.</i>, corporate registration number; (c) SREN
            (SIREN): 9-digit code assigned by INSEE, the French National
            Institute for Statistics and Economic Studies, to identify an
            organisation in France; (d) SRET (SIRET): 14-digit code assigned by
            INSEE, the French National Institute for Statistics and Economic
            Studies, to identify an organisation unit in France; consists of the
            SIREN number, followed by a five digit classification number, to
            identify the local geographical unit of that entity; (e) NIDN
            (NationalIdentityNumber): assigned by an authority to identify the
            national identity number of a person. Other values are also
            permitted, for instance: - OAUT (OAUTH2): OAUTH2 access token that
            is owned by the Payment Initiation Service Provider (PISP) being
            also an Account Information Service Provider (AISP) and that can be
            used in order to identify the user - CPAN (CardPan): Card PAN.
          type: string
    StetPartyIdentification:
      description: >-
        The <a href="https://www.iso.org/standard/55005.html"
        target="_blank">ISO 20022</a> information about the party; this can be
        either a person or an organisation.
      type: object
      properties:
        name:
          description: >-
            The name by which the party is known and which is usually used to
            identify that party.
          type: string
          example: John Smith
        organisationId:
          $ref: '#/components/schemas/StetGenericIdentification'
        postalAddress:
          $ref: '#/components/schemas/StetPostalAddress'
        privateId:
          $ref: '#/components/schemas/StetGenericIdentification'
    StetPaymentTypeInformation:
      description: A set of elements used to further specify the type of transaction.
      type: object
      properties:
        categoryPurpose:
          description: >-
            Specifies the high level purpose of the instruction based on a set
            of pre-defined categories; used by the initiating party to provide
            information concerning the processing of the payment and is likely
            to trigger special processing by any of the agents involved in the
            payment chain. Available values: <ul><li>CASH — a general cash
            management instruction</li><li>CORT — the transaction is related to
            settlement of a trade, <i>e.g.</i>, FX or securities</li><li>DVPM —
            pre-advises the account servicer of a forthcoming
            deliver-against-payment instruction</li></ul>
          type: string
          example: DVPM
          default: CASH
          enum:
            - CASH
            - CORT
            - DVPM
        instructionPriority:
          description: >-
            Indicates the urgency or order of importance the instructing party
            would like to apply to processing; can be ignored for SCTInst (SEPA
            Instant).
          type: string
          example: SAMEDAY
        localInstrument:
          description: >-
            Used to specify a local instrument, local clearing option and/or
            further qualify the service or service level. For example, INST is
            used to ask for SEPA instant Payment (SCTInst). For International
            payments, this field may be valued with one of the <a
            href="https://www.iso.org/standard/55005.html" target="_blank">ISO
            20022</a> external codes to specify which payment instrument should
            be used by the creditor's bank.
          type: string
          example: INST
        serviceLevel:
          description: Only SEPA is allowed.
          type: string
          example: SEPA
    StetPostalAddress:
      description: Contains the mailing address of the creditor.
      type: object
      properties:
        addressLine:
          description: Up to 4 lines that capture the mailing address.
          type: array
          items:
            type: string
            example: Appartement 3a, 35 Rue de Bologne, Marseilles
        country:
          description: >-
            A nation with its own government, occupying a particular territory
            containing the address.
          type: string
          example: La France
    StetPostalAddressCreditor:
      description: Contains the mailing address of the creditor.
      type: object
      properties:
        addressLine:
          description: Up to 4 lines that capture the mailing address.
          type: array
          items:
            type: string
            example: 47 La Grande Rue, Paris
        country:
          description: >-
            A nation with its own government, occupying a particular territory
            containing the address.
          type: string
          example: La France
    StetRegulatoryReportingCodes:
      description: >-
        Contains the list of needed regulatory reporting codes for international
        payments.
      type: object
      properties:
        regulatoryReportingCode:
          description: Regulatory and statutory codes provided by the NCA.
          type: array
          items:
            type: string
    StetAccountDetails:
      description: >-
        The provider account details required under the <a
        href="https://www.stet.eu/en/psd2/" target="_blank">French PSD2 API
        standard</a>.
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/StetAccountIdentification'
        cashAccountType:
          description: Specifies the type of account.
          type: string
        details:
          description: >-
            The bank-defined characteristics of the account or characteristics
            of the card.
          type: string
        linkedAccount:
          description: The relevant cash account that the card is set up on.
          type: string
        product:
          description: >-
            The bank-defined product name for this account; the proprietary
            definition.
          type: string
          example: Green Savings Account
        psuStatus:
          description: >-
            The relationship between the user and the account; <i>e.g.</i>,
            Account Holder, Co-account Holder, Attorney.
          type: string
          example: Account Holder
        usage:
          description: >-
            Specifies the usage of the account (PRIV = private personal account,
            ORGA = professional account).
          type: string
          example: PRIV
    StetTransactionDetails:
      description: >-
        The provider account details required under the <a
        href="https://www.stet.eu/en/psd2/" target="_blank">French PSD2 API
        standard</a>.
      type: object
      properties:
        creditorAccount:
          $ref: '#/components/schemas/StetCreditorAccountReference'
        creditorName:
          description: The name of creditor/payee.
          type: string
        debtorAccount:
          $ref: '#/components/schemas/StetDebtorAccountReference'
        debtorName:
          description: The name of the debtor/payer.
          type: string
        entryReference:
          description: >-
            The technical incremental identification of the transaction for
            reconciliation by the TPP.
          type: string
        transactionDate:
          description: >-
            <ul><li>For card transaction - date of the commercial
            transaction</li><li>for credit transfer - acquiring date of the
            transaction</li><li>for direct debit - receiving date of the
            transaction</li></ul>
          type: string
        valueDate:
          description: The value date of the transaction on the account.
          type: string
          example: '2023-08-11'
    StetTransferMetadata:
      description: >-
        Transfer metadata required under the <a
        href="https://www.stet.eu/en/psd2/" target="_blank">French PSD2 API
        standard</a>.
      type: object
      properties:
        beneficiary:
          $ref: '#/components/schemas/StetBeneficiary'
        debtorAgent:
          $ref: '#/components/schemas/StetFinancialInstitutionIdentification'
        endToEndId:
          description: >-
            The unique identification assigned by the initiating party to
            unambiguously identify the transaction, which is passed on,
            unchanged, throughout the entire end-to-end chain.
          type: string
        executionRule:
          description: >-
            The execution date-shifting rule when a recurring payment date falls
            on a weekend or bank holiday; payment is then executed either the
            "preceding" or "following" working day in accordance with bank
            policy.
          type: string
        paymentTypeInformation:
          $ref: '#/components/schemas/StetPaymentTypeInformation'
        regulatoryReportingCodes:
          $ref: '#/components/schemas/StetRegulatoryReportingCodes'
    Signature:
      description: Contains information about the signing party.
      type: object
      properties:
        keyId:
          description: >-
            The id of the public key used to verify the signature. This is only
            present if a `tokenId` is present. It can be used to validate that
            the provided `tokenId` corresponds to the token request (this is
            needed for Hosted Pages flows only).
          type: string
          example: CqSTHPvWY_dgVh-f
        memberId:
          description: The Token.io member id of the signing member.
          type: string
          example: m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
        signature:
          description: The Base64url-encoded ciphertext signature.
          type: string
          example: >-
            ODRWmM0xMRM7CKmK3bNl4e2Kb2btavTbZssCsrHsu8yopoKxBzouBrD9q5-E63tgdV1DpB7i31vwNDKywA0CAE
    AccessBody:
      description: >-
        Contains the request payload for a token representing account
        information access permissions.
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/AccessBodyResource'
        transactionHistoryDays:
          description: The number of transaction history days.
          type: integer
          format: int32
          example: 4
    AccessBodyResource:
      description: >-
        The body case seeking access to one or more resources for a single
        account.
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccessBodyResourceAccount'
        balance:
          $ref: '#/components/schemas/AccessBodyResourceAccountBalance'
        fundsConfirmation:
          $ref: '#/components/schemas/AccessBodyResourceFundsConfirmation'
        standingOrders:
          $ref: '#/components/schemas/AccessBodyResourceAccountStandingOrders'
        transactions:
          $ref: '#/components/schemas/AccessBodyResourceAccountTransactions'
        transferDestinations:
          $ref: '#/components/schemas/AccessBodyResourceTransferDestinations'
    AccessBodyResourceAccount:
      description: Specifies the account and resource for which access is being requested.
      type: object
      properties:
        accountId:
          description: >-
            The account number and associated information that identify a unique
            bank account.
          type: string
          example: a:b6037206ca7311ed:afa1
    AccessBodyResourceAccountBalance:
      type: object
      properties:
        accountId:
          description: >-
            The account number and associated information that identify a unique
            bank account.
          type: string
          example: '5291.27'
    AccessBodyResourceAccountStandingOrders:
      type: object
      properties:
        accountId:
          description: The unique identifier for the bank account.
          type: string
          example: a:J72REftaRoiaDYRDU7M9FDgf8jeh3eqek9DvKeyBWbuA:3VMczyq7r7b6HwC
    AccessBodyResourceAccountTransactions:
      type: object
      properties:
        accountId:
          description: The unique identifier for the bank account.
          type: string
    AccessBodyResourceFundsConfirmation:
      type: object
      properties:
        accountId:
          description: The unique identifier for the bank account.
          type: string
          example: a:J72REftaRoiaDYRDU7M9FDgf8jeh3eqek9DvKeyBWbuA:3VMczyq7r7b6HwC
    AccessBodyResourceTransferDestinations:
      type: object
      properties:
        accountId:
          description: The unique identifier for the bank account.
          type: string
          example: a:J72REftaRoiaDYRDU7M9FDgf8jeh3eqek9DvKeyBWbuA:3VMczyq7r7b6HwC
    ActingAs:
      description: Specifies another party for whom the token was created 'on behalf of'.
      type: object
      properties:
        displayName:
          description: >-
            The name of the recipient shown to the user; required when
            specifying `actingAs`, optional otherwise.
          type: string
          example: The Great Baking Co.
        refId:
          description: >-
            The sub-TPP identifier generated by Token.io once a merchant has
            been onboarded (36 chars).
          type: string
          example: 9htio4a1sp2akdr1aa
        secondaryName:
          description: >-
            The domain or email address of the recipient shown to the user along
            with the `displayName`.
          type: string
          example: jane.doe@company.com
    ExternalAuthorizationDetails:
      description: Contains the external authorization details provided by the bank.
      type: object
      properties:
        authorizationUrl:
          description: >-
            Content displayed from this URL prompts the user for permission to
            initiate the standing order.
          type: string
          example: https://your-standing-order-credentials.com
    StandingOrderBody:
      title: PIS - Standing Orders
      description: >-
        Contains the request payload for a token representing a standing
        order/recurring payment.
      type: object
      required:
        - amount
        - currency
        - instructions
      properties:
        amount:
          description: >-
            Specifies the transaction amount, with up to four digits after the
            decimal point, for payments scheduled according to frequency.
          type: string
          example: '10.23'
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        endDate:
          description: >-
            Date when regularly scheduled payments end, in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format.
          type: string
          example: '2022-09-13'
        frequency:
          description: >-
            Specifies the <a href="https://www.iso.org/standard/55005.html"
            target="_blank">ISO 20022</a> code for the scheduled frequency of
            standing order payments occurring between the first and final
            payments. Options:<ul><li>DAIL - daily/once a day</li><li>WEEK -
            weekly/once a week</li><li>TOWK - twice weekly/two times a
            week</li><li>MNTH - monthly/once a month</li><li>TOMN - twice
            monthly/two times a month</li><li>QUTR - quarterly/once every three
            months</li><li>SEMI - semi-annually/twice a year</li><li>YEAR -
            annually/once a year</li></ul>
          type: string
          example: WEEK
        instructions:
          $ref: '#/components/schemas/TransferInstructions'
        remittanceReference:
          description: >-
            Creditor's reference for matching an entry with the items that the
            transfer is intended to settle, such as commercial invoices in an
            accounts receivable system.
          type: string
          example: 64vn6aDyMiwBYbPDN:5zKtXEAq
        returnRefundAccount:
          description: >-
            Requests that a refund account be returned in the response of `GET
            transfers` for any amounts refunded.
          type: boolean
          format: boolean
          example: false
          default: false
        startDate:
          description: >-
            The date when the regularly scheduled payments will start; uses
            YYYY-MM-DD or YYYYMMDD format.
          type: string
          example: '2022-09-13'
    Token:
      description: >-
        Contains the details of each requested token returned according to the
        request's filtering parameters
      type: object
      properties:
        id:
          description: >-
            Identifies a unique authorization token for a transfer, standing
            order, or account information access.
          type: string
          example: ta:3eYPU1BEKKunfmYgQuSKXFCeo851C5Y3XiZW3XA465TU:5zKtXEAq
        payload:
          $ref: '#/components/schemas/TokenPayload'
        payloadSignatures:
          type: array
          items:
            $ref: '#/components/schemas/TokenSignature'
        replacedByTokenId:
          description: The id of the latest token replacing the original `tokenId`.
          type: string
          example: ta:BzFCFwVt5zrt6rdcHJK5imf2HXbGdVdyHKpWQZbgzL5s:qXTkpBAZVbXMxk9vi
        tokenRequestId:
          description: Identifies the original token request.
          type: string
          example: rq:ej5ACWNwi1EcqBeuDPc4Z8C4Bgc:5zKtXEAq
    TokenMember:
      description: Contains information identifying the requesting Token.io member.
      required:
        - id
      type: object
      properties:
        alias:
          $ref: '#/components/schemas/Alias'
        id:
          description: The Token.io-assigned `memberId` of the TPP.
          type: string
          example: m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
    TokenOperationResult:
      description: Contains details about the canceled token.
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TokenOperationResultStatus'
        token:
          $ref: '#/components/schemas/Token'
    TokenOperationResultStatus:
      description: >-
        Specifies the success or failure of the cancellation, the condition can
        be avoided by using a PRIVILEGED signature, rather than LOW or STANDARD.
      type: string
      example: SUCCESS
      default: INVALID
      enum:
        - INVALID
        - SUCCESS
        - MORE_SIGNATURES_NEEDED
    TokenPayload:
      description: Contains the details about the token specified by id.
      type: object
      oneOf:
        - title: PIS - Payments
          properties:
            transfer:
              $ref: '#/components/schemas/TransferBody'
        - title: PIS - Standing Orders
          properties:
            standingOrder:
              $ref: '#/components/schemas/StandingOrderBody'
        - title: AIS
          properties:
            access:
              $ref: '#/components/schemas/AccessBody'
      properties:
        description:
          description: >-
            Description of the payment with the following qualifiers<ul><li>must
            not contain special characters</li> <li>length must be no greater
            than 255 characters</li><li>the description in a subsequent call
            must match description in originating request</li><li>the
            description omitted in originating request must also be omitted in
            subsequent calls</li><li>the description omitted in subsequent call
            will be replaced with `refId`, this field maps to the description in
            the bank's `consentRequest` presented to the user.<br/>**Warning** -
            If the description in a subsequent token request for
            lookups/changes/updates (retrieve, redeem, or cancel) doesn't match
            the description in the originating token request, an exception is
            thrown.
          type: string
          example: This describes the payment.
        version:
          description: Token.io API version number
          type: string
          example: '1.0'
        actingAs:
          $ref: '#/components/schemas/ActingAs'
        authorizationMetadata:
          $ref: '#/components/schemas/TokenPayloadAuthorizationMetadataEntry'
        effectiveAtMs:
          description: >-
            Sets when the token took effect in milliseconds, 1 day (24 hours) =
            8640000000, 1 hour = 36000000, and 1 minute = 60000
          type: string
          format: string
          example: '1523514000'
        endorseUntilMs:
          description: >-
            The token can be endorsed until this time in milliseconds, 1 day (24
            hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000
          type: string
          format: string
          example: '254800000'
        expiresAtMs:
          description: >-
            Token expiration date-time. Access tokens typically have a 90-day
            lifespan unless overridden by `tokenExpiration` in the original
            token request. For transfer tokens, this is a bank-optional
            expiration time. Note - Not all banks support the override of the
            90-day default
          type: string
          format: string
          example: '29671679919284586'
        from:
          $ref: '#/components/schemas/TokenMember'
        initiatorId:
          description: The `memberId` of the member that requested the token creation.
          type: string
          example: m:ej5ACWNwi1EcqBeuDPc4Z8C4Bgc:5zKtXEAq
        issuer:
          $ref: '#/components/schemas/TokenMember'
        receiptRequested:
          description: >-
            Indicates whether the TPP requested an email confirmation of the
            token request be sent to the user.
          type: boolean
          format: boolean
          example: false
          default: false
        refId:
          description: >-
            The TPP-generated reference identifier for the token. This is not to
            be confused with the `requestId`. the `refId` is typically used by
            the TPP to reconcile transactions against payments received. The
            `refId` maps to the `tppRefId` in the bank's `consentRequest`. This
            is needed to match/verify the originating token request with the
            bank's consent request.
          type: string
          example: 9htio4a1sp2akdr1aa
        to:
          $ref: '#/components/schemas/TokenMember'
        tokenRequestId:
          description: >-
            Identifies the original token request. The value returned in the
            response to the original token request as the id.
          type: string
          example: rq:ej5ACWNwi1EcqBeuDPc4Z8C4Bgc:5zKtXEAq
    TokenPayloadAuthorizationMetadataEntry:
      description: Bank-defined additional authorization properties.
      type: object
      additionalProperties:
        description: Bank-defined authorization property.
        type: string
    TokenRequest:
      description: Contains the response to the submitted request.
      type: object
      properties:
        id:
          description: >-
            Identifies the token request and is used by the TPP as `requestId`.
            Add to the base URL to define the endpoint for subsequent requests.
          type: string
          example: rq:ej5ACWNwi1EcqBeuDPc4Z8C4Bgc:5zKtXEAq
        requestOptions:
          $ref: '#/components/schemas/TokenRequestOptions'
        requestPayload:
          $ref: '#/components/schemas/TokenRequestPayload'
    TokenRequestOptions:
      description: Specifies optional request parameters.
      required:
        - to
      type: object
      properties:
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: goldbank
        from:
          $ref: '#/components/schemas/TokenMember'
        psuId:
          description: >-
            The unique identifier for the bank customer (account holder)
            providing consent to initiate the request.  Recommended to identify
            group payments initiated by the same user.
          type: string
          example: a:TASDo3124fcsmF0vsmdv4mf4mklsdwls3mcixz14fkasdv5
        receiptRequested:
          description: Requests email confirmation of the token request.
          type: boolean
          format: boolean
          example: false
          default: false
        tokenInternal:
          $ref: '#/components/schemas/TokenRequestOptionsTokenInternal'
    TokenRequestOptionsTokenInternal:
      required:
        - redirecturl
      type: object
      properties:
        redirectUrl:
          description: This URL redirects the user after bank authentication.
          type: string
          example: http://psu-redirect.com
        usingWebApp:
          description: >-
            If true, this launches the Hosted Pages credentials URL instead of
            the bank authorization URL.
          type: boolean
          format: boolean
          example: false
          default: false
    TokenRequestPayload:
      description: Contains the details for obtaining the requested token.
      type: object
      required:
        - refId
        - to
        - id
        - redirectUrl
      oneOf:
        - title: PIS - Payments
          required:
            - transferBody
          properties:
            transferBody:
              $ref: '#/components/schemas/TokenRequestPayloadTransferBody'
        - title: PIS - Standing Orders
          required:
            - standingOrderBody
          properties:
            standingOrderBody:
              $ref: '#/components/schemas/StandingOrderBody'
        - title: AIS
          required:
            - accessBody
          properties:
            accessBody:
              $ref: '#/components/schemas/TokenRequestPayloadAccessBody'
            tokenExpiration:
              description: >-
                Sets the requested UTC consent expiration for access requests in
                qualified basetime. The default is 180 days per PSD2 regulation,
                for banks in the EU. For UK banks, the tokens are long life with
                no default expiry date, the TPP must confirm every 90 days with
                the user to ensure the TPP should still be granted acces.
                Customising consent expiration/override of the default value is
                not supported by all banks. This is a particularly important
                parameter to pass to CMA9 banks to ensure an adequate custom
                consent expiry period is set for the access token upon
                successful authorisation.<br/>The JSON returned in a successful
                response payload will look something like
                this:<br/>{"Data:["Permissions":["ReadAccountsDetails","ReadBalances"],
                "ExpirationsDateTime":"2022-07-04T17:00:00.371+01:00"},
                "Risk":{}}
              type: string
              format: string
              example: '1679009247'
      properties:
        description:
          description: >-
            Description of the payment with the following
            qualifiers:<ul><li>must comply with the constraint imposed by the
            bank</li><li>length must be no greater than 255
            characters</li><li>description in a subsequent call must match
            description in originating request</li><li>description omitted in
            originating request must also be omitted in subsequent
            calls</li><li>description omitted in subsequent call will be
            replaced with `refId`</li><li>the description field maps to
            `description` in the bank's `consentRequest` presented to the
            user</li></ul>
          type: string
          example: A regular payment
        actingAs:
          $ref: '#/components/schemas/ActingAs'
        callbackState:
          description: >-
            The developer-specified string allowing the state to be persisted
            between the request and callback phases of the flow; used for the
            signature in a `GET
            /token-requests/{tokenRequestId}/token-request-result` call, in
            which the signing payload for the signature is a combination of
            `state` and `tokenId`, and validates the `tokenId` against the
            callbackstate originally sent by the TPP in the request.<br/>Note:
            The value of `callbackState` is added to the redirect URL and
            appended to the hash of the CSRF token specified by Token.
          type: string
          example: >-
            https://{callback-url}?signature=%7B%22memberId%22%3A%22m%3A3rKtsoKaE1QUti3KCWPrcSQYvJj9%
            3A5zKtXEAq%22%2C%22keyId%22%3A%22lgf2Mn0G4kkcXd5m%22%2C%22signature%22%3A%22Md-2D
            G0X9PpuOxea0iK33cAZ2Ffk6E5I1mAcJS6YywU80Q0yYBOlwvGy37dmovmH_OC7Jl8c-fxQ5gP2RWTaDw%22%7D&
            state=%257B%2522csrfTokenHash%2522%253A%2522pod1e6xornyoesn2sp%2522%257D&
            tokenId=ta%3AHWowFawmAwiuPKNdM7xjpiQktPppgK2JatsWPZAyTHcq%3A5zKtXEAq
        countries:
          description: >-
            Specifies the destination country or countries in <a
            href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1
            Alpha 2 country codes</a> used to limit the number of countries
            displayed in the Token.io Hosted Pages for user selection.
          type: array
          example:
            - DE
            - IT
            - RO
          items:
            type: string
        disableFutureDatedPaymentConversion:
          description: >-
            This field determines whether a payment can been converted from a
            single immediate payment to a future dated payment. If set to false,
            payments can be converted.
          type: boolean
          format: boolean
          example: false
          default: false
        redirectUrl:
          description: This URL redirects the user after bank authentication.
          type: string
          example: http://psu-redirect.com
        refId:
          description: >-
            The TPP-generated reference identifier for the token. This value
            should not exceed 18 characters in length.
          type: string
          example: 9htio4a1sp2akdr1aa
        to:
          $ref: '#/components/schemas/TokenMember'
        userRefId:
          description: The Token.io-generated unique reference for the user.
          type: string
          example: 3jdaWmcewrj3MX0CDS
    TokenRequestPayloadAccessBody:
      description: >-
        Contains the request payload for a token representing account
        information access permissions.
      required:
        - resourceTypeList
      type: object
      properties:
        accountResourceList:
          $ref: >-
            #/components/schemas/TokenRequestPayloadAccessBodyAccountResourceList
        resourceTypeList:
          $ref: '#/components/schemas/TokenRequestPayloadAccessBodyResourceTypeList'
        transactionHistoryDays:
          description: The number of transaction history days.
          type: integer
          format: int32
          example: 4
    TokenRequestPayloadAccessBodyAccountResourceList:
      description: >-
        Specifies requested access to one or more resources for a single account
        identified in an `accountIdentifier` object.
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: >-
              #/components/schemas/TokenRequestPayloadAccessBodyAccountResourceListAccountResource
    TokenRequestPayloadAccessBodyAccountResourceListAccountResource:
      description: Specifies the account and resource for which access is being requested.
      type: object
      properties:
        accountIdentifier:
          $ref: '#/components/schemas/AccountIdentifier'
        customerData:
          $ref: '#/components/schemas/CustomerData'
        type:
          $ref: >-
            #/components/schemas/TokenRequestPayloadAccessBodyAccountResourceType
    TokenRequestPayloadAccessBodyAccountResourceType:
      description: >-
        Specifies the type of account resource
        requested.<ul><li><b>ACCOUNT_INFO</b> – requests data about the account
        itself (open, closed, when opened, when closed,
        <i>etc</i>.)</li><li><b>ACCOUNT_BALANCE</b> – requests the current
        account balance</li><li><b>ACCOUNT_TRANSACTIONS</b> – requests
        transaction history of the
        account</li><li><b>ACCOUNT_TRANSFER_DESTINATIONS<b> – requests transfer
        destinations for online
        payments</li><li><b>ACCOUNT_FUNDS_CONFIRMATION</b> – requests
        confirmation of sufficient funds for a payment
        amount</li><li><b>ACCOUNT_STANDING_ORDERS</b> – requests scheduling and
        frequency properties for recurring payments</li></ul>
      type: string
      example: ACCOUNT_BALANCE
      default: ACCOUNT_INVALID
      enum:
        - ACCOUNT_INVALID
        - ACCOUNT_INFO
        - ACCOUNT_BALANCE
        - ACCOUNT_TRANSACTIONS
        - ACCOUNT_TRANSFER_DESTINATIONS
        - ACCOUNT_FUNDS_CONFIRMATION
        - ACCOUNT_STANDING_ORDERS
    TokenRequestPayloadAccessBodyResourceType:
      description: >-
        Specifies the account resources included in the request.<ul><li>ACCOUNTS
        – list of accounts with associated names</li><li>BALANCES – current
        balance of each requested account</li><li>TRANSACTIONS – recorded
        account activity in terms of debits and
        credits</li><li>TRANSFER_DESTINATIONS – account number and sort code,
        where applicable</li><li>STANDING_ORDERS – recorded account activity for
        the standing order</li></ul>
      type: string
      example: BALANCES
      default: INVALID
      enum:
        - INVALID
        - ACCOUNTS
        - BALANCES
        - TRANSACTIONS
        - TRANSFER_DESTINATIONS
        - STANDING_ORDERS
    TokenRequestPayloadAccessBodyResourceTypeList:
      description: >-
        Contains the account resources being requested for access related to
        multiple accounts.
      type: object
      required:
        - resources
      properties:
        resources:
          description: Specifies the account resources included in the request.
          type: array
          items:
            $ref: '#/components/schemas/TokenRequestPayloadAccessBodyResourceType'
        source:
          $ref: >-
            #/components/schemas/TokenRequestPayloadAccessBodyResourceTypeListSourceAccount
    TokenRequestPayloadAccessBodyResourceTypeListSourceAccount:
      type: object
      properties:
        accountIdentifier:
          $ref: '#/components/schemas/AccountIdentifier'
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
    TokenRequestPayloadTransferBody:
      description: Contains the financial details of the transfer.
      type: object
      required:
        - currency
        - lifetimeAmount
        - instructions
      properties:
        confirmFunds:
          description: If true, sufficient funds available for transfer are confirmed.
          type: boolean
          format: boolean
          example: false
          default: false
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        executionDate:
          description: >-
            Specifies the execution date for the transfer (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2023-02-28'
        instructions:
          $ref: '#/components/schemas/TransferInstructions'
        lifetimeAmount:
          description: >-
            The total amount, with up to four digits after the decimal point,
            transferred over the life of the token.
          type: string
          example: '10000.00'
        remittanceReference:
          description: >-
            The creditor's reference for matching an entry with the items that
            the transfer is intended to settle, such as commercial invoices in
            an accounts receivable system.
          type: string
          example: MFt6s64vn6aDyMiwBA3
        returnRefundAccount:
          description: >-
            Requests that a refund account be returned in the response of `GET
            transfers` for any amounts refunded.
          type: boolean
          format: boolean
          example: false
          default: false
        setTransferDestinationsUrl:
          description: destination.url.com
          type: string
    TokenRequestResultStatus:
      description: >-
        The current result of the token request. This field is always populated.
        <ul><li><b>PENDING</b> - consent is not authorized by the user.</li>
        <li><b>PROCESSED</b> - consent was successfully authorized by the
        user.</li><li><b>REJECTED</b> - consent has been rejected (the reason
        usually can be found in the `statusReasonInformation`
        field).</li><li><b>EXPIRED</b> - the token request has expired and
        cannot be used anymore (consent can be in any state - authorized/not
        authorized yet/rejected - at this point).</li></ul>
      type: string
      example: PROCESSED
      enum:
        - PENDING
        - PROCESSED
        - REJECTED
        - EXPIRED
    TokenSignature:
      description: Contains the respective verified digital signatures for the payload.
      type: object
      properties:
        action:
          $ref: '#/components/schemas/TokenSignatureAction'
        signature:
          $ref: '#/components/schemas/Signature'
    tokenId:
      description: >-
        Identifies a unique authorization token for a transfer, standing order
        or account information access.
      type: string
      example: tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
    statusReasonInformation:
      description: >-
        A human-readable description of the reason for the reported status,
        which may include a message from the bank, This value should not exceed
        256 characters in length.
      type: string
      example: The token request is processing.
    TokenSignatureAction:
      description: Specifies the signature validation action.
      type: string
      example: ENDORSED
      default: INVALID
      enum:
        - INVALID
        - ENDORSED
        - CANCELED
    TransferBody:
      description: >-
        Contains the request payload for a transfer token representing a
        one-time payment.
      type: object
      required:
        - currency
        - lifetimeAmount
        - instructions
      properties:
        amount:
          description: >-
            The transaction amount with up to four digits after the decimal
            point.
          type: string
          example: '10.23'
        attachments:
          description: >-
            Contains optional provider blob objects supporting the
            transfer/transaction.
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        confirmFunds:
          description: If true, sufficient funds available for transfer are confirmed.
          type: boolean
          format: boolean
          example: false
          default: false
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        executionDate:
          description: >-
            Specifies the execution date for the transfer (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2022-04-29'
        instructions:
          $ref: '#/components/schemas/TransferInstructions'
        lifetimeAmount:
          description: >-
            The total amount over the life of the token, with up to four digits
            after the decimal point.
          type: string
        remittanceReference:
          description: >-
            The creditor's reference for matching an entry with the items that
            the transfer is intended to settle, such as commercial invoices in
            an accounts receivable system.
          type: string
          example: r3VsMFt6s64vn64b66asaDyMiwB
        returnRefundAccount:
          description: >-
            Requests that a refund account be returned in the response of `GET
            transfers` for any amounts refunded.
          type: boolean
          format: boolean
          example: false
          default: false
    Balance:
      description: >-
        Relevant information associated with the monetary balance of an
        individual account.
      type: object
      properties:
        accountId:
          description: The unique identifier for the account.
          type: string
          example: a:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV4
        available:
          allOf:
            - description: The account's balance available to the account holder.
            - $ref: '#/components/schemas/Money'
        current:
          allOf:
            - description: The account's total current balance, both available and on-hold.
            - $ref: '#/components/schemas/Money'
        otherBalances:
          description: >-
            Other bank-defined balances associated with the account, where
            applicable.
          type: array
          items:
            $ref: '#/components/schemas/BalanceTypedBalance'
    BalanceTypedBalance:
      type: object
      properties:
        amount:
          allOf:
            - description: The balance currency and value.
            - $ref: '#/components/schemas/Money'
        type:
          description: A bank-defined type of other balance.
          type: string
          example: Trial
        updatedAtMs:
          description: >-
            The last update timestamp in milliseconds, 1 day (24 hours) =
            8640000000, 1 hour = 36000000, and 1 minute = 60000
          type: string
          format: string
          example: '581458935'
    BankTransactionCode:
      description: >-
        The Bank transaction code, created using the sub-elements of the
        structured code defined by <a
        href="https://www.iso.org/standard/55005.html" target="_blank">ISO
        20022</a>; it concatenates the three ISO 20022 Codes - Domain Code,
        Family Code, and SubFamiliy Code by hyphens, resulting in
        'DomainCode'-'FamilyCode'-'SubFamilyCode'; <i>e.g.</i>,
        "PMNT-RDDT-ESDD".
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/BankTransactionCodeDomain'
        proprietary:
          $ref: '#/components/schemas/BankTransactionCodeProprietary'
    BankTransactionCodeDomain:
      description: >-
        Bank transaction code using the sub-elements of the structured code
        defined by <a href="https://www.iso.org/standard/55005.html"
        target="_blank">ISO 20022</a>. It concatenates the three ISO 20022
        Codes: Domain Code, Family Code, and SubFamiliy Code with hyphens,
        resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'; <i>e.g.</i>,
        "PMNT-RDDT-ESDD".
      type: object
      properties:
        code:
          description: The domain code.
          type: string
          example: PMNT
        familyCode:
          description: The family code.
          type: string
          example: RCDT
        subFamilyCode:
          description: The sub-family code.
          type: string
          example: ESCT
    BankTransactionCodeProprietary:
      description: >-
        A bank transaction code used within a community or within a bank;
        <i>e.g.</i>, for MT94x based transaction reports.
      type: object
      properties:
        code:
          description: The bank code.
          type: string
          example: XXXX
        issuer:
          description: The issuer code.
          type: string
          example: XXXX
    RequestStatus:
      description: Specifies the status of the request.
      type: string
      example: SUCCESSFUL_REQUEST
      default: INVALID_REQUEST
      enum:
        - INVALID_REQUEST
        - SUCCESSFUL_REQUEST
        - MORE_SIGNATURES_NEEDED
    VirtualAccountTransaction:
      description: Information about the requested transaction.
      type: object
      properties:
        description:
          description: The description of the transaction.
          type: string
          example: Payment
        amount:
          allOf:
            - description: The transaction currency and value.
            - $ref: '#/components/schemas/Money'
        providerPaymentId:
          description: The virtual account provider-assigned unique transaction identifier.
          type: string
          example: 83KiRJuXm
        createdDateTime:
          description: >-
            The date and time this refund object was created (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2017-04-05T10:43:07.000+00:00'
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        localInstrument:
          description: The bank's payment service to be used for making a payment.
          type: string
          example: SEPA_INSTANT
          enum:
            - SEPA
            - SEPA_INSTANT
            - FASTER_PAYMENTS
        debtor:
          $ref: '#/components/schemas/DebtorInformation'
        creditor:
          $ref: '#/components/schemas/CreditorInformation'
        refId:
          description: Token reference id for the transaction.
          type: string
          example: 2UhwCZ3BMaEcAUK
        transferId:
          description: The transfer identifier for the transaction.
          type: string
          example: t:2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
        paymentId:
          description: The V2 payment identifier for the transaction.
          type: string
          example: pm2:2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
        refundId:
          description: The refund payment identifier for the transaction.
          type: string
          example: rf:2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
        payoutId:
          description: The payout identifier for the transaction.
          type: string
          example: po:2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
    Transaction:
      description: Information about the requested transaction.
      type: object
      properties:
        description:
          description: The description of the transaction.
          type: string
          example: Payment
        amount:
          allOf:
            - description: The transaction currency and value.
            - $ref: '#/components/schemas/Money'
        bankTransactionCode:
          $ref: '#/components/schemas/BankTransactionCode'
        bankTransactionId:
          description: The bank-assigned unique transaction identifier for the refund.
          type: string
          example: 83KiRJuXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu:3VMczyq7r7b6HwC
        createdAtMs:
          description: >-
            Specifies the time the transfer was created; timestamp (UTC) in
            milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and
            1 minute = 60000.
          type: string
          format: string
          example: '324754373'
        creditorEndpoint:
          $ref: '#/components/schemas/TransferCreditorEndpoint'
        id:
          description: The transaction identifier; transaction id.
          type: string
          example: tt:83KiRJuXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu:3VMczyq7r7b6HwC
        metadata:
          $ref: '#/components/schemas/MetadataEntry'
        providerTransactionDetails:
          $ref: '#/components/schemas/ProviderTransactionDetails'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        tokenId:
          description: Identifies the authorization token for the transfer.
          type: string
          example: tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
        tokenTransferId:
          description: The transfer identifier for the payment.
          type: string
          example: t:2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
        type:
          $ref: '#/components/schemas/TransactionType'
    MetadataEntry:
      description: The bank-defined data associated with the account.
      type: object
      additionalProperties:
        description: >-
          Bank-defined | [*] – bank-dependent fields 0 .. n; each respective
          data type is also bank-dependent (string, number, boolean, null/empty,
          object, or array).
        type: string
    TransactionStatus:
      description: >-
        Filters by transaction status. <ul> <li><b>PROCESSING</b> – This status
        indicates that the transaction is in process and that the final status
        has not been received from the bank.</li> <li><b>SUCCESS</b> – This
        status indicates that successful payment initiation has been received
        from the bank. Settlement might not be complete.</li>
        <li><b>INITIATED</b> – This status is set when the status has remained
        as PROCESSING for 30 days and cannot be updated. The transaction has
        been initiated but the result is unknown. This is the final status and
        will not be updated later.</li> <li><b>PENDING</b> – This status
        indicates that the user has successfully completed the authorization
        process at the bank and the transfer is pending redemption. This status
        is only relevant for 2-step payment flows.</li>
        <li><b>PENDING_EXTERNAL_AUTHORIZATION</b> – This status indicates that
        the user has been sent to the bank to complete the authorization
        process. If not completed within the allowed timeframe (usually around
        15 mins, but there are variations between banks) the transaction will
        expire and transition to `FAILURE_EXPIRED`. This status is only relevant
        for 1-step payment flows.</li> <li><b>FAILURE_GENERIC</b> – This status
        usually indicates a technical failure. Possibly, a failure callback was
        received from the bank, with no transaction status and no further
        information.</li> <li><b>FAILURE_PERMISSION_DENIED</b> – This status
        indicates that the user has been denied authorization at the bank This
        status is only relevant for 2-step payment flows.</li>
        <li><b>FAILURE_CANCELED</b> – This status indicates that the payment
        initiation has been cancelled before execution.</li>
        <li><b>FAILURE_EXPIRED</b> – This status indicates that the user did not
        complete the authorization process within the allowed timeframe (usually
        around 15 mins, but there are variations between banks) and the payment
        has expired.</li> <li><b>FAILURE_INSUFFICIENT_FUNDS</b> – This status
        indicates that the payment initiation request has been rejected due to
        insufficient funds.</li> <li><b>FAILURE_DECLINED</b> – This status
        indicates that the payment initiation has been rejected by the
        bank.</li> <li><b>SETTLEMENT_IN_PROGRESS</b> – This status is provided
        when a Token.io virtual account is used as the beneficiary for the
        payment, and replaces the payment initiation status. Token.io is waiting
        for the payment to reach the payee bank. No action is required; await
        the next step, <i>e.g.</i>, Token.io sends a webhook with the status
        update, or a polling call. The status will change to
        `SETTLEMENT_IN_PROGRESS` soon after Token.io receives the final status
        from the debtor bank.</li> <li><b>SETTLEMENT_COMPLETED</b> – This status
        is provided when a Token.io virtual account is used as the beneficiary
        for the payment, and replaces the payment initiation status. The payment
        has reached the payee bank and Token.io has matched the transaction in
        the TPP’s settlement account to the initiated payment. For instant
        payments, `SETTLEMENT_COMPLETED` will be achieved within 30-45 minutes
        from payment initiation, at the latest. For non-instant payments, the
        time to reach SETTLEMENT_COMPLETED will depend on the clearing period
        for the payment.</li> <li><b>SETTLEMENT_INCOMPLETE</b> – This status is
        provided when a Token.io virtual account is used as the beneficiary for
        the payment, and replaces the payment initiation status. Reconciliation
        has failed. This happens when Token.io doesn't find the corresponding
        transaction in the TPP’s settlement account
        automatically.</li></ul><br/>During settlement of a virtual accounts
        payment, the status update job will run first for up to 30 days. Payment
        will then enter into a 'final' status, normally `SUCCESS`.<br/>Once the
        status update job has run, the reconciliation job looks for matching
        inbound payments.<br/><br/>For SEPA payments:<ul><li>if a matching
        inbound payment is found within 15 days of the final payment status
        update -> `SETTLEMENT_COMPLETED`</li><li>if no matching inbound payment
        is found within 15 days of the final payment status update ->
        `SETTLEMENT_INCOMPLETE`</li></ul>For SEPA Instant payments:<ul><li>if a
        matching inbound payment is found within 1 day of the final payment
        status update -> `SETTLEMENT_COMPLETED`</li><li>if no matching inbound
        payment is found within 1 day of the final payment status update ->
        `SETTLEMENT_INCOMPLETE`</li></ul>
      type: string
      example: PROCESSING
      enum:
        - PROCESSING
        - SUCCESS
        - INITIATED
        - PENDING
        - PENDING_EXTERNAL_AUTHORIZATION
        - FAILURE_GENERIC
        - FAILURE_PERMISSION_DENIED
        - FAILURE_CANCELED
        - FAILURE_EXPIRED
        - FAILURE_INSUFFICIENT_FUNDS
        - FAILURE_DECLINED
        - SETTLEMENT_IN_PROGRESS
        - SETTLEMENT_COMPLETED
        - SETTLEMENT_INCOMPLETE
    TransactionType:
      description: Specifies the type of transaction.
      type: string
      default: INVALID_TYPE
      enum:
        - INVALID_TYPE
        - DEBIT
        - CREDIT
    TransferRefund:
      description: >-
        Contains details of the refunded amount settled, the transfer balance
        remaining, and whether initiated.
      type: object
      properties:
        remainingRefundAmount:
          allOf:
            - description: >-
                The currency and value of the original amount minus the total
                amount refunded (includes items in processing).
            - $ref: '#/components/schemas/Money'
        settledRefundAmount:
          allOf:
            - description: The currency and value of the amount successfully refunded.
            - $ref: '#/components/schemas/Money'
        transferRefundStatus:
          $ref: '#/components/schemas/TransferRefundStatus'
    TransferRefundStatus:
      description: Indicates the status of the initiated refund payout.
      type: string
      example: PARTIAL
      default: UNSET
      enum:
        - UNSET
        - NONE
        - PARTIAL
        - FULL
    Transfer:
      description: Information about each respective transfer record requested.
      type: object
      properties:
        actingAs:
          $ref: '#/components/schemas/ActingAs'
        convertedToFutureDatedPayment:
          description: >-
            Indicates whether a transfer is from an auto single immediate
            payment coinciding with the bank's out-of-operation hours was
            converted to a future dated payment
          type: boolean
          format: boolean
          example: false
          default: false
        createdAtMs:
          description: >-
            Specifies the time the transfer was created; timestamp (UTC) in
            milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and
            1 minute = 60000.
          type: string
          format: string
          example: '8921348754'
        executionDate:
          description: >-
            Specifies the execution date for the transfer (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2023-01-28'
        id:
          description: The `transferId` computed as the hash of the transfer payload.
          type: string
          example: tt:83KiRJuXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu:3VMczyq7r7b6HwC
        payload:
          $ref: '#/components/schemas/TransferPayload'
        payloadSignatures:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
        providerDetails:
          $ref: '#/components/schemas/ProviderTransferDetails'
        refund:
          $ref: '#/components/schemas/RefundInfo'
        refundDetails:
          $ref: '#/components/schemas/TransferRefund'
        source:
          $ref: '#/components/schemas/TransferDebtorEndpointResponse'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        statusReasonInformation:
          description: >-
            A human-readable description of the reason for the reported status,
            which may include a message from the bank. This value should not
            exceed 256 characters in length.
          type: string
          example: This transfer is processing.
        transactionId:
          description: The unique transaction identifier; the transaction id.
          type: string
          example: 2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
    TransferPayload:
      description: Contains the financial details of the transfer.
      type: object
      required:
        - tokenId
        - refId
        - amount
      properties:
        description:
          description: A description of the transfer.
          type: string
        amount:
          allOf:
            - description: The transaction currency and value.
            - $ref: '#/components/schemas/MoneyRequest'
        confirmFunds:
          description: Requests confirmation that sufficient funds are available.
          type: boolean
          format: boolean
          example: false
          default: false
        metadata:
          $ref: '#/components/schemas/Metadata'
        refId:
          description: >-
            The TPP-generated reference identifier for the token included in the
            original request, not to be confused with `requestId`. `RefId` is
            typically used by the TPP to reconcile transactions against payments
            received. `RefId` maps to `tppRefId` in the bank's `consentRequest`.
            It's needed to match/verify the originating token request with the
            bank's consent request. This value should not exceed 18 characters
            in length.
          type: string
          example: 9htio4a1sp2akdr1aa
        tokenId:
          description: Identifies the authorization token for the transfer.
          type: string
          example: tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
        transferDestinations:
          description: >-
            The beneficiary account specifying the transfer destination;
            <i>i.e.</i>, TPP/merchant/creditor.
          type: array
          items:
            $ref: '#/components/schemas/TransferDestination'
    TransferPayloadRequest:
      description: Contains the financial details of the transfer.
      type: object
      required:
        - tokenId
      properties:
        description:
          description: >-
            A description of the transfer.<br/>**Warning**: If the description
            in a subsequent token request for lookups/changes/updates (retrieve,
            redeem, or cancel) doesn't match the description in the originating
            token request, an exception will be thrown.
          type: string
        amount:
          allOf:
            - description: The transaction currency and value.
            - $ref: '#/components/schemas/MoneyRequest'
        confirmFunds:
          description: Requests confirmation that sufficient funds are available.
          type: boolean
          format: boolean
          example: false
          default: false
        metadata:
          $ref: '#/components/schemas/Metadata'
        refId:
          description: >-
            The TPP-generated reference identifier for the token included in the
            original request, not to be confused with `requestId`. `RefId` is
            typically used by the TPP to reconcile transactions against payments
            received. `RefId` maps to `tppRefId` in the bank's `consentRequest`.
            It's needed to match/verify the originating token request with the
            bank's consent request. This value should not exceed 18 characters
            in length.
          type: string
          example: 9htio4a1sp2akdr1aa
        tokenId:
          description: Identifies the authorization token for the transfer.
          type: string
          example: tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
        transferDestinations:
          description: >-
            The beneficiary account specifying the transfer destination;
            <i>i.e.</i>, TPP/merchant/creditor.
          type: array
          items:
            $ref: '#/components/schemas/TransferDestinationRequest'
    ChargeBearer:
      description: >-
        The bearer of the charge, if any, for international transfers. CRED -
        all charges are borne by the creditor. DEBT - all charges are borne by
        the debtor. SHAR - the parties share the charges. SLEV - each party
        bears its own charges, recommended on SEPA payments.
      type: string
      example: CRED
      default: INVALID_CHARGE_BEARER
      enum:
        - INVALID_CHARGE_BEARER
        - CRED
        - DEBT
        - SHAR
        - SLEV
    CustomerData:
      description: Specifies the legal identity information for the account.
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressInfo'
        legalNames:
          description: The legal owner name for the account.
          type: array
          example: Mr John Arthur Smith
          items:
            type: string
    CustomerDataDebtor:
      description: Specifies the legal identity information for the payer/customer.
      type: object
      required:
        - legalNames
      properties:
        address:
          $ref: '#/components/schemas/AddressInfo'
        legalNames:
          description: Legal owner name for the debtor account.
          type: array
          example: Mr John Arthur Smith
          items:
            type: string
    CustomerDataDebtorResponse:
      description: Specifies the legal identity information for the payer/customer.
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressInfo'
        legalNames:
          description: Legal owner name for the debtor account.
          type: array
          example: Mr John Arthur Smith
          items:
            type: string
    CustomerDataCreditor:
      description: Specifies the legal identity information for the payee.
      type: object
      required:
        - legalNames
      properties:
        address:
          $ref: '#/components/schemas/AddressInfo'
        legalNames:
          description: The legal owner name for the creditor account.
          type: array
          example: Mr John Arthur Smith
          items:
            type: string
    TransferDestination:
      description: >-
        The beneficiary account specifying the transfer destination, <i>i.e.</i>
        TPP/merchant/creditor bank. See <a
        href="https://developer.token.io/token_rest_api_doc/content/e-rest/bank-selection.htm#Restricted"
        target="_blank">Restricting Beneficiary Accounts</a>.
      required:
        - customerData
        - sepa
        - sepaInstant
        - fasterPayments
        - plusgiro
        - bankgiro
        - elixir
        - euDomesticNonEuro
        - euDomesticNonEuroInstant
      properties:
        customerData:
          $ref: '#/components/schemas/CustomerDataCreditor'
        type:
          $ref: '#/components/schemas/TransferDestinationType'
      oneOf:
        - title: sepa
          properties:
            sepa:
              $ref: '#/components/schemas/TransferDestinationSepa'
        - title: sepaInstant
          properties:
            sepaInstant:
              $ref: '#/components/schemas/TransferDestinationSepaInstant'
        - title: fasterPayments
          properties:
            fasterPayments:
              $ref: '#/components/schemas/TransferDestinationFasterPayments'
        - title: elixir
          properties:
            elixir:
              $ref: '#/components/schemas/TransferDestinationElixir'
        - title: euDomesticNonEuro
          properties:
            euDomesticNonEuro:
              $ref: '#/components/schemas/TransferDestinationEuDomesticNonEuro'
        - title: euDomesticNonEuroInstant
          properties:
            euDomesticNonEuroInstant:
              $ref: '#/components/schemas/TransferDestinationEuDomesticNonEuroInstant'
        - title: bankgiro
          properties:
            bankgiro:
              $ref: '#/components/schemas/TransferDestinationBankgiro'
        - title: plusgiro
          properties:
            plusgiro:
              $ref: '#/components/schemas/TransferDestinationPlusgiro'
        - title: token
          properties:
            token:
              $ref: '#/components/schemas/TransferDestinationToken'
    TransferDestinationRequest:
      description: >-
        The beneficiary account specifying the transfer destination, <i>i.e.</i>
        TPP/merchant/creditor bank. See <a
        href="https://developer.token.io/token_rest_api_doc/content/e-rest/bank-selection.htm#Restricted"
        target="_blank">Restricting Beneficiary Accounts</a>.
      properties:
        customerData:
          $ref: '#/components/schemas/CustomerData'
        type:
          $ref: '#/components/schemas/TransferDestinationType'
      oneOf:
        - title: sepa
          properties:
            sepa:
              $ref: '#/components/schemas/TransferDestinationSepa'
        - title: sepaInstant
          properties:
            sepaInstant:
              $ref: '#/components/schemas/TransferDestinationSepaInstant'
        - title: fasterPayments
          properties:
            fasterPayments:
              $ref: '#/components/schemas/TransferDestinationFasterPayments'
        - title: elixir
          properties:
            elixir:
              $ref: '#/components/schemas/TransferDestinationElixir'
        - title: euDomesticNonEuro
          properties:
            euDomesticNonEuro:
              $ref: '#/components/schemas/TransferDestinationEuDomesticNonEuro'
        - title: euDomesticNonEuroInstant
          properties:
            euDomesticNonEuroInstant:
              $ref: '#/components/schemas/TransferDestinationEuDomesticNonEuroInstant'
        - title: bankgiro
          properties:
            bankgiro:
              $ref: '#/components/schemas/TransferDestinationBankgiro'
        - title: plusgiro
          properties:
            plusgiro:
              $ref: '#/components/schemas/TransferDestinationPlusgiro'
        - title: token
          properties:
            token:
              $ref: '#/components/schemas/TransferDestinationToken'
    TransferDestinationBankgiro:
      title: bankgiro
      allOf:
        - description: The identifier for domestic bank accounts in Sweden.
        - $ref: '#/components/schemas/BankGiroAccount'
    TransferDestinationCustom:
      description: The custom transfer destination.
      type: object
      properties:
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: ob-modelo
        payload:
          description: The transfer payload.
          type: string
          example: sdfjds12-f85-46b0-8058-343dek543grt
    TransferDestinationElixir:
      title: elixir
      description: The interbank payment system in Poland.
      required:
        - accountNumber
      type: object
      properties:
        accountNumber:
          description: >-
            The payee's Elixir-registered bank account number. You can also
            enter the iban in this field for iban accounts.
          type: string
          example: FRAX82783423
    TransferDestinationEuDomesticNonEuroInstant:
      title: euDomesticNonEuroInstant
      description: >-
        The instant payment system within a country using that country's
        non-Euro domestic currency. An IBAN account will require an iban and an
        optional bic, a BBAN account will require a bban and an optional bic,
        and a Clearing Number account will require a bban and a clearingNumber.
      oneOf:
        - $ref: '#/components/schemas/EUIbanAccount'
        - $ref: '#/components/schemas/BbanAccount'
        - $ref: '#/components/schemas/ClearingNumberAccount'
    TransferDestinationEuDomesticNonEuro:
      title: euDomesticNonEuro
      description: >-
        The payment system within a country using that country's non-Euro
        domestic currency. An IBAN account will require an iban and an optional
        bic, a BBAN account will require a bban and an optional bic, and a
        Clearing Number account will require a bban and a clearingNumber.
      oneOf:
        - $ref: '#/components/schemas/EUIbanAccount'
        - $ref: '#/components/schemas/BbanAccount'
        - $ref: '#/components/schemas/ClearingNumberAccount'
    TransferDestinationFasterPayments:
      title: fasterPayments
      allOf:
        - description: >-
            The interbank payment system in the UK, Full Payment Submission
            (FPS).
        - $ref: '#/components/schemas/FasterPaymentsAccount'
    TransferDestinationPlusgiro:
      title: plusgiro
      allOf:
        - description: >-
            The domestic transaction clearing system in Sweden. The credit
            transfer function, which is part of <a href="https://www.nordea.com"
            target="_blank">Nordea</a>, and used for mediating payments between
            accounts held by companies and individuals.
        - $ref: '#/components/schemas/PlusGiroAccount'
    TransferDestinationSepa:
      title: sepa
      allOf:
        - description: >-
            The Single Euro Payments Area (SEPA), for bank transfers denominated
            in Euro. This consists of the 27 member states of the European
            Union, the four member states of the European Free Trade Association
            (Iceland, Liechtenstein, Norway and Switzerland) and the UK.
        - $ref: '#/components/schemas/SepaAccount'
    TransferDestinationSepaInstant:
      title: sepaInstant
      allOf:
        - description: >-
            SEPA Instant Credit, the instant payment processing system with
            funds made available immediately for the recipient.
        - $ref: '#/components/schemas/SepaInstantAccount'
    TransferDestinationToken:
      title: token
      description: >-
        The primary account number. The cCard identifier found on payment cards,
        such as credit and debit cards, as well as stored-value cards, gift
        cards and other similar cards, somtimes referred to as a bank card
        number.
      type: object
      properties:
        accountId:
          description: >-
            The bank account identifier for a linked account used by Token.io's
            Bank Integration Account Linking Service.
          type: string
        memberId:
          description: The Token.io-generated member id for the user/account holder.
          type: string
          example: m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
    TransferDestinationType:
      title: type
      description: Specifies the type of transfer destination.
      type: string
      example: BUSINESS
      default: UNKNOWN
      enum:
        - UNKNOWN
        - BUSINESS
        - PERSONAL
    TransferDebtorEndpoint:
      description: Contains information about the payer account.
      type: object
      required:
        - accountIdentifier
      properties:
        accountIdentifier:
          $ref: '#/components/schemas/AccountIdentifier'
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: ob-iron
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long.
          type: string
          example: BOFIIE2D
        customerData:
          $ref: '#/components/schemas/CustomerDataDebtor'
    TransferDebtorEndpointResponse:
      description: Contains information about the payer account.
      type: object
      required:
        - accountIdentifier
      properties:
        accountIdentifier:
          $ref: '#/components/schemas/AccountIdentifier'
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: ob-iron
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long.
          type: string
          example: BOFIIE2D
        customerData:
          $ref: '#/components/schemas/CustomerDataDebtorResponse'
    TransferCreditorEndpoint:
      description: Contains information about the payee account.
      type: object
      required:
        - accountIdentifier
      properties:
        accountIdentifier:
          $ref: '#/components/schemas/AccountIdentifier'
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: ob-iron
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long.
          type: string
          example: BOFIIE2D
        customerData:
          $ref: '#/components/schemas/CustomerDataCreditor'
    TransferInstructions:
      description: Contains the transfer instructions for each payment.
      type: object
      required:
        - transferDestinations
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        source:
          $ref: '#/components/schemas/TransferDebtorEndpoint'
        transferDestinations:
          description: >-
            The beneficiary account specifying the transfer destination,
            <i>i.e.</i>, TPP/merchant/creditor bank account. See <a
            href="https://developer.token.io/token_rest_api_doc/content/e-rest/bank-selection.htm#Restricted"
            target="_blank"> Restricting Beneficiary Accounts</a> for guidance
            on adding, modifying, and deleting accounts.
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TransferDestination'
    Metadata:
      description: Information governing or otherwise related to the transfer instructions.
      type: object
      properties:
        chargeBearer:
          $ref: '#/components/schemas/ChargeBearer'
        providerTransferMetadata:
          $ref: '#/components/schemas/ProviderTransferMetadata'
        purposeCode:
          description: >-
            The <a href="https://www.iso.org/standard/55005.html"
            target="_blank">ISO 20022</a> external purpose code. Purpose Codes
            are four letter codes which are carried across the payment chain,
            providing information to all users in the payments chain to indicate
            the reason a payment is being made. Purpose Codes are one of the
            policy areas of Enhanced Data that can deliver the benefits of the
            ISO 20022 payment messaging standard.
          type: string
          example: CBLK
        ultimateCreditor:
          description: The ultimate party to which an amount of money is due.
          type: string
          example: ACME GmbH
        ultimateDebtor:
          description: >-
            The ultimate party that owes that owes money to the (ultimate)
            creditor.
          type: string
          example: John Smith
    EventType:
      description: Specifies the types of webhook currently configured.
      type: string
      example: PAYMENT_STATUS_CHANGED
      default: INVALID
      enum:
        - INVALID
        - TRANSFER_STATUS_CHANGED
        - BULK_TRANSFER_STATUS_CHANGED
        - STANDING_ORDER_STATUS_CHANGED
        - REFUND_STATUS_CHANGED
        - PAYMENT_STATUS_CHANGED
        - VRP_STATUS_CHANGED
        - VRP_CONSENT_STATUS_CHANGED
        - BANK_AIS_OUTAGE_STATUS_CHANGED
        - BANK_SIP_OUTAGE_STATUS_CHANGED
    Config:
      description: Specifies the types of webhook currently configured.
      required:
        - type
        - url
      type: object
      properties:
        type:
          type: array
          items:
            $ref: '#/components/schemas/EventType'
        url:
          description: Specifies the webhook URL that receives the status updates.
          type: string
          example: your-webhook-url.com
    CancelTokenResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TokenOperationResult'
    ConfirmFundsRequest:
      description: Requests confirmation of sufficient funds available.
      type: object
      properties:
        amount:
          allOf:
            - description: The currency and value of the funds available.
            - $ref: '#/components/schemas/Money'
    ConfirmFundsResponse:
      description: >-
        A flag indicating whether funds are available or not. If set to `true`,
        funds are available for transfer.
      type: object
      properties:
        fundsAvailable:
          description: >-
            A flag indicating whether funds are available or not. If set to
            `true`, funds are available for transfer.
          type: boolean
          format: boolean
          example: false
          default: false
    CreateSubTppRequest:
      type: object
      required:
        - name
        - domain
        - merchant
      properties:
        domain:
          description: >-
            The fully qualified domain name of the sub-TPP, also referred to as
            the absolute domain name. This specifies an exact location in the
            tree hierarchy of the Domain Name System (DNS). It must include all
            domain levels, including the top-level domain and the root zone.
          type: string
          example: somehost.example.com
        logo:
          description: >-
            This field specifies the image file containing the sub-TPP's logo as
            a byte array (click <a
            href="https://thewebdev.info/2021/08/01/how-to-convert-a-file-input-value-to-a-byte-array-with-javascript"
            target="_blank">here</a> for the JavaScript FileReader instance
            needed to convert the selected file into a byte array).
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
          example: b0Y5cVl6aDc3RkE5blZyQ24yamlh
        merchant:
          $ref: '#/components/schemas/member.Merchant'
        name:
          description: The recognised business name or DBA of the sub-TPP.
          type: string
          example: Sub-TPP Business Ltd
        parentSubTppId:
          description: The Token.io-generated identifier for the parent sub-TPP.
          type: string
          example: 6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s
    CreateSubTppResponse:
      type: object
      properties:
        subTppId:
          description: >-
            The Token.io-generated identifier for the sub-TPP used by the
            reseller as the `actingAs.refId` in token requests.
          type: string
          example: 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
    CreateTransferRequest:
      title: >-
        This field contains the request payload for a new one-time payment based
        on the response to a `POST /token-requests` call.
      type: object
      required:
        - payload
      properties:
        payload:
          $ref: '#/components/schemas/TransferPayloadRequest'
    CreateTransferResponse:
      type: object
      properties:
        authorizationDetails:
          $ref: '#/components/schemas/ExternalAuthorizationDetails'
        transfer:
          $ref: '#/components/schemas/Transfer'
    CredentialFields:
      description: Contains information used in embedded authentication flows.
      type: object
      properties:
        fields:
          description: Defines the credential properties.
          type: array
          items:
            $ref: '#/components/schemas/CredentialField'
    DeleteSubTppResponse:
      description: No data returned in the successful response.
      type: object
    DeleteWebhookConfigResponse:
      description: No data returned in the successful response.
      type: object
    GetAccountResponse:
      description: Operation completed successfully.
      type: object
      properties:
        account:
          $ref: '#/components/schemas/Account'
    GetAccountsResponse:
      description: Each object represents a unique bank account.
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    GetBalanceResponse:
      type: object
      properties:
        balance:
          $ref: '#/components/schemas/Balance'
        status:
          $ref: '#/components/schemas/RequestStatus'
    GetBalancesResponse:
      type: object
      properties:
        response:
          description: >-
            An array of objects containing balance information for each account
            requested.
          type: array
          items:
            $ref: '#/components/schemas/GetBalanceResponse'
    GetBankStatusResponse:
      type: object
      properties:
        bankStatus:
          $ref: '#/components/schemas/GetBankStatusResponseBankStatus'
    GetBankStatusResponseBankStatus:
      description: >-
        Contains information on the current status of the Token.io-connected
        bank.
      type: object
      properties:
        aisStatus:
          description: >-
            Current state of this bank's AIS support:<ul><li>LIVE – accepting
            calls</li><li>DOWN – connection interrupted, not accepting
            calls</li><li>NO CALLS – bank does not support AIS</li></ul>
          type: string
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: ob-hsbc
        lastUpdatedAt:
          description: >-
            Time since the latest status reported in milliseconds, 1 day (24
            hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
          type: string
          example: '27811843'
        pisStatus:
          description: >-
            Current state of this bank's PIS support:<ul><li>LIVE – accepting
            calls</li><li>DOWN – connection interrupted, not accepting
            calls</li><li>NO CALLS – bank does not support PIS</li></ul>
          type: string
        serverStatus:
          description: >-
            Current status of the bank server:<ul><li>AVAILABLE
            (up)</li><li>UNAVAILABLE (down)</li><li>UNKNOWN</li></ul>
          type: string
          example: AVAILABLE
    GetBanksResponse:
      type: object
      properties:
        banks:
          description: Contains information for each bank matching the request criteria.
          type: array
          items:
            $ref: '#/components/schemas/BankV1'
        paging:
          $ref: '#/components/schemas/Paging'
        rank:
          description: Sort banks by the value of rank.
          type: integer
          example: 1
        bankSubGroup:
          description: Filters for banks that are part of the bank sub-group specified.
          type: string
          example:
            - CMM Grand
            - Banque Populaire
            - La Banque
    GetBanksCountriesResponse:
      type: object
      properties:
        countries:
          description: >-
            The list of <a href="https://www.iso.org/obp/ui/#search"
            target="_blank">ISO 3166-1 Alpha 2 country codes</a> in upper case.
          type: array
          items:
            type: string
            example: RO, AT, DE, FR
    GetBanksStatusResponse:
      description: >-
        Contains information on the current status of the Token.io-connected
        bank.
      type: object
      properties:
        banksStatus:
          type: array
          items:
            $ref: '#/components/schemas/GetBanksStatusResponseBankStatus'
    BankV1:
      type: object
      properties:
        bankGroup:
          description: The name of the banking group in which this bank holds membership.
          type: string
          example: XYZ-Bank-Group
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long.
          type: string
          example: BOFIIE2D
        countries:
          description: >-
            A list of <a href="https://www.iso.org/obp/ui/#search"
            target="_blank">ISO 3166-1 Alpha 2 country codes</a> in upper case,
            in which this bank operates.
          type: array
          example:
            - DE
            - IT
            - GB
          items:
            type: string
        credentialFields:
          description: Contains information used in embedded authentication flows.
          type: array
          items:
            $ref: '#/components/schemas/CredentialField'
        fieldsFormatInformation:
          description: >-
            Contains bank-dependent formatting constraints indicating allowable
            characters, if any.
          type: array
          items:
            $ref: '#/components/schemas/FieldFormatInformation'
        fullLogoUri:
          description: The URI of the location of the full size bank icon.
          type: string
          example: >-
            https://s3-us-west-2.amazonaws.com/tokenio-assets/1.0.0/logos/gold/gold_full.png
        id:
          description: The Token.io bank identifier.
          type: string
          example: ob-modelo
        identifier:
          description: >-
            The optional identifier for the bank. This is not guaranteed to be
            unique across all banks.
          type: string
          example: BLZ
        logoUri:
          description: The URI of the location of the square bank avatar icon.
          type: string
          example: >-
            https://s3-us-west-2.amazonaws.com/tokenio-assets/1.0.0/logos/gold/gold_square.png
        mandatoryFields:
          $ref: '#/components/schemas/MandatoryFields'
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow'
        name:
          description: The commonly recognised name of the bank.
          type: string
          example: Gold Bank
        openBankingStandard:
          $ref: '#/components/schemas/OpenBankingStandard'
        operationalTime:
          description: >-
            Specifies the bank’s days and hours of operation in a normal week.
            Does not take into account bank-specific public holidays, which may
            or may not be considered out-of-operation time.
          type: string
          example: MON to FRI, 00:00 to 24:00 GMT+1
        provider:
          description: Open Banking SaaS adapter or provider.
          type: string
          example: Token.io
        requiresExternalAuth:
          description: >-
            The bank connection requires external authorization for creating
            transfers.
          type: boolean
          format: boolean
          example: false
          default: false
        requiresOneStepPayment:
          description: >-
            The bank connection only supports immediate redemption of transfer
            tokens.
          type: boolean
          format: boolean
          example: false
          default: false
        supportedTransferDestinationTypes:
          description: Payment methods/rails supported by the bank.
          type: array
          example:
            - SWIFT
            - FASTER_PAYMENTS
            - SEPA
          items:
            type: string
            oneOf:
              - $ref: '#/components/schemas/TransferDestinationBankgiro'
              - $ref: '#/components/schemas/TransferDestinationCustom'
              - $ref: '#/components/schemas/TransferDestinationElixir'
              - $ref: '#/components/schemas/TransferDestinationEuDomesticNonEuro'
              - $ref: >-
                  #/components/schemas/TransferDestinationEuDomesticNonEuroInstant
              - $ref: '#/components/schemas/TransferDestinationFasterPayments'
              - $ref: '#/components/schemas/TransferDestinationPlusgiro'
              - $ref: '#/components/schemas/TransferDestinationSepa'
              - $ref: '#/components/schemas/TransferDestinationSepaInstant'
              - $ref: '#/components/schemas/TransferDestinationToken'
              - $ref: '#/components/schemas/TransferDestinationType'
        supportsBalance:
          description: The bank connection supports the retrieval of balances.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsFundsConfirmation:
          description: The bank connection supports confirmation of available funds.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsAccountInformation:
          description: >-
            The bank connection supports retrieval of information through
            Account Information Services (AIS).
          type: boolean
          format: boolean
          example: false
          default: false
        supportsReceivePayment:
          description: The bank connection supports the receipt of payments.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsReturnRefundAccount:
          description: The bank connection supports the return of refunds.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsScheduledPayment:
          description: The bank connection supports future dated payments.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsSendPayment:
          description: The bank connection supports payment initiation.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsStandingOrder:
          description: The bank connection supports scheduled recurring payments.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsTransactionsDateFilter:
          description: >-
            The bank connection supports specifying startDate and endDate for
            filtering transaction lookups.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsSinglePayment:
          description: The bank connection supports single immediate payments.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsVariableRecurringPayment:
          description: The bank connection supports variable recurring payments.
          type: boolean
          format: boolean
          example: false
          default: false
        transactionHistoryLimit:
          description: >-
            Defines the number of transaction history records allowed per page,
            -1 (unlimited) or a positive integer (record limit).
          type: integer
          format: int32
          example: 65
          default: -1
    GetBanksStatusResponseBankStatus:
      description: >-
        Contains information on the current status of each Token.io-connected
        bank.
      type: object
      properties:
        aisStatus:
          description: >-
            Current state of this bank's AIS support:<ul><li>LIVE – accepting
            calls</li><li>DOWN – connection interrupted, not accepting
            calls</li><li>NO CALLS – bank does not support AIS</li></ul>
          type: string
          example: LIVE
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: goldbank
        lastUpdatedAt:
          description: >-
            Time since the latest status reported in milliseconds, 1 day (24
            hours) = 8640000000, 1 hour = 36000000, and 1 minute = 60000.
          type: string
          example: '13593742'
        pisStatus:
          description: >-
            Current status of the bank's PIS service:<ul><li>LIVE – accepting
            calls</li><li>DOWN – connection interrupted, not accepting
            calls</li><li>NO CALLS – bank does not support PIS</li></ul>
          type: string
          example: LIVE
        serverStatus:
          description: >-
            Current status of the bank server:<ul><li>AVAILABLE
            (up)</li><li>UNAVAILABLE (down)</li><li>UNKNOWN</li></ul>
          type: string
          example: AVAILABLE
    GetTokenRequestResultWithStatusResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/TokenRequestPayloadResponse'
        - $ref: '#/components/schemas/StandingOrderBodyResponse'
        - $ref: '#/components/schemas/TokenRequestAccessBodyResponse'
    TokenRequestPayloadResponse:
      title: PIS - Payments
      description: Contains the details of the transfer response.
      type: object
      required:
        - status
      properties:
        transferId:
          description: >-
            The id of the transfer sent in the `POST /transfers` response and/or
            included in a respective `GET /transfers` response. This is
            populated for transfer token requests only, it is present if a
            transfer resource is created.
          type: string
          example: t:2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
        tokenId:
          $ref: '#/components/schemas/tokenId'
        signature:
          $ref: '#/components/schemas/Signature'
        status:
          $ref: '#/components/schemas/TokenRequestResultStatus'
        statusReasonInformation:
          $ref: '#/components/schemas/statusReasonInformation'
    StandingOrderBodyResponse:
      title: PIS - Standing Orders
      description: Contains the details of the standing order response.
      type: object
      required:
        - status
      properties:
        standingOrderSubmissionId:
          description: >-
            The unique id of the standing order submission. This is populated
            for standing order token requests only, it is present if a standing
            order submission resource is created
          type: string
          example: >-
            so:89DSFAkvdfgreJuXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu:3VMczfjkewrbniu5667
        tokenId:
          $ref: '#/components/schemas/tokenId'
        signature:
          $ref: '#/components/schemas/Signature'
        status:
          $ref: '#/components/schemas/TokenRequestResultStatus'
        statusReasonInformation:
          $ref: '#/components/schemas/statusReasonInformation'
    TokenRequestAccessBodyResponse:
      title: AIS
      description: Contains the details of the access request response.
      type: object
      required:
        - status
      properties:
        tokenId:
          $ref: '#/components/schemas/tokenId'
        signature:
          $ref: '#/components/schemas/Signature'
        status:
          $ref: '#/components/schemas/TokenRequestResultStatus'
        statusReasonInformation:
          $ref: '#/components/schemas/statusReasonInformation'
    GetTokenResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/Token'
    GetTokensResponse:
      type: object
      properties:
        offset:
          description: The offset of the first item returned in the collection.
          type: string
          example: LerV6Jmex
        tokens:
          description: >-
            Contains the details of each requested token returned according to
            the request's filtering parameters.
          type: array
          items:
            $ref: '#/components/schemas/Token'
    GetTransactionResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RequestStatus'
        transaction:
          $ref: '#/components/schemas/Transaction'
    GetTransactionsResponse:
      type: object
      properties:
        offset:
          description: The offset of the first item returned in the collection.
          type: string
          example: LerV6Jmex
        status:
          $ref: '#/components/schemas/RequestStatus'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    GetVirtualAccountTransactionResponse:
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/VirtualAccountTransaction'
    GetVirtualAccountTransactionsResponse:
      type: object
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/VirtualAccountTransaction'
    GetTransferResponse:
      type: object
      properties:
        transfer:
          $ref: '#/components/schemas/Transfer'
    GetTransfersResponse:
      type: object
      properties:
        offset:
          description: The offset of the first item returned in the collection.
          type: string
          example: LerV6Jmex
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
    GetWebhookConfigResponse:
      description: Specifies details of the webhook.
      type: object
      properties:
        config:
          $ref: '#/components/schemas/Config'
    InitiateBankAuthorizationRequest:
      description: Contains the consent information for the original request.
      type: object
      properties:
        consentAccepted:
          description: >-
            This flags whether the user's consent for the original token request
            was accepted by the bank.
          type: boolean
          format: boolean
          example: false
          default: false
        credentials:
          $ref: >-
            #/components/schemas/InitiateBankAuthorizationRequestCredentialsEntry
        useCredentialFlow:
          description: >-
            If true, this triggers the credential flow. The credentials map must
            be populated if required by the bank (see `credentialFields` in the
            response to `GET /banks`). Otherwise, empty credentials are used.
          type: boolean
          format: boolean
          example: false
          default: false
        useWebappCredentialsFlow:
          description: >-
            When useWebAppCredentialsFlow is set to true and bank's flow
            includes embedded steps, these steps are handled by Token.io's
            Hosted Pages, rather than by the customer's own pages.
          type: boolean
          format: boolean
          example: false
          default: false
    InitiateBankAuthorizationRequestCredentialsEntry:
      description: Maps a bank-defined credential id string to a value.
      type: object
      additionalProperties:
        description: Credential id mapped to a value.
        type: string
    InitiateBankAuthorizationResponse:
      type: object
      oneOf:
        - title: Fields
          properties:
            fields:
              $ref: '#/components/schemas/CredentialFields'
        - title: Redirect url
          properties:
            redirectUrl:
              description: This URL redirects the user after bank authentication.
              type: string
              example: http://psu-redirect.com
        - title: SCA status
          properties:
            status:
              $ref: '#/components/schemas/ScaStatus'
      properties:
        oauthState:
          description: >-
            This State parameter generated within Token in the response. It is
            an optional field.
          type: string
    OnBankAuthCallbackRequest:
      description: Contains the callback query parameters.
      type: object
      properties:
        query:
          description: >-
            The URL-encoded string of all query parameters returned by the bank
            in the callback received by the client.
          type: string
          example: param1=value1&param2=value2
    OnBankAuthCallbackResponse:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/CredentialFields'
    RetrieveSubTppChildrenResponse:
      description: Contains each sub-TPP member onboarded by the reseller.
      type: object
      properties:
        subTpps:
          type: array
          items:
            $ref: '#/components/schemas/member.SubTpp'
    member.Merchant:
      type: object
      required:
        - merchantJurisdiction
        - legalEntityName
        - companyRegistrationNumber
        - primaryUseCase
        - iban
      properties:
        merchantJurisdiction:
          description: >-
            The 'merchantJurisdiction' field specifies the jurisdiction in which
            the merchant operates. Previously, this field was referred to as the
            'domicile country'.
          type: string
          example: DE
        legalEntityName:
          description: Full name of the merchant legal entity.
          type: string
          example: Test Merchant Entity Name
        companyRegistrationNumber:
          description: Company registration number of merchant legal entity.
          type: string
          example: 123456789
        primaryUseCase:
          description: >-
            Merchant primary use case. Possible values include: AIS: Accounting
            package integration, AIS: Cash flow management, AIS: Credit risk
            analysis, AIS: Customer onboarding / verification, AIS: Personal
            finance management, PIS: eCommerce merchant payment, PIS: Funding an
            account, PIS: In store merchant payment, PIS: Paying a bill, PIS:
            Paying off debt
          type: string
          example: 'AIS: Accounting package integration'
        iban:
          description: >-
            The IBAN of the bank where the payments are settled. The IBAN used
            will depend on the specific setup for each TPP/sub-TPP. </br>For
            example, this will be:<ul><li>The sub-TPP's IBAN for cases where
            settlement is to the merchant.</li><li>The TPP's IBAN when the
            sub-TPP settles directly with the TPP.</li><li>A proxy for
            jurisdictions involved in the transaction.</li></ul>Token.io checks
            the jurisdiction of the bank account and, where possible, confirms
            that the name on the account is valid; this name can be either the
            client's or the merchant's. </br>You must use a valid IBAN if you're
            testing in Sandbox.
          type: string
          example: DE0000000000000000000
        bic:
          description: >-
            BIC of merchant’s recipient bank account. You must use a valid IBAN
            if you're testing in sandbox.
          type: string
          example: BOFIIE2D
    member.SubTpp:
      description: Contains the sub-TPP details.
      type: object
      properties:
        childSubTppIds:
          description: The list of sub-TPP ids returned.
          type: array
          items:
            type: string
            example: >-
              ["8d54f066-c14a-47c0-b58b-fec6b0ed6b4c","3d46h823-g02s-20m5-k19c-kes4ekkc2p5x","0c55fwgs-s1e2-dloa-0j36-sat2b9kw4s8g"]
        createdAt:
          description: >-
            Represents the creation date for the sub-TPP, in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format.
          type: string
          format: string
          example: '2022-09-22T17:00:00.000Z'
        domain:
          description: >-
            The fully qualified domain name of the sub-TPP, also referred to as
            an absolute domain name. This specifies an exact location in the
            tree hierarchy of the Domain Name System (DNS). It must include all
            domain levels, including the top-level domain and the root zone.
          type: string
          example: somehost.example.com
        id:
          description: >-
            The Token.io-generated `subTPPId` used by the reseller as
            `actingAs.refId` in token requests to identify the sub-TPP.
          type: string
          example: 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
        logo:
          description: >-
            Specifies the image file containing the sub-TPP's logo as a byte
            array. Click <a href="https://gist.github.com/taterbase/2784890"
            target="_blank">here</a> for the JavaScript `fromCharCode` function
            needed to convert the byte array to a UTF-8 string.
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        memberId:
          description: The Token.io-generated member id for the reseller.
          type: string
          example: m:213xyzabc3453434
        merchant:
          $ref: '#/components/schemas/member.Merchant'
        name:
          description: The recognised business name or DBA of the sub-TPP.
          type: string
          example: Sub-TPP Business Ltd
        parentSubTppId:
          description: The Token.io-generated unique identifier for the parent sub-TPP.
          type: string
          example: 8d54f066-c14a-47c0-b58b-fec6b0ed6b4c
        restrictedCountries:
          description: >-
            A list of <a href="https://www.iso.org/obp/ui/#search"
            target="_blank">ISO 3166-1 Alpha 2 country codes</a> in upper case,
            in which this bank operates.
          type: array
          items:
            type: string
          example:
            - DE
            - FR
            - GB
        status:
          $ref: '#/components/schemas/member.SubTpp.Status'
        statusReasonInformation:
          description: >-
            A human-readable description of the reason for the reported status,
            which may include a message from the bank. This value should not
            exceed 256 characters in length.
          type: string
          example: This sub-TPP has been activated.
        updatedAt:
          description: >-
            The string representing the last update for the sub-TPP details, in
            <a href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format.
          type: string
          format: string
          example: '2022-09-22T17:00:00.000Z'
    member.SubTpp.Status:
      type: string
      example: ACTIVATED
      default: INVALID_STATUS
      enum:
        - INVALID_STATUS
        - ACTIVATED
        - REJECTED
        - AWAITING_APPROVAL
        - DEACTIVATED
    RetrieveSubTppResponse:
      type: object
      properties:
        subTpp:
          $ref: '#/components/schemas/member.SubTpp'
    RetrieveSubTppsResponse:
      type: object
      properties:
        offset:
          description: The offset of the first item returned in the collection.
          type: string
          example: LerV6Jmex
        subTpps:
          description: Contains each sub-TPP member onboarded by the reseller.
          type: array
          items:
            $ref: '#/components/schemas/member.SubTpp'
    SetWebhookConfigRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/Config'
    SetWebhookConfigResponse:
      description: No data included or required in the response.
      type: object
    StoreTokenRequestRequest:
      description: >-
        Specifies the information needed to request a transfer, standing order
        or access token.
      type: object
      required:
        - requestPayload
      properties:
        requestOptions:
          $ref: '#/components/schemas/TokenRequestOptions'
        requestPayload:
          $ref: '#/components/schemas/TokenRequestPayload'
    StoreTokenRequestResponse:
      type: object
      properties:
        tokenRequest:
          $ref: '#/components/schemas/TokenRequest'
    RefundResponse:
      type: object
      properties:
        refund:
          $ref: '#/components/schemas/Refund'
    RefundsResponse:
      type: object
      properties:
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
        paging:
          $ref: '#/components/schemas/PagingInfo'
    PayoutResponse:
      type: object
      properties:
        payout:
          $ref: '#/components/schemas/Payout'
    PayoutsResponse:
      type: object
      properties:
        payouts:
          type: array
          items:
            $ref: '#/components/schemas/Payout'
        paging:
          $ref: '#/components/schemas/PagingInfo'
    UploadKeyAndCertificateResponse:
      type: object
      properties:
        keyId:
          description: The unique identifier for the key.
          type: string
          example: XXXXXXX
    PagingInfo:
      type: object
      properties:
        limit:
          description: >-
            The limit (maximum number of records to return) that was sent in the
            request. If the actual number of returned records is less then the
            limit, there are no more records left to fetch. <br/>The maximum
            allowed limit is 200. If the passed limit is bigger than this, it
            will be set to 200.
          type: integer
          format: int32
        offset:
          description: Offset for the next page.
          type: string
          example: LerV6Jmex
    Amount:
      description: The transaction amount and currency.
      required:
        - currency
        - value
      type: object
      properties:
        value:
          description: >-
            The transaction amount with up to four digits after the decimal
            point.
          type: string
          example: '10.23'
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
    RefundDebtorInformation:
      description: The debtor information. Account information (one of) is required.
      allOf:
        - oneOf:
            - $ref: '#/components/schemas/SepaAccount'
            - $ref: '#/components/schemas/FasterPaymentsAccount'
        - type: object
          properties:
            name:
              description: The owner name for the debtor account.
              type: string
              example: John Smith
            ultimateDebtorName:
              description: The ultimate debtor name.
              type: string
              example: John Smith
            address:
              $ref: '#/components/schemas/Address'
    Address:
      description: Address
      type: object
      properties:
        addressLine:
          type: array
          items:
            type: string
            example: The Coach House
        streetName:
          description: Street number
          type: string
          example: 221B
        buildingNumber:
          description: Building number
          type: string
          example: 2C
        postCode:
          description: Post Code
          type: string
          example: E1 6AN
        townName:
          description: Town name
          type: string
          example: Saint Ives
        countrySubDivision:
          type: array
          items:
            type: string
            example: East Sussex
        country:
          description: Country
          type: string
          example: United Kingdom
    SepaAccount:
      title: SepaAccount
      required:
        - iban
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs can be either 8 or 11 characters long.
          type: string
          example: BOFIIE2D
    SepaInstantAccount:
      title: SepaInstantAccount
      required:
        - iban
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs can be either 8 or 11 characters long.
          type: string
          example: BOFIIE2D
    FasterPaymentsAccount:
      title: FasterPaymentsAccount
      required:
        - accountNumber
        - sortCode
      type: object
      properties:
        accountNumber:
          description: The unique identifier for the bank account in the UK or Ireland.
          type: string
          example: '12345678'
        sortCode:
          description: >-
            The number assigned to a branch of a bank, typically containing six
            digits and most commonly used in the UK and Ireland.
          type: string
          example: '123456'
    ElixirAccount:
      title: ElixirAccount
      oneOf:
        - $ref: '#/components/schemas/PLAccount'
        - $ref: '#/components/schemas/PLIbanAccount'
    PLAccount:
      title: PLAccount
      required:
        - accountNumber
      type: object
      properties:
        accountNumber:
          description: The payee's Elixir-registered bank account number.
          type: string
          example: FRAX82783423
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs can be either 8 or 11 characters long.
          type: string
          example: BOFIIE2D
    PLIbanAccount:
      title: PLIbanAccount
      required:
        - iban
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: BOFIIE2D
    EUDomesticNonEuroAccount:
      title: EUDomesticNonEuroAccount
      oneOf:
        - $ref: '#/components/schemas/EUIbanAccount'
        - $ref: '#/components/schemas/BbanAccount'
        - $ref: '#/components/schemas/ClearingNumberAccount'
    EUDomesticNonEuroInstantAccount:
      title: EUDomesticNonEuroInstantAccount
      oneOf:
        - $ref: '#/components/schemas/EUIbanAccount'
        - $ref: '#/components/schemas/BbanAccount'
        - $ref: '#/components/schemas/ClearingNumberAccount'
    EUIbanAccount:
      title: EUIbanAccount
      required:
        - iban
      type: object
      properties:
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: BOFIIE2D
    BbanAccount:
      title: BbanAccount
      required:
        - bban
      type: object
      properties:
        bban:
          description: >-
            Represents a country-specific bank account number. The BBAN is the
            last part of the IBAN when used for international funds transfers.
            Every country has its own specific BBAN format and length. At
            present, there is no common EU or other standard unifying the BBAN.
            This is why IBAN was introduced to standardise international bank
            transfers.
          type: string
          example: NWBK60161331926819
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: BOFIIE2D
    ClearingNumberAccount:
      title: ClearingNumberAccount
      required:
        - bban
      type: object
      properties:
        bban:
          description: >-
            Represents a country-specific bank account number. The BBAN is the
            last part of the IBAN when used for international funds transfers.
            Every country has its own specific BBAN format and length. At
            present, there is no common EU or other standard unifying the BBAN.
            This is why IBAN was introduced to standardise international bank
            transfers.
          type: string
          example: NWBK60161331926819
        clearingNumber:
          description: >-
            The bank clearing number or BC number is a number used for the
            identification of financial institutions in Switzerland and
            Liechtenstein. Bank clearing numbers are connected to the Swiss
            Interbank Clearing and the EuroSIC system.
          type: string
          example: 87654321
    BankGiroAccount:
      title: BankGiroAccount
      required:
        - bankgiroNumber
      type: object
      properties:
        bankgiroNumber:
          description: >-
            The unique identifier for the bank account in Sweden (known in
            Swedish as Bankgironummer), it consists of 7 or 8 digits.
          type: string
          example: '56781234'
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs can be either 8 or 11 characters long.
          type: string
          example: BOFIIE2D
    PlusGiroAccount:
      title: PlusGiroAccount
      required:
        - plusgiroNumber
      type: object
      properties:
        plusgiroNumber:
          description: >-
            The unique identifier for the Swedish money transaction system owned
            by <a href="https://www.nordea.com" target="blank">Nordea</a>.
          type: string
          example: '67812345'
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: BOFIIE2D
    CorporateApiDebtorInformation:
      description: The debtor information.
      required:
        - accountId
      type: object
      properties:
        accountId:
          description: The ID for the debtor virtual account.
          type: string
          example: a12345
    RefundInitiation:
      description: The Initiation payload for the refund.
      required:
        - amount
        - localInstrument
        - originalPaymentId
        - paymentType
        - refId
      type: object
      properties:
        description:
          description: The description of the refund.
          type: string
          example: refund for some reason
        refId:
          description: >-
            The reference id from the customer. This value should not exceed 18
            characters in length.
          type: string
          example: myRefId
        amount:
          $ref: '#/components/schemas/Amount'
        originalPaymentId:
          description: >-
            The original payment id from Token.io's payments/transfers. This is
            required to initiate a refund. Token.io will check the original
            payment for the refund validation.
          type: string
          example: t:sdsds:sdsd
        registrationId:
          description: The registration id.
          type: string
          example: regId
        localInstrument:
          description: The bank's payment service to be used for making a payment.
          type: string
          example: SEPA_INSTANT
          enum:
            - SEPA
            - SEPA_INSTANT
            - FASTER_PAYMENT
        onBehalfOfId:
          description: >-
            The optional OnBehalfOfId is validated against sub-tpp ID of the
            member before initiating the refund.
          type: string
          example:
            - c5a863bc-86f2-4418-a26f-25b24c7983c7
            - 6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s
        corporateApiDebtor:
          $ref: '#/components/schemas/CorporateApiDebtorInformation'
    ResolvedRefundInitiation:
      description: The Initiation payload for the refund.
      required:
        - amount
        - creditor
        - debtor
        - localInstrument
        - originalPaymentId
        - paymentType
        - refId
      type: object
      properties:
        description:
          description: The description for the refund.
          type: string
          example: refund for some reason
        refId:
          description: >-
            The reference id from the customer. This value should not exceed 18
            characters in length.
          type: string
          example: myRefId
        amount:
          $ref: '#/components/schemas/Amount'
        originalPaymentId:
          description: >-
            The original payment id from Token payments/transfers. This is
            required to initiate a refund. Token.io will check the original
            payment for the refund validation.
          type: string
          example: t:sdsds:sdsd
        registrationId:
          description: The registraion id.
          type: string
          example: regId
        localInstrument:
          description: The bank's payment service to be used for making a payment.
          type: string
          example: SEPA_INSTANT
          enum:
            - SEPA
            - SEPA_INSTANT
            - FASTER_PAYMENT
        debtor:
          $ref: '#/components/schemas/RefundDebtorInformation'
        creditor:
          $ref: '#/components/schemas/CreditorInformation'
    Refund:
      description: The refund object.
      required:
        - createdDateTime
        - id
        - memberId
        - status
        - updatedDateTime
      type: object
      properties:
        id:
          description: Token.io-generated refund id.
          type: string
          example: rf:12345abcd:abcd
        bankTransactionId:
          description: >-
            The transaction id from the bank side. This can be empty if it is
            not available from the bank.
          type: string
          example: 2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
        memberId:
          description: The Token.io member id of the TPP initiating this refund.
          type: string
          example: m:123456abcd:abcd
        createdDateTime:
          description: >-
            The date and time this refund object was created (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2017-04-05T10:43:07.000+00:00'
        updatedDateTime:
          description: >-
            The date and time the current status, sub status, status reason
            information and authentication were last updated (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2017-04-05T10:45:07.000+00:00'
        status:
          $ref: '#/components/schemas/RefundStatus'
        bankPaymentStatus:
          description: >-
            The raw bank status. This can be the <a
            href="https://www.iso20022.org/" target="_blank">ISO 20022</a>
            payment status code. See <a
            href="https://developer.token.io/token_rest_api_doc/content/e-rest/iso-20022-statuses.htm"
            target="_blank">ISO 20022 payment status codes</a> for more
            information. This field can be empty if no payment status is
            available on bank side.
          type: string
          example: ACCP
        statusReasonInformation:
          description: >-
            A human-readable description of the reason for the reported status,
            which may include a message from the bank. This value should not
            exceed 256 characters in length.
          type: string
          example: The payment is settled on debtor side.
        initiation:
          $ref: '#/components/schemas/ResolvedRefundInitiation'
    RefundStatus:
      description: >-
        The Token.io Refund Initiation Status. <ul><li>
        <b>INITIATION_PENDING</b> - Token.io has received the refund initiation
        and the initiation passed Token.io
        validation.</li><li><b>INITIATION_PROCESSING</b> - the refund is
        processing on the bank side. Status can be updated to one of
        INITIATION_COMPLETED, INITIATION_REJECTED or INITIATION_FAILED. If the
        status is never updated by the bank within certain period of time, the
        status will stay INITIATION_PROCESSING forever and the corresponding
        status reason information field will reflect this
        fact.</li><li><b>INITIATION_COMPLETED</b> - the refund initiation is
        successful. This does not guarantee the refund is
        settled.</li><li><b>INITIATION_REJECTED</b> - the refund is rejected by
        the bank. More details are shared in the corresponding status reason
        information.</li><li><b>INITIATION_FAILED</b> - Token.io failed to
        create the initiation as a result of failures on the bank side,
        <i>e.g.</i> the bank is not available at the
        moment.</li><li><b>INITIATION_NO_FINAL_STATUS_AVAILABLE</b> - The
        payment status has not been updated for some time and Token.io has
        stopped polling it. The recommended maximum polling time is 30 days. The
        status will change to INITIATION_NO_FINAL_STATUS_AVAILABLE after 30 days
        if the bank doesn't update the status. This is a final status, but it
        doesn't indicate success or failure. Please contact the bank to check
        the actual status of the payment.</li><ul>
      type: string
      example: INITIATION_COMPLETED
      default: INITIATION_PENDING
      enum:
        - INITIATION_PENDING
        - INITIATION_PROCESSING
        - INITIATION_COMPLETED
        - INITIATION_REJECTED
        - INITIATION_FAILED
        - INITIATION_NO_FINAL_STATUS_AVAILABLE
    PayoutInitiation:
      description: The initiation payload for the payout.
      required:
        - amount
        - paymentType
        - refId
        - debtor
        - creditor
      type: object
      properties:
        description:
          description: The description of the payout.
          type: string
          example: Reason for the payout.
        refId:
          description: >-
            The reference id from the customer. This value should not exceed 18
            characters in length.
          type: string
          example: myRefId
        onBehalfOfId:
          description: The onBehalfOfId of the payout.
          type: string
          example:
            - c5a863bc-86f2-4418-a26f-25b24c7983c7
            - 6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s
        amount:
          $ref: '#/components/schemas/Amount'
        debtor:
          oneOf:
            - $ref: '#/components/schemas/CorporateApiDebtorInformation'
        creditor:
          $ref: '#/components/schemas/CreditorInformation'
        reference:
          description: the reference of this payment.
          type: string
          example: myReference
    ResolvedPayoutInitiation:
      description: The Initiation payload for the refund.
      required:
        - amount
        - creditor
        - debtor
        - paymentType
        - refId
      type: object
      properties:
        description:
          description: The description for the payout.
          type: string
          example: payout for some reason
        refId:
          description: >-
            The reference id from the customer. This value should not exceed 18
            characters in length.
          type: string
          example: myRefId
        amount:
          $ref: '#/components/schemas/Amount'
        debtor:
          oneOf:
            - $ref: '#/components/schemas/CorporateApiDebtorInformation'
        creditor:
          $ref: '#/components/schemas/CreditorInformation'
    Payout:
      description: The payout object.
      required:
        - createdDateTime
        - id
        - memberId
        - status
        - updatedDateTime
      type: object
      properties:
        id:
          description: Token.io generated payout id.
          type: string
          example: py:12345abcd:abcd
        bankTransactionId:
          description: >-
            The transaction id from the bank side. This can be empty if it is
            not available from the bank.
          type: string
          example: 2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
        memberId:
          description: The Token.io member id of the TPP initiating this payout.
          type: string
          example: m:123456abcd:abcd
        createdDateTime:
          description: >-
            The date and time this payout object was created The time this
            payment object was created (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2017-04-05T10:43:07.000+00:00'
        updatedDateTime:
          description: >-
            The date and time the current status, sub status, status reason
            information and authentication were last updated (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2017-04-05T10:45:07.000+00:00'
        status:
          $ref: '#/components/schemas/PayoutStatus'
        bankPaymentStatus:
          description: >-
            The raw bank status. This field could be empty if no payment status
            is available on bank side.
          type: string
          example: ACPC
        statusReasonInformation:
          description: >-
            A human-readable description of the reason for the reported status,
            which may include a message from the bank. This value should not
            exceed 256 characters in length.
          type: string
          example: The payment is settled on debtor side.
        initiation:
          $ref: '#/components/schemas/ResolvedPayoutInitiation'
    PayoutStatus:
      description: >-
        The Token.io Payout Initiation Status. <br/><br/> INITIATION_PENDING -
        Token.io has received the payout initiation and the initiation passed
        Token.io validation. <br/><br/> INITIATION_PROCESSING - the payout is
        processing on the bank side. Status can be updated to one of
        INITIATION_COMPLETED, INITIATION_REJECTED or INITIATION_FAILED.<br/>If
        the status is never updated by the bank within certain period of time,
        the status will stay INITIATION_PROCESSING forever and the corresponding
        status reason information field will reflect this fact.<br/><br/>
        INITIATION_COMPLETED - the payout initiation is successful. This does
        not guarantee the payout is settled.<br/><br/> INITIATION_REJECTED - the
        payout is rejected by the bank. More details are shared in the
        corresponding status reason information.  <br/><br/> INITIATION_FAILED -
        Token.io failed to create the initiation due to failures on the bank
        side, e.g. the bank is not available at the moment.
      type: string
      example: INITIATION_COMPLETED
      default: INITIATION_PENDING
      enum:
        - INITIATION_PENDING
        - INITIATION_PROCESSING
        - INITIATION_COMPLETED
        - INITIATION_REJECTED
        - INITIATION_FAILED
    UploadKeyAndCertificate:
      description: Upload a key and certificate.
      type: object
      properties:
        upload:
          oneOf:
            - $ref: '#/components/schemas/keyAndCertificate'
            - $ref: '#/components/schemas/keys'
    keyAndCertificate:
      description: The private key and certificate.
      type: object
      properties:
        keyAndCertificate:
          $ref: '#/components/schemas/keyAndCertificate_keyAndCertificate'
    keys:
      description: The private and public keys to be uploaded.
      type: object
      properties:
        keys:
          $ref: '#/components/schemas/keys_keys'
    PeriodicLimit:
      description: >-
        The maximum total amount of payments in a given period under this VRP
        consent. If the `periodAlignment` is `CALENDAR`, the limit is pro-rated
        in the first period to the remaining number of days.
      required:
        - maximumAmount
        - periodType
      type: object
      properties:
        maximumAmount:
          description: >-
            The transaction amount with up to four digits after the decimal
            point.
          type: string
          example: '100.00'
        periodType:
          type: string
          example: DAY
          enum:
            - DAY
            - WEEK
            - MONTH
            - YEAR
        periodAlignment:
          description: >-
            This field specifies whether the period starts on the consent start
            date or lines up with a calendar. If not specified, the CONSENT
            alignment is used.<br/> The consent start date is defined by the
            `startDateTime` field of the consent (the time element is
            disregarded) or the date when consent is created if the
            startDateTime is not specified.
          type: string
          example: CALENDAR
          enum:
            - CONSENT
            - CALENDAR
    Authentication:
      description: >-
        The authentication operation required to proceed with consent creation.
        This is present when the consent initiation request has been created at
        the bank, but the consent hasn't been authorized or rejected yet.
      required:
        - redirectUrl
      type: object
      properties:
        redirectUrl:
          description: >-
            This URL redirects the user in order to authorize the consent
            creation.
          type: string
          example: http://psu-redirect.com
    Vrp:
      description: The VRP object.
      required:
        - createdDateTime
        - id
        - initiation
        - memberId
        - status
        - updatedDateTime
      type: object
      properties:
        id:
          description: The Token.io generated VRP id.
          type: string
          example: vrp:12345abcd:abcd
        memberId:
          description: The Token.io member id of the TPP initiating the payment.
          type: string
          example: m:123456abcd:abcd
        initiation:
          $ref: '#/components/schemas/VrpInitiation'
        createdDateTime:
          description: >-
            The time when this VRP object was created (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2017-04-05T10:43:07.123Z'
        updatedDateTime:
          description: >-
            The date and time this VRP object was last updated (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2017-04-05T10:45:07.123Z'
        status:
          $ref: '#/components/schemas/VrpStatus'
        bankVrpId:
          description: >-
            The VRP id from the bank. This field can be empty if the VRP id
            isn't available on the bank's side.
          type: string
          example: 4vn6aDyMiwBYbPDN
        bankVrpStatus:
          description: >-
            The raw bank status. This field can be empty if payment status isn't
            available on the bank's side.
          type: string
          example: AcceptedCreditSettlementCompleted
        statusReasonInformation:
          description: >-
            A human-readable description of the reason for the reported status,
            which may include a message from the bank. This value should not
            exceed 256 characters in length.
          type: string
          example: The payment is settled on the debtor's side.
        refundDetails:
          $ref: '#/components/schemas/RefundDetails'
    VrpInitiation:
      description: The VRP initiation object.
      required:
        - amount
        - consentId
        - refId
        - remittanceInformationPrimary
      type: object
      properties:
        consentId:
          description: The id of the VRP consent.
          type: string
          example: vc:12345abcd:abcd
        refId:
          description: >-
            The reference id used between Token.io and the direct customer. This
            must be unique for each customer. This value should not exceed 18
            characters in length.
          type: string
          example: myRefId
        remittanceInformationPrimary:
          description: >-
            The primary field for remittance information. This should contain a
            reference, as assigned by the creditor, to unambiguously refer to
            the payment transactions under this consent. The value of this field
            should appear on the bank statement and reconciliation file,
            irrespective of the payment network being used. This value should
            not exceed 35 characters in length.
          type: string
          example: Sweepco
        remittanceInformationSecondary:
          description: >-
            The secondary field for remittance information. The information
            supplied should enable the reconciliation of an entry in an
            unstructured form. Depending on the payment network, information
            from this field may or may not be included in the bank statement and
            reconciliation file. This value should not exceed 140 characters in
            length.
          type: string
          example: Secondary remittance information.
        amount:
          $ref: '#/components/schemas/Amount'
        confirmFunds:
          description: >-
            A flag indicating whether the bank should do a funds confirmation
            check before accepting the payment. If set to `true`, the funds will
            be checked.
          type: boolean
          example: false
          default: false
        risk:
          $ref: '#/components/schemas/Risk'
    VrpStatus:
      description: >-
        The Token.io VRP status. <ul><li><b>INITIATION_PENDING</b> - Token.io
        has received the payment initiation request and it has passed Token.io's
        validation.</li><li><b>INITIATION_PROCESSING</b> - The VRP request has
        been acknowledged by the bank and is now being
        processed.</li><li><b>INITIATION_COMPLETED</b> - Payment initiation has
        been completed.</li> <b>INITIATION_REJECTED</b> - The payment has been
        rejected.</li><li><b>INITIATION_REJECTED_INSUFFICIENT_FUNDS</b> - The
        payment has been rejected because the funds check returned a negative
        result.</li><li><b>INITIATION_FAILED</b> - Token.io failed to proceed
        with the initiation as a result of problems reaching the
        bank.</li><li><b>INITIATION_NO_FINAL_STATUS_AVAILABLE</b> - The payment
        status has not been updated for some time and Token.io has stopped
        polling it. The recommended maximum polling time is 30 days. The status
        will change to `INITIATION_NO_FINAL_STATUS_AVAILABLE` after 30 days if
        the bank does not update the status. This is a final status, but it does
        not indicate success or failure. Please contact the bank to check the
        actual status of the payment.</li></ul>
      type: string
      example: INITIATION_COMPLETED
      default: INITIATION_PENDING
      enum:
        - INITIATION_PENDING
        - INITIATION_PROCESSING
        - INITIATION_COMPLETED
        - INITIATION_REJECTED
        - INITIATION_REJECTED_INSUFFICIENT_FUNDS
        - INITIATION_FAILED
        - INITIATION_NO_FINAL_STATUS_AVAILABLE
    VrpConsentResponse:
      required:
        - vrpConsent
      type: object
      properties:
        vrpConsent:
          $ref: '#/components/schemas/VrpConsent'
    VrpConsentsResponse:
      required:
        - pageInfo
        - vrpConsents
      type: object
      properties:
        vrpConsents:
          type: array
          items:
            $ref: '#/components/schemas/VrpConsent'
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
    VrpsResponse:
      required:
        - pageInfo
        - vrps
      type: object
      properties:
        vrps:
          type: array
          items:
            $ref: '#/components/schemas/Vrp'
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
    VrpResponse:
      type: object
      properties:
        vrp:
          $ref: '#/components/schemas/Vrp'
    VrpConsent:
      description: The VRP consent object.
      required:
        - createdDateTime
        - id
        - initiation
        - memberId
        - status
        - updatedDateTime
      type: object
      properties:
        id:
          description: The Token.io generated VRP consent id.
          type: string
          example: vc:12345abcd:abcde
        memberId:
          description: The Token.io member id of the TPP that created this VRP consent.
          type: string
          example: m:123456abcd:abcd
        initiation:
          $ref: '#/components/schemas/VrpConsentInitiation'
        createdDateTime:
          description: >-
            The time this VRP consent object was created (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2017-04-05T10:43:07.123Z'
        updatedDateTime:
          description: >-
            The last time this VRP consent object was updated (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2017-04-05T10:45:07.123Z'
        status:
          $ref: '#/components/schemas/VrpConsentStatus'
        bankVrpConsentId:
          description: >-
            The VRP consent id from the bank. This field can be empty if the
            consent id isn't available on the bank side.
          type: string
          example: 4jq34dwjgi9MCK2MXB9f7v
        bankVrpConsentStatus:
          description: >-
            The raw bank status. This field can be empty if the consent status
            isn't available on the bank side.
          type: string
          example: AwaitingAuthorization
        statusReasonInformation:
          description: >-
            A human-readable description of the reason for the reported status,
            which may include a message from the bank. This value should not
            exceed 256 characters in length.
          type: string
          example: The consent resource is awaiting user authorization.
        authentication:
          $ref: '#/components/schemas/Authentication'
    VrpConsentStatus:
      description: >-
        The Token.io VRP consent status. <br/><ul><li><b>PENDING</b> - Token.io
        has received the request to create a VRP consent and the request has
        passed Token.io's validation.</li><li><b>PENDING_MORE_INFO</b> - The
        initiaion lacks mandatory fields (<i>e.g.</i>, `bankId`) that must be
        collected before connecting to the
        bank.</li><li><b>PENDING_REDIRECT_AUTH</b> - The consent request has
        been acknowledged by the bank and Token.io is awaiting user confirmation
        at the bank's page.</li><li><b>PENDING_REDIRECT_AUTH_VERIFICATION</b> -
        Token.io has received the callback information from the bank and is
        currently verifying it with the bank.</li><li><b>AUTHORIZED</b> - the
        VRP consent has been successfully authorized.</li><li><b>REJECTED</b> -
        The VRP consent has been rejected. More details are shared in the
        corresponding `statusReasonInformation` field.</li><li><b>REVOKED</b> -
        The VRP consent has been revoked by the user.</li><li><b>FAILED</b> -
        Token.io failed to proceed with the consent as a result of problems with
        the bank, or because the user has abandoned the request. All `PENDING`
        statuses convert to `FAILED` 30 minutes after consent
        creation.</li></ul>
      type: string
      example: AUTHORIZED
      default: PENDING
      enum:
        - PENDING
        - PENDING_MORE_INFO
        - PENDING_REDIRECT_AUTH
        - PENDING_REDIRECT_AUTH_VERIFICATION
        - AUTHORIZED
        - REJECTED
        - REVOKED
        - FAILED
    VrpConsentInitiation:
      description: The initiation payload for the VRP consent.
      required:
        - callbackState
        - callbackUrl
        - creditor
        - currency
        - localInstrument
        - maximumIndividualAmount
        - periodicLimits
        - refId
        - remittanceInformationPrimary
        - vrpType
      type: object
      properties:
        bankId:
          description: >-
            The Token.io id of the bank where the consent is created. ***This
            field is required if the customer is not using Token.io's Hosted
            Pages for bank selection, <i>i.e.</i>, API-only integration.***
          type: string
          example: ob-modelo
        refId:
          description: >-
            The reference id set by the customer creating the consent. This must
            be unique for each customer. This value should not exceed 18
            characters in length.
          type: string
          example: myRefId
        remittanceInformationPrimary:
          description: >-
            The primary field for remittance information. This should contain a
            reference, as assigned by the creditor, to unambiguously refer to
            the payment transactions under this consent. The value of this field
            should appear on the bank statement and reconciliation file,
            irrespective of the payment network being used. This value should
            not exceed 35 characters in length.
          type: string
          example: Sweepco
        remittanceInformationSecondary:
          description: >-
            The secondary field for remittance information. The information
            supplied should enable the reconciliation of an entry in an
            unstructured form. Depending on the payment network, information
            from this field may or may not be included in the bank statement and
            reconciliation file. This value should not exceed 140 characters in
            length.
          type: string
          example: Additional remittance information.
        startDateTime:
          description: >-
            The date and time from which payments can be made (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format). Payments initiated before this
            time will be rejected. If not provided, the time of consent creation
            is used as a default. The date and time cannot be earlier than the
            current time.
          type: string
          example: '2017-04-05T10:43:07.123+01:00'
        endDateTime:
          description: >-
            The date and time before which payments can be made (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format). Payments initiated after this
            time will be rejected.
          type: string
          example: '2017-04-05T10:43:07.132+01:00'
        onBehalfOfId:
          description: >-
            The id of the ultimate client on whose behalf the consent is
            created. If the consent is created on behalf of a sub-TPP, this
            field should contain the sub-TPP `referenceId`.
          type: string
          example: 6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s
        vrpType:
          description: The types of payments that can be made under this VRP consent.
          type: string
          example: SWEEPING
          enum:
            - SWEEPING
            - OTHER
        localInstrument:
          description: >-
            The bank's payment service used for making a payment. Presently only
            Faster Payments are supported.
          type: string
          example: FASTER_PAYMENTS
          enum:
            - FASTER_PAYMENTS
        debtor:
          $ref: '#/components/schemas/VRPDebtorInformation'
        creditor:
          $ref: '#/components/schemas/VRPCreditorInformation'
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code for this VRP
            consent. All amounts specified in this consent are in this currency.
            All payments created under this consent should use this currency.
          type: string
          example: EUR
        minimumIndividualAmount:
          description: >-
            The minimum amount for individual payments made under this consent,
            with up to four digits after the decimal point It should not exceed
            the `maximumIndividualAmount` or any of the periodic limits
            `maximumAmount`.
          type: string
          example: '5.0'
        maximumIndividualAmount:
          description: >-
            The maximum amount for individual payments made under this consent,
            with up to four digits after the decimal point.
          type: string
          example: '10000.0'
        periodicLimits:
          description: >-
            A list of periodic limits that are applied together as an
            intersection. At least one should be specified.
          type: array
          items:
            $ref: '#/components/schemas/PeriodicLimit'
        maximumOccurrences:
          description: >-
            The total number of payments that can be initiated under this
            consent. Any new payments will be rejected if the number is over
            this limit. This cannot be negative, 0 value is considered as not
            set.
          type: integer
          example: 3
        callbackUrl:
          description: >-
            The TPP's URL where the bank/Token.io should be calling back to.
            Note: the URL should not be under the Token.io domain.
          type: string
          example: https://www.myApp.com
        callbackState:
          description: >-
            This field specifies a state for bank callbacks. If you don't
            specify a callback state, it will be generated by Token.io. If you
            specify a callback state, please ensure that it's globally unique.
            We recommend that you use globally unique identifiers (<i>e.g.</i>,
            UUID). ***The callback state should not exceed 256 characters in
            length, and can only contain alpha-numeric characters and the
            following characters: -_.~***
          type: string
          example: c070b02c-4cca-4ee1-9c1a-537c98ad162e
        returnRefundAccount:
          description: >-
            This field indicates whether the `RefundAccount` object should be
            included in the VRP created under this consent.
          type: boolean
          example: true
          default: false
        risk:
          $ref: '#/components/schemas/Risk'
    PageInfo:
      description: >-
        The information about the current page, which also indicates whether the
        next page exists.
      required:
        - limit
      type: object
      properties:
        limit:
          description: >-
            The limit (maximum number of objects to return) applied to this
            page. <br/>The default and maximum allowed limit is 200. If this
            limit is exceeded, was not set or was set to 0, it will be set to
            200.
          maximum: 200
          minimum: 1
          type: integer
          format: int32
          example: 20
          default: 200
        offset:
          description: >-
            The offset for the current page. If the offset has been provided in
            the request, this offset will be equal to the provided one. But if
            no offset is provided in the request (<i>i.e.</i> this is the first
            page) and the page is not empty, this field will be populated with a
            non-empty string. This may be helpful for loading the same page
            again, which might not always be possible with an empty offset due
            to the dynamic nature of the data. <br/>The offset is opaque to a
            user and should not be parsed and/or understood in any way.
          type: string
          example: LerV6Jmex
        nextOffset:
          description: >-
            The offset for the next page. If the page is empty, it is equal to
            this page offset. If the page is not empty, but there are no more
            objects to load (haveMore = false), it will be empty.<br/>The offset
            is opaque to a user and should not be parsed and/or understood in
            any way.
          type: string
          example: KgwG8Qkat
        haveMore:
          description: >-
            This field indicates whether there are more objects to load,
            <i>i.e.</i> whether the next page exists.
          type: boolean
          example: false
          default: false
    DebtorInformation:
      description: >-
        The debtor information. The account identifier (one of) is required if
        it is mandatory for the specific bank, or if the TPP decides to pass in
        the `debtor` information.
      allOf:
        - oneOf:
            - $ref: '#/components/schemas/SepaAccount'
            - $ref: '#/components/schemas/SepaInstantAccount'
            - $ref: '#/components/schemas/FasterPaymentsAccount'
            - $ref: '#/components/schemas/ElixirAccount'
            - $ref: '#/components/schemas/EUDomesticNonEuroAccount'
            - $ref: '#/components/schemas/EUDomesticNonEuroInstantAccount'
            - $ref: '#/components/schemas/BankGiroAccount'
            - $ref: '#/components/schemas/PlusGiroAccount'
        - type: object
          properties:
            name:
              description: The owner's name of the debtor account.
              type: string
              example: John Smith
            ultimateDebtorName:
              description: The ultimate debtor's name.
              type: string
              example: John Smith
            address:
              $ref: '#/components/schemas/Address'
    VRPDebtorInformation:
      description: >-
        Debtor information. The account identifier (one of) is required if it's
        mandatory for the specific bank, or if the TPP decides to pass in the
        `debtor` information.
      allOf:
        - oneOf:
            - $ref: '#/components/schemas/FasterPaymentsAccount'
        - type: object
          properties:
            name:
              description: The owner's name for the debtor account.
              type: string
              example: John Smith
            ultimateDebtorName:
              description: The ultimate debtor's name.
              type: string
              example: John Smith
            address:
              $ref: '#/components/schemas/Address'
    CreditorInformation:
      description: Creditor information. The account information (one of) is required.
      allOf:
        - oneOf:
            - $ref: '#/components/schemas/SepaAccount'
            - $ref: '#/components/schemas/SepaInstantAccount'
            - $ref: '#/components/schemas/FasterPaymentsAccount'
            - $ref: '#/components/schemas/ElixirAccount'
            - $ref: '#/components/schemas/EUDomesticNonEuroAccount'
            - $ref: '#/components/schemas/EUDomesticNonEuroInstantAccount'
            - $ref: '#/components/schemas/BankGiroAccount'
            - $ref: '#/components/schemas/PlusGiroAccount'
        - type: object
        - required:
            - name
          properties:
            name:
              description: The owner's name for the creditor account.
              type: string
              example: Customer Inc.
            ultimateCreditorName:
              description: The ultimate creditor's name.
              type: string
              example: Customer Inc.
            address:
              $ref: '#/components/schemas/Address'
            bankName:
              description: The creditor's bank name.
              type: string
    VRPCreditorInformation:
      description: Creditor information. The account information (one of) is required.
      allOf:
        - oneOf:
            - $ref: '#/components/schemas/FasterPaymentsAccount'
        - type: object
        - required:
            - name
          properties:
            name:
              description: The owner's name for the creditor account.
              type: string
              example: Customer Inc.
            ultimateCreditorName:
              description: The ultimate creditor's name.
              type: string
              example: Customer Inc.
            address:
              $ref: '#/components/schemas/Address'
            bankName:
              description: The creditor's bank name.
              type: string
    RefundDetails:
      description: >-
        The refund-related information for this payment. This field requires
        specific permission and is only available if
        `paymentInitiation.returnRefundAccount` is set to `true`.
      required:
        - refundAccount
      type: object
      properties:
        refundAccount:
          $ref: '#/components/schemas/RefundAccount'
        paymentRefundStatus:
          description: The refund status for this payment.
          type: string
          example: NONE
          enum:
            - NONE
            - PARTIAL
            - FULL
        settledRefundAmount:
          allOf:
            - description: >-
                The total amount of settled refunds (with status
                INITIATION_COMPLETED).
            - $ref: '#/components/schemas/Amount'
        remainingRefundAmount:
          allOf:
            - description: >-
                The remaining amount to be refunded (the payment amount minus
                the total amount of non-failed refunds).
            - $ref: '#/components/schemas/Amount'
    GetBanksV2Response:
      type: object
      properties:
        banks:
          description: >-
            This field contains information for each bank matching the request
            criteria.
          type: array
          items:
            $ref: '#/components/schemas/BankV2'
        paging:
          $ref: '#/components/schemas/Paging'
        rank:
          description: Sorts banks by rank.
          type: integer
          example: 1
        bankSubGroup:
          description: Filters for banks that are part of the bank sub-group specified.
          type: string
          example:
            - CMM Grand
            - Banque Populaire
            - La Banque
    PaymentResponse:
      type: object
      properties:
        payment:
          $ref: '#/components/schemas/Payment'
    PaymentsResponse:
      required:
        - pageInfo
        - payments
      type: object
      properties:
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
    EmbeddedAuthFields:
      description: >-
        This field provides a map of all fields requested for embedded
        authentication, with their values. The key is the id of the field from
        the authentication payload, for which this value is submitted.
      type: object
      properties: {}
      additionalProperties:
        type: string
      example:
        '123': SMS message
    BankV2:
      type: object
      properties:
        id:
          description: The Token.io bank identifier.
          type: string
          example: ob-modelo
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: BOFIIE2D
        name:
          description: The commonly recognised name of the bank.
          type: string
          example: GoldBank
        logoUri:
          description: The URI of the location of the square bank avatar icon.
          type: string
          example: https://example.com/path/full.png
        bankGroup:
          description: The name of the banking group in which this bank holds membership.
          type: string
          example: XYZ-Bank-Group
        bankSubGroup:
          description: >-
            The name of the sub-banking group in which this bank holds
            membership.
          type: string
          example: Sub-XYZ-Bank-Group
        countries:
          description: >-
            A list of <a href="https://www.iso.org/obp/ui/#search"
            target="_blank">ISO 3166-1 Alpha 2 country codes</a> in upper case,
            in which this bank operates.
          type: array
          items:
            type: string
        openBankingStandard:
          $ref: '#/components/schemas/OpenBankingStandard'
        credentialFields:
          description: Contains information used in embedded authentication flows.
          type: array
          items:
            $ref: '#/components/schemas/CredentialField'
        mandatoryFields:
          $ref: '#/components/schemas/MandatoryFieldsv2'
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow'
        fieldsFormatInformation:
          description: >-
            Contains bank-dependent formatting constraints indicating allowable
            characters, if any.
          type: array
          items:
            $ref: '#/components/schemas/FieldFormatInformation'
        supportedLocalInstruments:
          description: Payment methods/rails supported by the bank.
          type: array
          example:
            - SEPA_INSTANT
            - FASTER_PAYMENTS
            - SEPA
          items:
            type: string
        operationalTime:
          description: >-
            Specifies the bank’s days and hours of operation in a normal week.
            Does not take into account bank-specific public holidays, which may
            or may not be considered out-of-operation time.
          type: string
          example: MON to FRI, 00:00 to 24:00 GMT+1
        transactionHistoryLimit:
          description: >-
            Defines the number of transaction history records allowed per page,
            -1 (unlimited) or a positive integer (record limit).
          type: integer
          format: int32
          example: 65
          default: -1
        supportsAccountList:
          description: The bank connection supports fetching accounts.
          type: boolean
          format: boolean
          example: true
        supportsAccountDetails:
          description: The bank connection supports fetching account details.
          type: boolean
          format: boolean
          example: true
        supportsAccountBalance:
          description: The bank connection supports fetching account balances.
          type: boolean
          format: boolean
          example: true
        supportsTransactionList:
          description: The bank connection supports fetching transactions.
          type: boolean
          format: boolean
          example: true
        supportsTransactionDetails:
          description: The bank connection supports fetching transaction details.
          type: boolean
          format: boolean
          example: true
        supportsStandingOrderList:
          description: The bank connection supports the fetching standing orders.
          type: boolean
          format: boolean
          example: true
        supportsTransactionsDateFilter:
          description: >-
            The bank connection supports feting transactions using a date
            filter.
          type: boolean
          format: boolean
          example: true
        requiresOneStepPayment:
          description: The bank connection only supports immediate redemption of transfers.
          type: boolean
          format: boolean
          example: true
        supportsSinglePayment:
          description: The bank connection supports single immediate payments.
          type: boolean
          format: boolean
          example: true
        supportsScheduledPayment:
          description: The bank connection supports future dated scheduled payments.
          type: boolean
          format: boolean
          example: true
        supportsSendPayment:
          description: The bank connection supports payment initiation.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsReceivePayment:
          description: The bank connection supports the receipt of payments.
          type: boolean
          format: boolean
          example: false
          default: false
        supportsStandingOrder:
          description: The bank connection supports recurring payments/standing orders.
          type: boolean
          format: boolean
          example: true
        supportsReturnRefundAccount:
          description: The bank connection supports requesting of refund accounts.
          type: boolean
          format: boolean
          example: true
        supportsFundsConfirmation:
          description: The bank connection supports confirmation of available funds.
          type: boolean
          format: boolean
          example: true
        supportsVariableRecurringPayment:
          description: The bank connection supports variable recurring payments.
          type: boolean
          format: boolean
          example: true
    MandatoryFieldsv2:
      description: >-
        Contains the fields required by the bank, which the TPP must populate in
        the token request, where applicable.
      type: array
      items:
        $ref: '#/components/schemas/MandatoryFieldsv2_inner'
    PaymentInitiation:
      description: The initiation payload for the payment.
      required:
        - amount
        - callbackUrl
        - creditor
        - localInstrument
        - refId
        - remittanceInformationPrimary
      type: object
      properties:
        bankId:
          description: >-
            The Token.io id of the bank where the consent is created. ***This
            field is required if the customer is not using Token.io's Hosted
            Pages for bank selection, <i>i.e.</i>, API-only integration.***
          type: string
          example: ob-modelo
        refId:
          description: >-
            The reference id set by the TPP creating the consent. This must be
            unique to the TPP and should not exceed 18 characters in length.
          type: string
          example: uniqueid
        remittanceInformationPrimary:
          description: >-
            The primary field for remittance information. It should contain a
            reference, as assigned by the creditor, to unambiguously refer to
            the payment transactions under this consent. The value of this field
            should appear on the bank statement and reconciliation file
            irrespective of the payment network being used. This value should
            not exceed 35 characters in length.
          type: string
          example: RemittancePrimary
        remittanceInformationSecondary:
          description: >-
            The secondary field for remittance information: information supplied
            to enable the reconciliation of an entry in an unstructured form.
            Depending on the payment network, information from this field may or
            may not be included in the bank statement and reconciliation file.
            It should not exceed 140 characters in length.
          type: string
          example: RemittanceSecondary
        onBehalfOfId:
          description: >-
            The id of the ultimate client on whose behalf the consent is
            created. If the consent is created on behalf of a sub-TPP, this
            field should contain the sub-TPP referenceId. This should be in UUID
            format.
          type: string
          example: c5a863bc-86f2-4418-a26f-25b24c7983c7
        amount:
          $ref: '#/components/schemas/Amount'
        localInstrument:
          description: >-
            The bank's payment service used to make the payment.<br/>Depending
            on which local instrument you select, you will require different
            account identifiers in the `debtor` and `creditor` objects. The
            `creditor` object is mandatory, but the `debtor` object is only
            required if it is mandatory for a specific bank. However, if the TPP
            decides to provide debtor details, account identifier field(s)
            within the `debtor` object are mandatory. <br/>The fields within the
            `creditor` and `debtor` objects are populated as
            follows:<ul><li><b>FASTER_PAYMENTS</b> require the `sortCode` and
            `accountNumber` to be populated.<br/></li><li><b>SEPA</b> and
            <b>SEPA_INSTANT</b> require the `iban`, the `bic` is
            optional.<br/></li><li><b>ELIXIR</b> requires either the `iban` or
            the Polish domestic `accountNumber`, the `bic` is
            optional.<br/></li><li><b>BANKGIRO</b> requires the
            `bankgiroNumber`, the `bic` is
            optional.<br/></li><li><b>PLUSGIRO</b> requires the
            `plusgiroNumber`, the `bic` is
            optional.<br/></li><li><b>EU_DOMESTIC_NON_EURO</b> and
            <b>EU_DOMESTIC_NON_EURO_INSTANT</b> require either the `iban` or
            `bban`, the `bic` is optional, OR the `bban` is required and
            `clearingNumber` is optional.<br/></li></ul>
          type: string
          example: SEPA
          enum:
            - SEPA
            - SEPA_INSTANT
            - FASTER_PAYMENTS
            - ELIXIR
            - EU_DOMESTIC_NON_EURO
            - EU_DOMESTIC_NON_EURO_INSTANT
            - BANKGIRO
            - PLUSGIRO
        debtor:
          $ref: '#/components/schemas/DebtorInformation'
        creditor:
          $ref: '#/components/schemas/CreditorInformation'
        executionDate:
          description: >-
            This field specifies the future date for executing the payment in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format.". ***This field is optional and
            can only be used if the bank supports scheduled payments and the
            customer has permission to initiate future dated payments.***
          type: string
          example: '2023-04-29'
        confirmFunds:
          description: >-
            This field determines whether the bank will carry out a funds
            confirmation check before accepting the payment. Default = false.
          type: boolean
          example: false
        returnRefundAccount:
          description: >-
            Supported banks will provide the debtor account details selected by
            the user during authorization. Default = false.
          type: boolean
          example: false
        disableFutureDatedPaymentConversion:
          description: >-
            This field determines whether an auto-conversion of a single
            immediate payment to a future dated payment can be disabled. This
            may be required if the payment was initiated outside bank working
            hours. Default = false.
          type: boolean
          example: false
        callbackUrl:
          description: >-
            The TPP's url that Token.io calls back to. This url should not be
            under the token.io domain and must be https/SSL secure.
          type: string
          example: https://tpp.com/callback
        callbackState:
          description: >-
            Specify a state for bank callbacks. If you don't specify a callback
            state, it will be generated by Token.io. If you specify a callback
            state, please ensure that it's globally unique. We recommend that
            you use globally unique identifiers (<i>e.g.</i>, UUID). ***The
            callback state should not exceed 256 characters in length, and can
            only contain alpha-numeric characters and the following characters:
            -_.~***
          type: string
          example: c070b02c-4cca-4ee1-9c1a-537c98ad162e
        chargeBearer:
          description: >-
            The charge bearer for the transaction. This may be required for
            international payments. <br/> CRED - all transaction charges are to
            be borne by the creditor. <br/> DEBT - all transaction charges are
            to be borne by the debtor. <br/> SHAR - both parties bear their own
            charges. <br/> SLEV - both parties bear their own charges
            (recommended for SEPA payments).
          type: string
          example: CRED
          enum:
            - UNKNOWN_CHARGE_BEARER
            - CRED
            - DEBT
            - SHAR
            - SLEV
        risk:
          $ref: '#/components/schemas/Risk'
    PaymentStatus:
      description: >-
        The Token.io Payment Status: <ul><li><b>INITIATION_PENDING</b> -
        Token.io has received the payment initiation and the initiation has
        passed Token.io's validation. No action is required; await the bank's
        response for the next step, <i>e.g.</i>, a webhook with the status
        update, or poll the payment.</li><li><b>INITIATION_PENDING_MORE_INFO</b>
        - The payment initiation request lacks the required fields (<i>e.g.</i>,
        `bankId`) that have to be collected before connecting to the bank. If
        you're using Token.io's Hosted Payment Page, these fields will be
        collected from the user by the Hosted Payment Page. Otherwise this is
        not a recoverable state. You'll need to populate the required
        information and make the payment initiation call again. Information
        about the missing data can be found in the `statusReasonInformation`
        field.</li><li><b>INITIATION_PENDING_REDIRECT_AUTH</b> - The payment
        request has been acknowledged by the bank and Token.io is awaiting user
        confirmation on the bank's page. If Token.io's Hosted Payment Page is
        not in use, you'll need to redirect the user to the url found in the
        authentication field and await a callback from the bank (if you're
        handling callbacks) or from Token.io (if Token.io handles the callbacks
        for you).</li><li><b>INITIATION_PENDING_REDIRECT_AUTH_VERIFICATION</b> -
        Token.io has received the callback information from the bank and is
        currently verifying it with the bank. No action is required; await the
        bank's response for the next step, <i>e.g.</i>, a webhook with the
        status update, or poll the
        payment.</li><li><b>INITIATION_PENDING_EMBEDDED_AUTH</b> - Token.io is
        waiting for the requested input from the user. If Token.io's Hosted
        Payment Page is not in use, you must provide the requested information
        to process the payment. Required information can be found in the
        authentication object of the
        payment.</li><li><b>INITIATION_PENDING_EMBEDDED_AUTH_VERIFICATION</b> -
        Token.io is waiting for the bank to process the provided information. No
        action is required; await the bank's response for the next step,
        <i>e.g.</i>, a webhook with the status update, or poll the
        payment.</li><li><b>INITIATION_PENDING_DECOUPLED_AUTH</b> - Token.io is
        polling status from the bank while the user authenticates in a decoupled
        way. No action is required; await the bank's response for the next step,
        <i>e.g.</i>, a webhook with the status update, or poll the
        payment.</li><li><b>INITIATION_PENDING_REDEMPTION</b> - The payment is
        ready for a redemption. No action is required; await the bank's response
        for the next step, <i>e.g.</i>, a webhook with the status update, or
        poll the
        payment.</li><li><b>INITIATION_PENDING_REDEMPTION_VERIFICATION</b> -
        Token.io is waiting for the bank to redeem the payment. No action is
        required; await the bank's response for the next step, <i>e.g.</i>, a
        webhook with the status update, or poll the
        payment.</li><li><b>INITIATION_PROCESSING</b> - The payment initiation
        request has been acknowledged by the bank and is now being processed. No
        action is required; await the bank's response for the next step,
        <i>e.g.</i>, a webhook with the status update, or a polling call. If
        necessary wait for additional webhooks to be sent. If a webhook is not
        received, then use a polling call every 120 min. The status can be
        updated to one of `INITIATION_COMPLETED`, `INITIATION_REJECTED` or
        `INITIATION_NO_FINAL_STATUS_AVAILABLE` (if the status polling period is
        exhausted).</li><li><b>INITIATION_COMPLETED</b> - The final status
        (usually) indicating that the payment initiation request has been
        successfully completed. This doesn't guarantee that the payment is
        settled. Also it can change to `CANCELED` for future dated payments (see
        below).</li><li><b>INITIATION_REJECTED</b> - The final status indicating
        that the payment initiation request has been rejected by the bank. More
        details are shared in the corresponding `statusReasonInformation`
        field.</li><li><b>INITIATION_REJECTED_INSUFFICIENT_FUNDS</b> - The final
        status indicating that the payment initiation request has been rejected
        due to insufficient funds.</li><li><b>INITIATION_FAILED</b> - The final
        status indicating that Token.io failed to proceed with the initiation
        due to problems with reaching the bank, or because payment
        authentication has not been completed within the allowed time period.
        More details are shared in the corresponding `statusReasonInformation`
        field.</li><li><b>INITIATION_DECLINED</b> - The final status indicating
        that the payment initiation request has been declined, in most cases
        actively by the user.</li><li><b>CANCELED</b> - The final status
        indicating that the payment initiation request has been canceled before
        being executed. ***This status is only used for scheduled payments and
        can even be set after the status has been set to `INITIATION_COMPLETED`
        before the execution
        date.***</li><li><b>INITIATION_NO_FINAL_STATUS_AVAILABLE</b> - Payment
        status has not been updated for some time and Token.io has given up
        polling it. This is a final status, but it does not indicate success or
        failure. Please contact the bank to check the actual status of the
        payment.</li><li><b>SETTLEMENT_IN_PROGRESS</b> - This status is provided
        when a Token.io virtual account is used as the beneficiary for the
        payment, and replaces the payment initiation status. Token.io is waiting
        for the payment to reach the payee bank. No action is required; await
        the next step, <i>e.g.</i>, Token.io sends a webhook with the status
        update, or a polling call. The status will change to
        `SETTLEMENT_IN_PROGRESS` soon after receives the final status from the
        debtor bank.</li><li><b>SETTLEMENT_COMPLETED</b> - This status is
        provided when a Token.io virtual account is used as the beneficiary for
        the payment, and replaces the payment initiation status. The payment has
        reached the payee bank and Token.io has matched the transaction in the
        TPP’s settlement account to the initiated payment. For instant payments,
        `SETTLEMENT_COMPLETED` will be achieved within 30-45 minutes from
        payment initiation, at the latest. For non-instant payments, the time to
        reach `SETTLEMENT_COMPLETED` will depend on the clearing period for the
        payment.</li><li><b>SETTLEMENT_INCOMPLETE</b> – This status is provided
        when a Token.io virtual account is used as the beneficiary for the
        payment, and replaces the payment initiation status. Reconciliation has
        failed. This happens when Token.io doesn't find the corresponding
        transaction in the TPP’s settlement account
        automatically.</li></ul><br/>During settlement of a virtual accounts
        payment, the status update job will run first for up to 30 days. Payment
        will then enter into a 'final' status, normally
        `INITIATION_COMPLETED`.<br/>Once the status update job has run, the
        reconciliation job looks for matching inbound payments.<br/><br/>For
        SEPA payments:<ul><li>if a matching inbound payment is found within 15
        days of the final payment status update ->
        `SETTLEMENT_COMPLETED`</li><li>if no matching inbound payment is found
        within 15 days of the final payment status update ->
        `SETTLEMENT_INCOMPLETE`</li></ul>For SEPA Instant payments:<ul><li>if a
        matching inbound payment is found within 1 day of the final payment
        status update -> `SETTLEMENT_COMPLETED`</li><li>if no matching inbound
        payment is found within 1 day of the final payment status update ->
        `SETTLEMENT_INCOMPLETE`</li></ul>
      type: string
      example: INITIATION_COMPLETED
      default: INITIATION_PENDING
      enum:
        - INITIATION_PENDING
        - INITIATION_PENDING_MORE_INFO
        - INITIATION_PENDING_REDIRECT_AUTH
        - INITIATION_PENDING_REDIRECT_AUTH_VERIFICATION
        - INITIATION_PENDING_EMBEDDED_AUTH
        - INITIATION_PENDING_EMBEDDED_AUTH_VERIFICATION
        - INITIATION_PENDING_DECOUPLED_AUTH
        - INITIATION_PENDING_REDEMPTION
        - INITIATION_PENDING_REDEMPTION_VERIFICATION
        - INITIATION_PROCESSING
        - INITIATION_COMPLETED
        - INITIATION_REJECTED
        - INITIATION_REJECTED_INSUFFICIENT_FUNDS
        - INITIATION_FAILED
        - INITIATION_DECLINED
        - CANCELED
        - INITIATION_NO_FINAL_STATUS_AVAILABLE
        - SETTLEMENT_IN_PROGRESS
        - SETTLEMENT_COMPLETED
        - SETTLEMENT_INCOMPLETE
    PaymentRefundStatus:
      description: The refund status for this payment.
      type: string
      example: NONE
      enum:
        - NONE
        - PARTIAL
        - FULL
    Payment:
      description: The payment object.
      required:
        - createdDateTime
        - id
        - initiation
        - memberId
        - status
        - updatedDateTime
      type: object
      properties:
        id:
          description: The Token.io generated payment id.
          type: string
          example: pm:12345abcd:abcd
        memberId:
          description: The Token.io member id of the TPP that created this payment.
          type: string
          example: m:123456abcd:abcd
        initiation:
          $ref: '#/components/schemas/PaymentInitiation'
        convertedToFutureDatedPayment:
          description: >-
            This field indicates whether a payment has been converted from a
            single immediate payment to a future dated payment. This can happen
            if the payment is initiatied outside bank working hours and
            `paymentInitiation.disableFutureDatedPaymentConversion` = false.
          type: boolean
          example: false
          default: false
        refundDetails:
          $ref: '#/components/schemas/RefundDetails'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        statusReasonInformation:
          description: >-
            A human-readable description of the reason for the reported status,
            which may include a message from the bank. This value should not
            exceed 256 characters in length.
          type: string
          example: The payment is settled on the debtor side.
        bankPaymentStatus:
          description: >-
            The raw bank status. This field can be left empty if information is
            not available from the bank side. This includes the standard
            specific status which also follows <a
            href="https://www.iso.org/standards.html" target="_blank">ISO
            standards</a>.
          type: string
          example: ACPC
        bankPaymentId:
          description: >-
            The payment id from the bank. Not all banks provide this. This field
            can be left empty if information is not available from the bank
            side.
          type: string
          example: '1231423'
        bankTransactionId:
          description: >-
            The transaction id from the bank when the transaction is settled.
            Not all banks provide this. This field can be left empty if
            information is not available from the bank.
          type: string
          example: 2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
        authentication:
          $ref: '#/components/schemas/Authenticationv2'
        createdDateTime:
          description: >-
            The date and time this payment object was created (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2023-04-05T17:02:11.954Z'
        updatedDateTime:
          description: >-
            The date and time this payment object was last updated (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2023-04-05T17:02:11.954Z'
    Risk:
      description: >-
        This field is used to specify additional details for the risk scoring of
        payments.
      type: object
      properties:
        psuId:
          description: The merchant's unique customer identifier for the user.
          type: string
          example: '0000789123'
        paymentContextCode:
          description: >-
            This field describes the context of the payment context. This field
            is an <a href="https://www.openbanking.org.uk"
            target="_blank">OBIE</a> standard and also maps to <a
            href="https://bankio.at/openbanking/knowledge-base/NextGenPSD2"
            target="_blank">NextGenPsd2</a>'s `purposeCode` and
            `categoryPurposeCode` fields. We recommend that the TPP populates
            this field.
          type: string
          example: PISP_PAYEE
          enum:
            - BILL_PAYMENT
            - ECOMMERCE_GOODS
            - ECOMMERCE_SERVICES
            - PARTY_TO_PARTY
            - PISP_PAYEE
            - OTHER
        paymentPurposeCode:
          description: >-
            The category code conforming to the Recommended UK Purpose Code in
            the <a href="https://www.iso.org/standard/55005.html"
            target="_blank">ISO 20022</a> Payment Messaging List, related to the
            type of services or goods corresponding to the underlying purpose of
            the payment. This also includes the values listed for <a
            href="https://www.stet.eu" target="_blank">STET</a>’s purpose code
            and <a href="https://www.openbanking.org.uk" target="_blank">OBIE's
            </a> standards.
          type: string
          example: DVPM
          enum:
            - CASH
            - CORT
            - DVPM
            - INTC
            - TREA
        merchantCategoryCode:
          description: >-
            The category code conforming to <a
            href="https://www.iso.org/standard/33365.html" target="_blank">ISO
            18245</a>, relating to the type of services or goods provided by the
            merchant. A list of codes can be purchased <a
            href="https://www.iso.org/standard/79450.html"
            target="_blank">here</a>."
          type: string
          example: '4812'
        beneficiaryAccountType:
          description: This information should be provided if the `AccountType` is known.
          type: string
          example: BUSINESS
          enum:
            - PERSONAL
            - JOINT_PERSONAL
            - PERSONAL_SAVINGS_ACCOUNT
            - BUSINESS
            - BUSINESS_SAVINGS_ACCOUNT
            - CHARITY
            - COLLECTION
            - CORPORATE
            - GOVERNMENT
            - EWALLET
            - INVESTMENT
            - ISA
            - PREMIER
            - WEALTH
            - PENSION
        contractPresentIndicator:
          description: >-
            This field indicates whether a Payee has a contractual relationship
            with the Payment Initiation Service Provider (PISP).
          type: boolean
          example: true
        beneficiaryPrepopulatedIndicator:
          description: >-
            This field indicates whether the Payment Initiation Service Provider
            (PISP) has immutably prepopulated payment details for the user.
          type: boolean
          example: true
    RefundAccount:
      description: The account to which the refund should be sent.
      allOf:
        - oneOf:
            - $ref: '#/components/schemas/FasterPaymentsAccount'
        - type: object
          properties:
            name:
              description: The name of the account owner.
              type: string
              example: John Smith
    Authenticationv2:
      description: >-
        The authentication operation required to proceed with payment creation.
        This is present when additional steps are required to authorize the
        payment.
      type: object
      oneOf:
        - $ref: '#/components/schemas/RedirectUrl'
        - $ref: '#/components/schemas/EmbeddedAuth'
    RedirectUrl:
      required:
        - redirectUrl
      type: object
      properties:
        redirectUrl:
          description: >-
            The url used to redirect the user to in order to authorize the
            consent creation. This should be populated if the payment status is
            `INITIATION_PENDING_REDIRECT_AUTH`.<br/> If the status is:
            INITIATION_PENDING_REDIRECT_AUTH, the authentication object should
            have the redirectUrl. Redirect the user to this url in order to
            proceed with the flow.<br/> If the TPP is responsible for handling
            the callbacks, the bank will callback to the TPP's callbackUrl
            provided in the payment initiation, after the user finishes
            authentication at the bank. Send the query of the bank's callback
            url to Token.io via the POST /callback/initiation endpoint to
            proceed with the flow.<br/> Otherwise Token.io will receive the
            callback from the bank and callback the TPP when the bank callback
            is processed. Fetch the payment object and check its status for
            further steps, if any.
          type: string
          example: http://psu-redirect.com
    EmbeddedAuth:
      description: >-
        Information and fields presented to the user in order to collect the
        requested data. This should be populated if the payment status is
        `INITIATION_PENDING_EMBEDDED_AUTH`.<br/> If the status is:
        INITIATION_PENDING_EMBEDDED_AUTH, the authentication object should list
        the required embedded fields. Collect the data from the user and provide
        it using POST /v2/payments/{paymentId}/embedded-auth to proceed with the
        flow.
      required:
        - fields
      type: object
      properties:
        description:
          description: >-
            The text displayed to a user. This should contain the instructions
            the user needs to proceed with the authentication.
          type: string
          example: Instructions for authentication.
        image:
          description: A Base64 representation of an image displayed to the user.
          type: string
          example: YWJAeXoyWhAeXohteQ
        flickerCode:
          description: The Flicker code displayed to the user.
          type: string
          example: FLICKERCODE
        fields:
          description: >-
            The required fields. The values for these are collected from the
            user.
          type: array
          items:
            $ref: '#/components/schemas/RequiredField'
        isRetry:
          description: >-
            This field indicates whether the previously submitted values are
            incorrect and whether the user needs to retry. If `isRetry` = true,
            the values are resubmitted. Default = false.
          type: boolean
          example: false
    RequiredField:
      required:
        - displayName
        - id
        - type
      type: object
      properties:
        type:
          description: >-
            The field type that determines how the field is presented to the
            user. <br/><br/> FIELD - displays a form with a text input field,
            use `displayName` value to add a label<br/><br/> PASSWORD - displays
            a form with a password input field, use `displayName` value to add a
            label<br/><br/> CHOICE_FIELD - displays a form that allows the user
            to choose one of the provided options, use `displayName` value to
            add a label<br/><br/> CONFIRMATION - displays the buttons for the
            provided options, usually the description contains a question that
            requires confirmation or rejection.
          type: string
          enum:
            - FIELD
            - PASSWORD
            - CHOICE_FIELD
            - CONFIRMATION
        id:
          description: The ID used when passing the value of this field to Token.io.
          type: string
          example: '67891234'
        displayName:
          description: The name of the requested field displayed to the user.
          type: string
          example: 'Password:'
        options:
          description: >-
            A list of options for the user to select from. For example, it can
            be an SCA method choice (SMS message, phone call <i>etc</i>.), or
            confirm/decline options for a confirmation page. The customer sends
            one of the values back to Token.io with the corresponding id.
          type: array
          items:
            type: string
    Error:
      description: >-
        The request does not have valid authentication credentials needed to
        perform the operation.
      type: object
      properties:
        message:
          description: A description of the error.
          type: string
          example: This is a description of the error.
        tokenTraceId:
          description: The trace identifier for the given call.
          type: string
          example: '5678912345'
    ServerError:
      description: >-
        This could refer to either an error on Token.io’s end or an error on the
        bank side. When the bank reports a 5xx error, Token.io sets
        `"token-external-error": "true"` as a header in the HTTP response,
        indicating that the "internal" error originates from the  When one of
        Token.io's internal services fails or when the bank reports a 4xx error,
        this header is not populated. The absence of this response header should
        be interpreted as `"token-external-error": "false"`.
      type: object
      properties:
        message:
          description: A description of the error.
          type: string
          example: This is a description of the error.
        tokenTraceId:
          description: The trace identifier for the given call.
          type: string
          example: '5678912345'
    inline_response_400:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    inline_response_401:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    inline_response_403:
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    inline_response_404:
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    inline_response_429:
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    inline_response_500:
      properties:
        error:
          allOf:
            - type: object
              properties:
                errorCode:
                  description: This is a textual error code categorising the error.
                  type: string
                  example: InternalServerError
            - $ref: '#/components/schemas/ServerError'
    inline_response_501:
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    inline_response_503:
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    inline_response_504:
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    inline_response_400_1:
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    vrpconsents_body:
      required:
        - initiation
      type: object
      properties:
        initiation:
          $ref: '#/components/schemas/VrpConsentInitiation'
        pispConsentAccepted:
          description: >-
            A flag confirming that the user has accepted the Payment Initiation
            Service Provider's (PISP) consent. ***This field is only required
            for TPPs using Token.io's licence.***
          type: boolean
    inline_response_400_2:
      required:
        - error
      type: object
      properties:
        error:
          oneOf:
            - $ref: '#/components/schemas/Error'
            - $ref: '#/components/schemas/Error'
            - $ref: '#/components/schemas/Error'
    inline_response_404_1:
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    vrps_body:
      required:
        - initiation
      type: object
      properties:
        initiation:
          $ref: '#/components/schemas/VrpInitiation'
    inline_response_400_3:
      required:
        - error
      type: object
      properties:
        error:
          oneOf:
            - $ref: '#/components/schemas/Error'
            - $ref: '#/components/schemas/Error'
            - $ref: '#/components/schemas/Error'
            - $ref: '#/components/schemas/Error'
    inline_response_404_2:
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    refunds_body:
      required:
        - initiation
      type: object
      properties:
        initiation:
          $ref: '#/components/schemas/RefundInitiation'
    payouts_body:
      required:
        - initiation
      type: object
      properties:
        initiation:
          $ref: '#/components/schemas/PayoutInitiation'
    v2_payments_body:
      required:
        - initiation
      type: object
      properties:
        initiation:
          $ref: '#/components/schemas/PaymentInitiation'
        pispConsentAccepted:
          description: >-
            This field confirms whether or not the user has accepted Payment
            Initiation Service Provider (PISP) consent. ***This field is only
            required for TPPs using Token.io's licence.***
          type: boolean
          example: false
          default: false
        initialEmbeddedAuth:
          description: >-
            This field provides a map of the initial embedded authentication
            fields, with their values. The list of the required initial
            credentials can be found in the bank metadata. Please use the id of
            each field as a key in the map. <br/><br/> Using this field is
            optional. Even if a bank requires initial embedded authentication
            fields, you may choose not to populate the `initialEmbeddedAuth`
            field. In this case you'll be able to provide these fields later in
            the flow as part of an embedded authentication step.
          type: object
          properties: {}
          additionalProperties:
            type: string
          example:
            username: John Smith
    paymentIdEmbeddedAuthBody:
      type: object
      properties:
        embeddedAuth:
          $ref: '#/components/schemas/EmbeddedAuthFields'
    inline_response_400_4:
      required:
        - error
      type: object
      properties:
        error:
          oneOf:
            - $ref: '#/components/schemas/Error'
            - $ref: '#/components/schemas/Error'
    keyAndCertificate_keyAndCertificate:
      type: object
      properties:
        privateKey:
          description: The key used for the refund.
          type: string
          example: xxxxxxxx
        certificate:
          description: The certificate used for the refund.
          type: string
          example: xxxxx
        certificateName:
          description: The name of the certificate used for the refund.
          type: string
          example: QWAC_PSDGB-FCA-795904
    keys_keys:
      type: object
      properties:
        privateKey:
          description: The private key used for the refund.
          type: string
          example: xxxxxxxx
        publicKey:
          description: The public key used for the refund.
          type: string
          example: xxxxx
    MandatoryFieldsv2_inner:
      type: object
      properties:
        products:
          description: The products this mandatory fields entry applies to.
          type: array
          items:
            type: string
            example: SIP
        fieldPaths:
          description: The paths to the mandatory fields for this entry.
          type: array
          items:
            type: string
            example: initiation.debtor
        paymentTypes:
          description: >-
            The types of payments (International/Domestic) this mandatory fields
            entry applies to.
          type: array
          items:
            type: string
            example: International
        localInstruments:
          description: The local instruments this mandatory fields entry applies to.
          type: array
          items:
            type: string
            example: SEPA
    CreateVirtualAccountRequest:
      description: Contains the request payload to create a virtual account.
      required:
        - currency
        - country
      type: object
      properties:
        accountNickName:
          description: The alias name that identifies the virtual account.
          type: string
          example: Account Alias
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        onBehalfOfId:
          description: >-
            Specifies another SubTpp or Merchant for whom the account was
            created 'on behalf of'.
          type: string
          example:
            - c5a863bc-86f2-4418-a26f-25b24c7983c7
            - 6f34h397-b29h-23b0-s30g-hkd0d2dk4k1s
        country:
          description: 2-letter ISO 3166-1 alpha-2 country code
          maxLength: 2
          minLength: 2
          type: string
    CreateVirtualAccountResponse:
      description: Contains the response to the submitted request.
      type: object
      properties:
        virtualAccount:
          $ref: '#/components/schemas/VirtualAccount'
    GetVirtualAccountByIdResponse:
      description: Contains the response to the create virtual account request.
      type: object
      properties:
        virtualAccount:
          $ref: '#/components/schemas/VirtualAccount'
    GetVirtualAccountsResponse:
      description: Contains the response to the get virtual accounts request.
      type: object
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        virtualAccount:
          items:
            $ref: '#/components/schemas/VirtualAccount'
          type: array
    VirtualAccount.Status:
      example: ACTIVE
      default: INVALID
      type: string
      enum:
        - INVALID
        - ACTIVE
        - CLOSED
        - BLOCKED
        - CLIENT_BLOCKED
    VirtualAccount:
      type: object
      properties:
        accountId:
          description: >-
            The system-generated, unique bank account id, which specifies the
            account.
          type: string
          example: pa:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
        accountName:
          description: The name of this account.
          type: string
          example: Account Name
        accountNickName:
          description: The alias name that identifies the virtual account.
          type: string
          example: Account Alias
        accountNumber:
          description: The unique identifier for the bank account in the UK or Ireland.
          type: string
          example: '12345678'
        availableBalance:
          description: >-
            The available account balance at the time of the query. For example,
            the previous day's closing balance +/- transactions during the day,
            and any overdraft facilities.
          type: string
          example: 1572.38
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: BOFIIE2D
        bookedBalance:
          description: >-
            The account balance pending clearance, which may include uncleared
            items and any transactions yet to settle.
          type: string
          example: 1282.79
        clearedBalance:
          description: >-
            The cash balance in an account that can be immediately withdrawn or
            used in financial transactions. Until funds have cleared, they're
            considered to be pending and customers are unable to use them in
            transactions.
          type: string
          example: 1167.32
        country:
          description: >-
            A nation with its own government, occupying a particular territory
            containing the address.
          type: string
          example: UK
        createdDateTime:
          description: >-
            The date this account was created (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          format: string
          example: '2021-08-11'
        currency:
          description: >-
            The <a href="https://www.iso.org/iso-4217-currency-codes.html"
            target="_blank">ISO 4217</a> three letter currency code.
          type: string
          example: EUR
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        sortCode:
          description: >-
            The number assigned to a branch of a bank, typically containing six
            digits and most commonly used in the UK and Ireland.
          type: string
          example: 123456
        status:
          $ref: '#/components/schemas/VirtualAccount.Status'
        updatedDateTime:
          description: >-
            The date and time this account was last updated (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          format: string
        onBehalfOfId:
          description: >-
            An id of the ultimate client on whose behalf the account is created.
            If the account is created on behalf of a sub-TPP, this field will
            contain the sub-TPP `referenceId`.
          type: string
          example: c5a863bc-86f2-4418-a26f-25b24c7983c7
    CreateVirtualAccountSettlementRuleRequest:
      description: >-
        Contains the request payload to create a virtual account settlement
        rule.
      required:
        - accountId
        - payeeAccountDetails
        - amountType
        - amountValue
        - timeInterval
      type: object
      properties:
        accountId:
          description: The id of the payer virtual account.
          type: string
          example: pa:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
        payeeAccountDetails:
          $ref: '#/components/schemas/Creditor'
        amountType:
          $ref: '#/components/schemas/AmountType'
        amountValue:
          description: The value of the amount.
          type: string
          example: 10
        timeInterval:
          $ref: '#/components/schemas/TimeInterval'
        effectiveFrom:
          description: >-
            The start date of the settlement rule is formatted as
            `YYYY-MM-DDTHH:MM:SSZ`.
          type: string
          example: '2024-01-01T12:34:56Z'
        effectiveTo:
          description: >-
            The end date of the settlement rule is formatted as
            `YYYY-MM-DDTHH:MM:SSZ`.
          type: string
          example: '2024-12-01T12:34:56Z'
        intradayIntervalHours:
          description: The intraday interval hours.
          type: integer
          format: int32
          example: 2
        intradayIntervalMinutes:
          description: The intraday interval minutes.
          type: integer
          format: int32
          example: 10
    CreateVirtualAccountSettlementRuleResponse:
      description: >-
        Contains the response of the create virtual account settlement rule
        request.
      type: object
      properties:
        settlementRuleId:
          description: The id of the settlement rule.
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
    GetVirtualAccountSettlementRuleResponse:
      description: >-
        Contains the response of the get virtual account settlement rule
        request.
      type: object
      properties:
        settlementRule:
          $ref: '#/components/schemas/SettlementRule'
    DeleteVirtualAccountSettlementRuleResponse:
      description: No data returned in the successful response.
      type: object
    GetVirtualAccountSettlementRulesRequest:
      description: Contains the request payload to get virtual account settlement rules.
      type: object
      required:
        - accountId
      properties:
        accountId:
          description: Virtual account id.
          type: string
          example: pa:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
        status:
          $ref: '#/components/schemas/SettlementRuleStatus'
    GetVirtualAccountSettlementPayoutsRequest:
      description: Contains the request payload to get virtual account settlement payouts.
      type: object
      required:
        - accountId
      properties:
        accountId:
          description: The virtual account id.
          type: string
          example: pa:8DbPteGnytmMbKXdnWTReeRB6cYWKXZ84JgLTBC7fKL4:5zKcENpV
        limit:
          description: The maximum number of items to return in the response.
          type: integer
          format: int32
          example: 10
        offset:
          description: The offset of the first item to return in the response.
          type: string
          example: LerV6Jmex
        settlementRuleId:
          description: The id of the settlement rule.
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        startDate:
          description: The start date of the settlement rule payout.
          type: string
          example: '2024-01-01'
        endDate:
          description: The end date of the settlement rule payout.
          type: string
          example: '2024-12-01'
        ids:
          description: The list of payout ids.
          type: array
          items:
            type: string
          example:
            - 123e4567-e89b-12d3-a456-426614174000
        invertIds:
          description: >-
            If true, the response will contain all settlement rule payouts
            except those specified in the `ids` field.
          type: boolean
          example: false
        statuses:
          description: The list of payout statuses.
          type: array
          items:
            type: string
          example:
            - INITIATION_PENDING
            - INITIATION_PROCESSING
        invertStatuses:
          description: >-
            If true, the response will contain all settlement rule payouts
            except those specified in the `statuses` field.
          type: boolean
          example: false
        refIds:
          description: The list of settlement payout reference ids.
          type: array
          items:
            type: string
          example:
            - ShBdcTeqFabqJJhUF
        onBehalfOfId:
          description: >-
            Specifies another sub-TPP or merchant for whom the payout was
            created 'on behalf of'.
          type: string
          example:
            - c5a863bc-86f2-4418-a26f-25b24c7983c7
    GetVirtualAccountSettlementRulesResponse:
      description: >-
        Contains the response of the get virtual account settlement rules
        request.
      type: object
      properties:
        settlementRule:
          type: array
          items:
            $ref: '#/components/schemas/SettlementRule'
    GetVirtualAccountSettlementPayoutsResponse:
      description: >-
        Contains the response of the get virtual account settlement payouts
        request.
      type: object
      properties:
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
        payouts:
          items:
            type: array
            $ref: '#/components/schemas/SettlementRulePayout'
            items:
              description: >-
                WARNING: Missing items property in array schema. Missing items
                property has been filled with this AnyType schema.
          type: array
    SettlementRulePayout:
      description: The payout object.
      type: object
      properties:
        description:
          description: The description of the payout.
          type: string
          example: Description of the payout
        id:
          description: The Token.io generated payout id.
          type: string
          example: py:12345abcd:abcd
        bankTransactionId:
          description: >-
            The transaction id from the bank side. This can be empty if it is
            not available from the bank.
          type: string
          example: 2UhwCZ3BMaEcAUK8bZdukor7NL4tH6TBuu6aJMp5KKfX:5zKcENpV
        memberId:
          description: The Token.io member id of the TPP initiating this payout.
          type: string
          example: m:123456abcd:abcd
        createdDateTime:
          description: >-
            The date and time this payout object was created The time this
            payment object was created (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2024-04-05T00:00:00.000+00:00'
        updatedDateTime:
          description: >-
            The date and time the current status, sub status, status reason
            information and authentication were last updated (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2024-04-05T00:00:00.000+00:00'
        status:
          $ref: '#/components/schemas/PayoutStatus'
        bankPaymentStatus:
          description: >-
            The raw bank status. This field could be empty if no payment status
            is available on bank side.
          type: string
          example: ACPC
        statusReasonInformation:
          description: >-
            A human-readable description of the reason for the reported status,
            which may include a message from the bank. This value should not
            exceed 256 characters in length.
          type: string
          example: The payment is settled on debtor side.
        initiation:
          $ref: '#/components/schemas/PayoutInitiation'
        reference:
          description: The reference id of the payout.
          type: string
          example: ShBdcTeqFabqJJhUF
        settlementRuleId:
          description: The id of the settlement rule.
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
    SettlementRule:
      type: object
      properties:
        settlementRuleId:
          description: The id of the settlement rule.
          type: string
          format: uuid
        payerAccountId:
          description: The id of the payer virtual account.
          type: string
        payee_account_details:
          $ref: '#/components/schemas/Creditor'
        amountType:
          $ref: '#/components/schemas/AmountType'
        amountValue:
          description: The value of the amount.
          type: string
        effectiveFrom:
          description: >-
            The start date of the settlement rule is formatted as `YYYY-MM-DD`
            if the time interval is not INTRADAY. Otherwise, it is formatted as
            `YYYY-MM-DDTHH:MM:SSZ`.
          type: string
        effectiveTo:
          description: >-
            The end date of the settlement rule is formatted as `YYYY-MM-DD` if
            the time interval is not INTRADAY. Otherwise, it is formatted as
            `YYYY-MM-DDTHH:MM:SSZ`.
          type: string
        timeInterval:
          $ref: '#/components/schemas/TimeInterval'
        status:
          $ref: '#/components/schemas/SettlementRuleStatus'
    Creditor:
      type: object
      properties:
        name:
          description: The owner name for the creditor account.
          type: string
          example: Customer Inc.
        ultimateCreditorName:
          description: The ultimate creditor name.
          type: string
          example: Customer Inc.
        bankName:
          description: The creditor's bank name.
          type: string
        accountNumber:
          description: The unique identifier for the bank account in the UK or Ireland.
          type: string
          example: '12345678'
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: HBUKGB7F261
        iban:
          description: >-
            The International Bank Account Number, used when sending interbank
            transfers or wiring money from one bank to another, especially
            across international borders. It consists of a two-letter country
            code followed by two check digits and up to thirty-five alphanumeric
            characters.
          type: string
          example: GB29NWBK60161331926819
        sortCode:
          description: >-
            The number assigned to a branch of a bank, typically containing six
            digits and most commonly used in the UK and Ireland.
          type: string
          example: 123456
    SettlementRuleStatus:
      description: The status of the settlement rule.
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    AmountType:
      description: The type of the amount.
      type: string
      enum:
        - FIXED_VALUE
        - PERCENTAGE
    TimeInterval:
      description: The time interval.
      type: string
      enum:
        - INTRADAY
        - DAILY
        - WEEKLY
        - MONTHLY
        - QUARTERLY
        - HALF_YEARLY
        - YEARLY
    MaintenanceWindow:
      description: Details of the bank's planned or unplanned maintenance window.
      type: array
      items:
        $ref: '#/components/schemas/maintenance'
    maintenance:
      type: object
      properties:
        startTime:
          description: >-
            The start time of the maintenance window (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2023-05-03T12:28:20.466Z'
        endTime:
          description: >-
            The end time of the maintenance window (in <a
            href="https://www.iso.org/iso-8601-date-and-time-format.html"
            target="_blank">ISO 8601</a> format).
          type: string
          example: '2023-05-03T12:40:25.47Z'
        type:
          description: >-
            The bank status:<ul><li><b>NO_DOWNTIME_EXPECTED</b> - the bank is
            currently connected, accepting API calls, and returning appropriate
            responses</li><li><b>DOWNTIME_EXPECTED</b> - there is a planned
            outage between the `startTime` and `endTime`
            specified</li><li><b>OUTAGE</b> - connection interrupted; the bank
            cannot currently accept API calls for this service between the
            `startTime` and `endTime` specified</li>
          type: string
          example: OUTAGE
          default: INVALID
          enum:
            - INVALID
            - NO_DOWNTIME_EXPECTED
            - DOWNTIME_EXPECTED
            - OUTAGE
        productType:
          description: >-
            The bank product:<ul><li><b>AIS</b> - Account Information
            Services</li><li><b>SIP</b> - all payment services including Single
            Immediate Payments, Future Dated Payments, Standing Orders</li>
          type: string
          example: SIP
          default: INVALID
          enum:
            - INVALID
            - AIS
            - SIP
    StandingOrder:
      description: Contains the list of requested standing order records retrieved.
      type: object
      properties:
        createdAtMs:
          description: >-
            Specifies the time the transfer was created; timestamp (UTC) in
            milliseconds, 1 day (24 hours) = 8640000000, 1 hour = 36000000, and
            1 minute = 60000.
          type: string
          format: string
          example: '324754373'
        creditorEndpoint:
          $ref: '#/components/schemas/CreditorEndpoint'
        frequency:
          description: >-
            Specifies the <a href="https://www.iso.org/standard/55005.html"
            target="_blank">ISO 20022</a> code for the scheduled frequency of
            standing order payments occurring between the first and final
            payments. Options:<ul><li>DAIL - daily/once a day</li><li>WEEK -
            weekly/once a week</li><li>TOWK - twice weekly/two times a
            week</li><li>MNTH - monthly/once a month</li><li>TOMN - twice
            monthly/two times a month</li><li>QUTR - quarterly/once every three
            months</li><li>SEMI - semi-annually/twice a year</li><li>YEAR -
            annually/once a year</li></ul>
          type: string
          example: WEEK
        id:
          description: >-
            The standing order identifier; labelled standingOrderId in specific
            standing order access requests.
          type: string
          example: tt:83KiRJuXmEDV5m2b8ZvLGE91ELf7PPw5BaDab98kMguu:3VMczyq7r7b6HwC
        providerStandingOrderDetails:
          $ref: '#/components/schemas/ProviderStandingOrderDetails'
        status:
          $ref: '#/components/schemas/StandingOrderStatus'
        tokenId:
          description: >-
            Access token ID of the account information request authorised by the
            account holder.
          type: string
          example: tt:8zK1dic95omjWb72gvc3z3ELKbTNfnGd89MbDnM73er4:ZhBVAJSH8DeU1
        tokenSubmissionId:
          description: >-
            The submission ID of the standing order information request; it
            points to the token submission and is only set for Token.io standing
            orders.
          type: string
          example: '12345678'
    StandingOrderStatus:
      description: The current status of the standing order.
      type: string
      example: PROCESSING
      default: INVALID
      enum:
        - INVALID
        - ACTIVE
        - INACTIVE
        - PROCESSING
        - FAILED
        - UNKNOWN
    GetStandingOrderResponse:
      type: object
      properties:
        standingOrder:
          $ref: '#/components/schemas/StandingOrder'
        status:
          $ref: '#/components/schemas/RequestStatus'
    GetStandingOrdersResponse:
      type: object
      properties:
        offset:
          description: The offset of the first item returned in the collection.
          type: string
          example: LerV6Jmex
        standingOrders:
          type: array
          items:
            $ref: '#/components/schemas/StandingOrder'
        status:
          $ref: '#/components/schemas/RequestStatus'
    CreditorEndpoint:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/BankAccount'
        accountFeatures:
          $ref: '#/components/schemas/AccountFeatures'
        metadata:
          $ref: '#/components/schemas/StandingOrderMetadataEntry'
        accountIdentifier:
          $ref: '#/components/schemas/AccountIdentifier'
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: ob-modelo
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: BOFIIE2D
        customerData:
          $ref: '#/components/schemas/CustomerData'
    ProviderStandingOrderDetails:
      type: object
      properties:
        cma9StandingOrderDetails:
          $ref: '#/components/schemas/Cma9StandingOrderDetails'
    BankAccount:
      description: Specifies information about the bank account.
      type: object
      oneOf:
        - title: Custom
          properties:
            custom:
              $ref: '#/components/schemas/Custom'
        - title: Domestic
          properties:
            domestic:
              $ref: '#/components/schemas/Domestic'
        - title: Iban
          properties:
            iban:
              $ref: '#/components/schemas/Iban'
        - title: token
          properties:
            token:
              $ref: '#/components/schemas/StandingOrderToken'
    Custom:
      description: Custom authorization.
      type: object
      properties:
        bankId:
          description: >-
            The Token.io bank identifier, identical to the `id` in the repsonse
            to `GET /banks`.
          type: string
          example: ob-modelo
        payload:
          description: The standing order payload.
          type: string
          example: sdfjds12-f85-46b0-8058-343dek543grt
    Domestic:
      description: A domestic bank account in the UK.
      type: object
      properties:
        accountNumber:
          description: The unique identifier for the bank account.
          type: string
          example: '12345678'
        bankCode:
          description: >-
            The number assigned to a branch of a bank, typically containing six
            digits and most commonly used in the UK and Ireland.
          type: string
          example: '123456'
        country:
          description: >-
            The country identified by the <a
            href="https://www.iso.org/obp/ui/#search" target="_blank">ISO 3166-1
            Alpha 2 country codes</a>.
          type: string
          example: GB
    Iban:
      type: object
      properties:
        bic:
          description: >-
            The Business Identifier Code (BIC), <a
            href="https://www.iso.org/standard/84108.html" target="_blank">ISO
            9362</a>, is the SWIFT Address assigned to a bank in order to send
            automated payments quickly and accurately to the banks concerned. It
            uniquely identifies the name and country, (and sometimes the branch)
            of the bank involved. BICs are often called SWIFT Codes and can be
            either 8 or 11 characters long."
          type: string
          example: BOFIIE2D
        iban:
          description: >-
            The International Bank Account Number. This consists of a two-letter
            country code followed by two check digits and up to thirty-five
            alphanumeric characters.
          type: string
          example: GB29NWBK60161331926819
    StandingOrderMetadataEntry:
      description: >-
        Additional fields returned by the bank at its option in response to your
        particular request. The presence and type of metadata are entirely
        dependent on the bank and generally comprise additional information
        about the account or the transaction pertinent to your specific use
        case. How you use this information, when included in the bank's
        response, is at your discretion.
      type: object
      additionalProperties:
        type: string
    StandingOrderToken:
      type: object
      properties:
        accountId:
          description: >-
            The account id. Available account ids can be found in the account
            info consent.
          type: string
        memberId:
          description: The Token.io-generated member id for the user/account holder.
          type: string
          example: m:nP4w3u5y8ddrxDJkjimgSX9e4fZ:5zKtXEAq
    Cma9StandingOrderDetails:
      description: >-
        Specifies applicable non-standard (varied frequency and payment amount)
        recurring payment instructions and schedule.
      type: object
      properties:
        creditorAccount:
          allOf:
            - $ref: '#/components/schemas/CashAccount'
            - description: Specifies the payee's account with the creditor.
        finalPaymentAmount:
          allOf:
            - $ref: '#/components/schemas/Money'
            - description: The amount of the final payment.
        finalPaymentDateTime:
          description: >-
            The date and time of the final payment made under the standing
            order.
          type: string
        firstPaymentAmount:
          allOf:
            - $ref: '#/components/schemas/Money'
            - description: The amount of the first payment.
        firstPaymentDateTime:
          description: >-
            The date and time of the first payment made under the standing
            order.
          type: string
        frequency:
          description: >-
            Specifies the <a href="https://www.iso.org/standard/55005.html"
            target="_blank">ISO 20022</a> code for the scheduled frequency of
            standing order payments occurring between the first and final
            payments. Options:<ul><li>DAIL - daily/once a day</li><li>WEEK -
            weekly/once a week</li><li>TOWK - twice weekly/two times a
            week</li><li>MNTH - monthly/once a month</li><li>TOMN - twice
            monthly/two times a month</li><li>QUTR - quarterly/once every three
            months</li><li>SEMI - semi-annually/twice a year</li><li>YEAR -
            annually/once a year</li></ul>
          type: string
          example: WEEK
        nextPaymentAmount:
          allOf:
            - $ref: '#/components/schemas/Money'
            - description: The amount of the next payment.
        nextPaymentDateTime:
          description: The Date and time of the next standing order payment.
          type: string
        numberOfPayments:
          description: The number of payments made under the standing order.
          type: integer
          format: int32
        reference:
          description: The reference for the CMA9 standing order.
          type: string
    CashAccount:
      type: object
      properties:
        identification:
          type: string
        name:
          type: string
        schemeName:
          type: string
    AccountsGetAllAccountsResponse:
      type: object
      properties: {}
      example: {}
    AccountsGetInfoResponse:
      type: object
      properties: {}
      example: {}
    AccountsGetMultipleBalancesResponse:
      type: object
      properties: {}
      example: {}
    AccountsGetBalanceResponse:
      type: object
      properties: {}
      example: {}
    AccountsGetStandingOrdersResponse:
      type: object
      properties: {}
      example: {}
    AccountsGetTransactionsResponse:
      type: object
      properties: {}
      example: {}
    AccountsGetTransactionDetailsResponse:
      type: object
      properties: {}
      example: {}
    AccountsConfirmFundsAvailabilityResponse:
      type: object
      properties: {}
      example: {}
    BanksV1GetListResponse:
      type: object
      properties: {}
      example: {}
    BanksV1GetBankCountriesResponse:
      type: object
      properties: {}
      example: {}
    SubTpPsGetListResponse:
      type: object
      properties: {}
      example: {}
    SubTpPsCreateSubTppResponse:
      type: object
      properties: {}
      example: {}
    SubTpPsDeleteSubTppResponse:
      type: object
      properties: {}
      example: {}
    SubTpPsGetSubTppInfoResponse:
      type: object
      properties: {}
      example: {}
    SubTpPsGetChildrenResponse:
      type: object
      properties: {}
      example: {}
    ReportsGetBankStatusResponse:
      type: object
      properties: {}
      example: {}
    ReportsBankStatusResponse:
      type: object
      properties: {}
      example: {}
    RequestsInitiateTokenRequestResponse:
      type: object
      properties: {}
      example: {}
    RequestsCheckTokenResultResponse:
      type: object
      properties: {}
      example: {}
    TspProcessBankCallbackResponse:
      type: object
      properties: {}
      example: {}
    TokensGetAllResponse:
      type: object
      properties: {}
      example: {}
    TokensGetInfoResponse:
      type: object
      properties: {}
      example: {}
    TokensCancelTokenResponse:
      type: object
      properties: {}
      example: {}
    SingleImmediatePaymentsV1GetTransfersResponse:
      type: object
      properties: {}
      example: {}
    SingleImmediatePaymentsV1CreateTransferRequestResponse:
      type: object
      properties: {}
      example: {}
    SingleImmediatePaymentsV1InitiateBankAuthorizationResponse:
      type: object
      properties: {}
      example: {}
    SingleImmediatePaymentsV1GetTransferDetailsResponse:
      type: object
      properties: {}
      example: {}
    WebhooksDeleteConfigResponse:
      type: object
      properties: {}
      example: {}
    WebhooksGetConfigResponse:
      type: object
      properties: {}
      example: {}
    WebhooksSetConfigResponse:
      type: object
      properties: {}
      example: {}
    VariableRecurringPaymentsGetConsentsResponse:
      type: object
      properties: {}
      example: {}
    VariableRecurringPaymentsCreateConsentResponse:
      type: object
      properties: {}
      example: {}
    VariableRecurringPaymentsRevokeConsentResponse:
      type: object
      properties: {}
      example: {}
    VariableRecurringPaymentsGetConsentDetailsResponse:
      type: object
      properties: {}
      example: {}
    VariableRecurringPaymentsGetPaymentsUnderConsentResponse:
      type: object
      properties: {}
      example: {}
    VariableRecurringPaymentsListPaymentsResponse:
      type: object
      properties: {}
      example: {}
    VariableRecurringPaymentsInitiatePaymentResponse:
      type: object
      properties: {}
      example: {}
    VariableRecurringPaymentsGetPaymentDetailsResponse:
      type: object
      properties: {}
      example: {}
    VariableRecurringPaymentsCheckFundsAvailabilityResponse:
      type: object
      properties: {}
      example: {}
    RefundsBetaGetListResponse:
      type: object
      properties: {}
      example: {}
    RefundsBetaInitiateRefundResponse:
      type: object
      properties: {}
      example: {}
    RefundsBetaGetRefundResponse:
      type: object
      properties: {}
      example: {}
    RefundsBetaGetAllRefundsResponse:
      type: object
      properties: {}
      example: {}
    PayoutsBetaGetListResponse:
      type: object
      properties: {}
      example: {}
    PayoutsBetaInitializePayoutResponse:
      type: object
      properties: {}
      example: {}
    PayoutsBetaGetPayoutResponse:
      type: object
      properties: {}
      example: {}
    RefundsBetaUploadKeyAndCertificateResponse:
      type: object
      properties: {}
      example: {}
    BanksV2GetListResponse:
      type: object
      properties: {}
      example: {}
    SingleImmediatePaymentsV2ListPaymentsResponse:
      type: object
      properties: {}
      example: {}
    SingleImmediatePaymentsV2InitiatePaymentResponse:
      type: object
      properties: {}
      example: {}
    SingleImmediatePaymentsV2ProvideEmbeddedAuthInfoResponse:
      type: object
      properties: {}
      example: {}
    SingleImmediatePaymentsV2GetPaymentDetailsResponse:
      type: object
      properties: {}
      example: {}
    VirtualAccountsBetaGetAllResponse:
      type: object
      properties: {}
      example: {}
  securitySchemes:
    BasicAuth:
      description: >-
        When using curl samples the authorization header is given as -H
        `'Authorization: YOUR_API_KEY_HERE'`<br/>Please substitute your Basic
        key here.<br/>For example:<br/> -H `'Authorization: Basic
        bS0zanhoS3pqRjRSWFQ1dHZLTlhMQU14cm80d0E1LTV6S3RYRUFxOmU1MWZjZDQ0LTM5MGQtNDYxZi04YjA0LTEyMjcxOTg4YWYwNg=='`
      type: apiKey
      name: Authorization
      in: header
    Bearer:
      description: >-
        When using curl samples the authorization header is given as -H
        `'Authorization: YOUR_API_KEY_HERE'`<br/>Please substitute your Bearer
        key here.<br/>For example:<br/> -H `'Authorization: Bearer
        eyJhbGciOiJFZERTQSIsImtpZCI6IjF4N2RmNHZ1RlVIWVFDYTciLCJtaWQiOiJtOlhUalhlMkFQZTRvdmVaalE4cHoyNGdEbUZEcTo1ekt0WEVBcSIsImhvc3QiOiJsb2NhbGhvc3Q6ODAwMCIsIm1ldGhvZCI6IlBPU1QiLCJwYXRoIjoiL2JhbmtzL2lyb24vdXNlcnMiLCJleHAiOjE1ODYyOTczNDQ3ODd9..bi3wxEoMHIul_F2f7gCDvgjHQKCjIyP9_SkQns-yXpS0UqoaOqSJrW89COexU71gt-mH3jH6mtp2aksEywvFDg'`<br/>Enter
        the JWT Bearer token only (see <a
        href="https://developer.token.io/token_rest_api_doc/content/e-rest/integration_considerations.htm#JWT"
        target="_blank">Using JWT Authentication</a> for more information).
      type: http
      scheme: bearer
      bearerFormat: JWT
