#!/usr/bin/env bash
#
# cats Bash Completion
# =======================
#
# Bash completion support for the `cats` command,
# generated by [picocli](https://picocli.info/) version 4.7.6.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `cats [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'cats (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_cats finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_cats() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} generate-completion" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} help" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} list" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} replay" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} run" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fuzz" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lint" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} info" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} stats" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} validate" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} random" ];    then _picocli_cats; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} generate" ];    then _picocli_cats; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(generate-completion)
  local cmds1=(help)
  local cmds2=(list)
  local cmds3=(replay)
  local cmds4=(run)
  local cmds5=(fuzz)
  local cmds6=(lint)
  local cmds7=(info)
  local cmds8=(stats)
  local cmds9=(validate)
  local cmds10=(random)
  local cmds11=(generate)

  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_cats_generate; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_cats_random; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_cats_validate; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_cats_stats; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_cats_info; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_cats_lint; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_cats_fuzz; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_cats_run; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_cats_replay; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_cats_list; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_cats_help; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_cats_generatecompletion; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_cats; return $?;
}

# Generates completions for the options and subcommands of the `cats` command.
function _picocli_cats() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="generate-completion help list replay run fuzz lint info stats validate random generate"
  local flag_opts="-A --checkHeaders -F --checkFields -T --checkHttp -C --checkContract --includeContract --includeLinters -W --includeWhitespaces -E --includeEmojis -U --includeControlChars --createRefData -d --dryRun --skipDeprecatedOperations --ignoreResponseCodeUndocumentedCheck --iu --ignoreResponseBodyCheck --ib --ignoreResponseContentTypeCheck --it -k --skipReportingForIgnoredCodes --skipReportingForIgnored --sri --srs --skipReportingForSuccess --srw --skipReportingForWarning -b --blackbox --useExamples --rfc7396 --allowInvalidEnumValues --generateXxxCombinationsForResponses --filterXxxFromRequestPayloads --useDefaults -D --debug --printExecutionStatistics --printDetailedExecutionStatistics --timestampReports -j --json --checkUpdate --color --printProgress --simpleReplace --matchInput --mi -h --help -V --version"
  local arg_opts="--maxRequestsPerMinute --connectionTimeout --writeTimeout --readTimeout --userAgent -c --contract -s --server --sslKeystore --sslKeystorePwd --sslKeyPwd --basicAuth --basicauth --proxyHost --proxyPort --authRefreshScript --ars --authRefreshInterval --ari --fuzzersConfig --fc --urlParams -P --headers -H --queryParams -Q --refData -R --functionalFuzzerFile --securityFuzzerFile --mutators -m -f --fuzzers --fuzzer -p --paths --path --skipPaths --skipPath --skipFuzzers --skipFuzzer --httpMethods --httpMethod -X --fieldTypes --fieldType --skipFieldTypes --skipFieldType --fieldFormats --fieldFormat --skipFieldFormats --skipFieldFormat --skipFields --skipField --skipHeaders --skipHeader -t --tags --tag --skipTags --skipTag -i --ignoreResponseCodes --ic --ignoreResponseSize --is --ignoreResponseWords --iw --ignoreResponseLines --il --ignoreResponseRegex --ir --fieldsFuzzingStrategy --maxFieldsToRemove --edgeSpacesStrategy --sanitizationStrategy --largeStringsSize --randomHeadersNumber --selfReferenceDepth -L --contentType --oneOfSelection --anyOfSelection --limitXxxOfCombinations -l --log -g --skipLog -O --onlyLog --reportFormat -o --output --maxResponseTimeInMs --verbosity --maskHeaders --words -w --matchResponseCodes --mc --matchResponseSize --ms --matchResponseWords --mw --matchResponseLines --ml --matchResponseRegex --mr"
  local httpMethods_option_args=("POST" "PUT" "GET" "TRACE" "DELETE" "PATCH" "HEAD" "CONNECT" "COPY" "MOVE" "PROPPATCH" "PROPFIND" "MKCOL" "LOCK" "UNLOCK" "SEARCH" "BIND" "UNBIND" "REBIND" "MKREDIRECTREF" "UPDATEREDIRECTREF" "ORDERPATCH" "ACL" "REPORT" "DIFF" "VERIFY" "PUBLISH" "UNPUBLISH" "BATCH" "VIEW" "PURGE" "DEBUG" "SUBSCRIBE" "UNSUBSCRIBE" "MERGE" "INDEX") # --httpMethods values
  local fieldTypes_option_args=("STRING" "NUMBER" "INTEGER" "BOOLEAN") # --fieldTypes values
  local skipFieldTypes_option_args=("STRING" "NUMBER" "INTEGER" "BOOLEAN") # --skipFieldTypes values
  local fieldFormats_option_args=("FLOAT" "DOUBLE" "INT32" "INT64" "DATE" "DATE_TIME" "PASSWORD" "BYTE" "BINARY" "EMAIL" "UUID" "URI" "URL" "HOSTNAME" "IPV4" "IPV6") # --fieldFormats values
  local skipFieldFormats_option_args=("FLOAT" "DOUBLE" "INT32" "INT64" "DATE" "DATE_TIME" "PASSWORD" "BYTE" "BINARY" "EMAIL" "UUID" "URI" "URL" "HOSTNAME" "IPV4" "IPV6") # --skipFieldFormats values
  local fieldsFuzzingStrategy_option_args=("POWERSET" "SIZE" "ONEBYONE") # --fieldsFuzzingStrategy values
  local edgeSpacesStrategy_option_args=("VALIDATE_AND_TRIM" "TRIM_AND_VALIDATE") # --edgeSpacesStrategy values
  local sanitizationStrategy_option_args=("VALIDATE_AND_SANITIZE" "SANITIZE_AND_VALIDATE") # --sanitizationStrategy values
  local reportFormat_option_args=("HTML_ONLY" "HTML_JS" "JUNIT") # --reportFormat values
  local verbosity_option_args=("SUMMARY" "DETAILED") # --verbosity values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --maxRequestsPerMinute)
      return
      ;;
    --connectionTimeout)
      return
      ;;
    --writeTimeout)
      return
      ;;
    --readTimeout)
      return
      ;;
    --userAgent)
      return
      ;;
    -c|--contract)
      return
      ;;
    -s|--server)
      return
      ;;
    --sslKeystore)
      return
      ;;
    --sslKeystorePwd)
      return
      ;;
    --sslKeyPwd)
      return
      ;;
    --basicAuth|--basicauth)
      return
      ;;
    --proxyHost)
      return
      ;;
    --proxyPort)
      return
      ;;
    --authRefreshScript|--ars)
      return
      ;;
    --authRefreshInterval|--ari)
      return
      ;;
    --fuzzersConfig|--fc)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --urlParams)
      return
      ;;
    -P)
      return
      ;;
    --headers)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -H)
      return
      ;;
    --queryParams)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -Q)
      return
      ;;
    --refData)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -R)
      return
      ;;
    --functionalFuzzerFile)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --securityFuzzerFile)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --mutators|-m)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--fuzzers|--fuzzer)
      return
      ;;
    -p|--paths|--path)
      return
      ;;
    --skipPaths|--skipPath)
      return
      ;;
    --skipFuzzers|--skipFuzzer)
      return
      ;;
    --httpMethods|--httpMethod|-X)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${httpMethods_option_args[@]}" ) )
      return $?
      ;;
    --fieldTypes|--fieldType)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${fieldTypes_option_args[@]}" ) )
      return $?
      ;;
    --skipFieldTypes|--skipFieldType)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${skipFieldTypes_option_args[@]}" ) )
      return $?
      ;;
    --fieldFormats|--fieldFormat)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${fieldFormats_option_args[@]}" ) )
      return $?
      ;;
    --skipFieldFormats|--skipFieldFormat)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${skipFieldFormats_option_args[@]}" ) )
      return $?
      ;;
    --skipFields|--skipField)
      return
      ;;
    --skipHeaders|--skipHeader)
      return
      ;;
    -t|--tags|--tag)
      return
      ;;
    --skipTags|--skipTag)
      return
      ;;
    -i|--ignoreResponseCodes|--ic)
      return
      ;;
    --ignoreResponseSize|--is)
      return
      ;;
    --ignoreResponseWords|--iw)
      return
      ;;
    --ignoreResponseLines|--il)
      return
      ;;
    --ignoreResponseRegex|--ir)
      return
      ;;
    --fieldsFuzzingStrategy)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${fieldsFuzzingStrategy_option_args[@]}" ) )
      return $?
      ;;
    --maxFieldsToRemove)
      return
      ;;
    --edgeSpacesStrategy)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${edgeSpacesStrategy_option_args[@]}" ) )
      return $?
      ;;
    --sanitizationStrategy)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${sanitizationStrategy_option_args[@]}" ) )
      return $?
      ;;
    --largeStringsSize)
      return
      ;;
    --randomHeadersNumber)
      return
      ;;
    --selfReferenceDepth|-L)
      return
      ;;
    --contentType)
      return
      ;;
    --oneOfSelection|--anyOfSelection)
      return
      ;;
    --limitXxxOfCombinations)
      return
      ;;
    -l|--log)
      return
      ;;
    -g|--skipLog)
      return
      ;;
    -O|--onlyLog)
      return
      ;;
    --reportFormat)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${reportFormat_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      return
      ;;
    --maxResponseTimeInMs)
      return
      ;;
    --verbosity)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${verbosity_option_args[@]}" ) )
      return $?
      ;;
    --maskHeaders)
      return
      ;;
    --words|-w)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --matchResponseCodes|--mc)
      return
      ;;
    --matchResponseSize|--ms)
      return
      ;;
    --matchResponseWords|--mw)
      return
      ;;
    --matchResponseLines|--ml)
      return
      ;;
    --matchResponseRegex|--mr)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate-completion` subcommand.
function _picocli_cats_generatecompletion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_cats_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="generate-completion list replay run fuzz lint info stats validate random generate"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_cats_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-p --paths paths -f --fuzzers fuzzers -m --mutators mutators --cmt --customMutatorTypes -s --fieldsFuzzerStrategies fieldsFuzzerStrategies --formats formats -j --json -h --help -V --version"
  local arg_opts="--path --tag -c --contract"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --path)
      return
      ;;
    --tag)
      return
      ;;
    -c|--contract)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `replay` subcommand.
function _picocli_cats_replay() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-D --debug -h --help -V --version"
  local arg_opts="--sslKeystore --sslKeystorePwd --sslKeyPwd --basicAuth --basicauth --proxyHost --proxyPort --authRefreshScript --ars --authRefreshInterval --ari -H -s --server -o --output"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --sslKeystore)
      return
      ;;
    --sslKeystorePwd)
      return
      ;;
    --sslKeyPwd)
      return
      ;;
    --basicAuth|--basicauth)
      return
      ;;
    --proxyHost)
      return
      ;;
    --proxyPort)
      return
      ;;
    --authRefreshScript|--ars)
      return
      ;;
    --authRefreshInterval|--ari)
      return
      ;;
    -H)
      return
      ;;
    -s|--server)
      return
      ;;
    -o|--output)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_cats_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-D --debug --printExecutionStatistics --printDetailedExecutionStatistics --timestampReports -j --json --checkUpdate --color --printProgress --createRefData --ignoreResponseCodeUndocumentedCheck --iu --ignoreResponseBodyCheck --ib --ignoreResponseContentTypeCheck --it -k --skipReportingForIgnoredCodes --skipReportingForIgnored --sri --srs --skipReportingForSuccess --srw --skipReportingForWarning -b --blackbox -h --help -V --version"
  local arg_opts="--maxRequestsPerMinute --connectionTimeout --writeTimeout --readTimeout --userAgent -c --contract -s --server --sslKeystore --sslKeystorePwd --sslKeyPwd --basicAuth --basicauth --proxyHost --proxyPort --authRefreshScript --ars --authRefreshInterval --ari -l --log -g --skipLog -O --onlyLog --reportFormat -o --output --maxResponseTimeInMs --verbosity --maskHeaders --headers --queryParams -H --refData --contentType --oneOfSelection --anyOfSelection -i --ignoreResponseCodes --ic --ignoreResponseSize --is --ignoreResponseWords --iw --ignoreResponseLines --il --ignoreResponseRegex --ir"
  local reportFormat_option_args=("HTML_ONLY" "HTML_JS" "JUNIT") # --reportFormat values
  local verbosity_option_args=("SUMMARY" "DETAILED") # --verbosity values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --maxRequestsPerMinute)
      return
      ;;
    --connectionTimeout)
      return
      ;;
    --writeTimeout)
      return
      ;;
    --readTimeout)
      return
      ;;
    --userAgent)
      return
      ;;
    -c|--contract)
      return
      ;;
    -s|--server)
      return
      ;;
    --sslKeystore)
      return
      ;;
    --sslKeystorePwd)
      return
      ;;
    --sslKeyPwd)
      return
      ;;
    --basicAuth|--basicauth)
      return
      ;;
    --proxyHost)
      return
      ;;
    --proxyPort)
      return
      ;;
    --authRefreshScript|--ars)
      return
      ;;
    --authRefreshInterval|--ari)
      return
      ;;
    -l|--log)
      return
      ;;
    -g|--skipLog)
      return
      ;;
    -O|--onlyLog)
      return
      ;;
    --reportFormat)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${reportFormat_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      return
      ;;
    --maxResponseTimeInMs)
      return
      ;;
    --verbosity)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${verbosity_option_args[@]}" ) )
      return $?
      ;;
    --maskHeaders)
      return
      ;;
    --headers)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --queryParams)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -H)
      return
      ;;
    --refData)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --contentType)
      return
      ;;
    --oneOfSelection|--anyOfSelection)
      return
      ;;
    -i|--ignoreResponseCodes|--ic)
      return
      ;;
    --ignoreResponseSize|--is)
      return
      ;;
    --ignoreResponseWords|--iw)
      return
      ;;
    --ignoreResponseLines|--il)
      return
      ;;
    --ignoreResponseRegex|--ir)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "run" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fuzz` subcommand.
function _picocli_cats_fuzz() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-D --debug --printExecutionStatistics --printDetailedExecutionStatistics --timestampReports -j --json --checkUpdate --color --printProgress --matchInput --mi --ignoreResponseCodeUndocumentedCheck --iu --ignoreResponseBodyCheck --ib --ignoreResponseContentTypeCheck --it -k --skipReportingForIgnoredCodes --skipReportingForIgnored --sri --srs --skipReportingForSuccess --srw --skipReportingForWarning -b --blackbox --simpleReplace -h --help -V --version"
  local arg_opts="--maxRequestsPerMinute --connectionTimeout --writeTimeout --readTimeout --userAgent -c --contract -s --server --sslKeystore --sslKeystorePwd --sslKeyPwd --basicAuth --basicauth --proxyHost --proxyPort --authRefreshScript --ars --authRefreshInterval --ari -l --log -g --skipLog -O --onlyLog --reportFormat -o --output --maxResponseTimeInMs --verbosity --maskHeaders --matchResponseCodes --mc --matchResponseSize --ms --matchResponseWords --mw --matchResponseLines --ml --matchResponseRegex --mr -i --ignoreResponseCodes --ic --ignoreResponseSize --is --ignoreResponseWords --iw --ignoreResponseLines --il --ignoreResponseRegex --ir --words -w --headers -H --data -d --httpMethod -X --targetFields -t"
  local reportFormat_option_args=("HTML_ONLY" "HTML_JS" "JUNIT") # --reportFormat values
  local verbosity_option_args=("SUMMARY" "DETAILED") # --verbosity values
  local httpMethod_option_args=("POST" "PUT" "GET" "TRACE" "DELETE" "PATCH" "HEAD" "CONNECT" "COPY" "MOVE" "PROPPATCH" "PROPFIND" "MKCOL" "LOCK" "UNLOCK" "SEARCH" "BIND" "UNBIND" "REBIND" "MKREDIRECTREF" "UPDATEREDIRECTREF" "ORDERPATCH" "ACL" "REPORT" "DIFF" "VERIFY" "PUBLISH" "UNPUBLISH" "BATCH" "VIEW" "PURGE" "DEBUG" "SUBSCRIBE" "UNSUBSCRIBE" "MERGE" "INDEX") # --httpMethod values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --maxRequestsPerMinute)
      return
      ;;
    --connectionTimeout)
      return
      ;;
    --writeTimeout)
      return
      ;;
    --readTimeout)
      return
      ;;
    --userAgent)
      return
      ;;
    -c|--contract)
      return
      ;;
    -s|--server)
      return
      ;;
    --sslKeystore)
      return
      ;;
    --sslKeystorePwd)
      return
      ;;
    --sslKeyPwd)
      return
      ;;
    --basicAuth|--basicauth)
      return
      ;;
    --proxyHost)
      return
      ;;
    --proxyPort)
      return
      ;;
    --authRefreshScript|--ars)
      return
      ;;
    --authRefreshInterval|--ari)
      return
      ;;
    -l|--log)
      return
      ;;
    -g|--skipLog)
      return
      ;;
    -O|--onlyLog)
      return
      ;;
    --reportFormat)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${reportFormat_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      return
      ;;
    --maxResponseTimeInMs)
      return
      ;;
    --verbosity)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${verbosity_option_args[@]}" ) )
      return $?
      ;;
    --maskHeaders)
      return
      ;;
    --matchResponseCodes|--mc)
      return
      ;;
    --matchResponseSize|--ms)
      return
      ;;
    --matchResponseWords|--mw)
      return
      ;;
    --matchResponseLines|--ml)
      return
      ;;
    --matchResponseRegex|--mr)
      return
      ;;
    -i|--ignoreResponseCodes|--ic)
      return
      ;;
    --ignoreResponseSize|--is)
      return
      ;;
    --ignoreResponseWords|--iw)
      return
      ;;
    --ignoreResponseLines|--il)
      return
      ;;
    --ignoreResponseRegex|--ir)
      return
      ;;
    --words|-w)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --headers|-H)
      return
      ;;
    --data|-d)
      return
      ;;
    --httpMethod|-X)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${httpMethod_option_args[@]}" ) )
      return $?
      ;;
    --targetFields|-t)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lint` subcommand.
function _picocli_cats_lint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-D --debug --printExecutionStatistics --printDetailedExecutionStatistics --timestampReports -j --json --checkUpdate --color --printProgress -h --help -V --version"
  local arg_opts="-l --log -g --skipLog -O --onlyLog --reportFormat -o --output --maxResponseTimeInMs --verbosity --maskHeaders --pathNaming --pathVariablesNaming --queryParamsNaming --jsonObjectsNaming --jsonPropertiesNaming --headersNaming -c --contract --skipFuzzers"
  local reportFormat_option_args=("HTML_ONLY" "HTML_JS" "JUNIT") # --reportFormat values
  local verbosity_option_args=("SUMMARY" "DETAILED") # --verbosity values
  local pathNaming_option_args=("SNAKE" "KEBAB" "HTTP_HEADER" "PASCAL" "CAMEL") # --pathNaming values
  local pathVariablesNaming_option_args=("SNAKE" "KEBAB" "HTTP_HEADER" "PASCAL" "CAMEL") # --pathVariablesNaming values
  local queryParamsNaming_option_args=("SNAKE" "KEBAB" "HTTP_HEADER" "PASCAL" "CAMEL") # --queryParamsNaming values
  local jsonObjectsNaming_option_args=("SNAKE" "KEBAB" "HTTP_HEADER" "PASCAL" "CAMEL") # --jsonObjectsNaming values
  local jsonPropertiesNaming_option_args=("SNAKE" "KEBAB" "HTTP_HEADER" "PASCAL" "CAMEL") # --jsonPropertiesNaming values
  local headersNaming_option_args=("SNAKE" "KEBAB" "HTTP_HEADER" "PASCAL" "CAMEL") # --headersNaming values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -l|--log)
      return
      ;;
    -g|--skipLog)
      return
      ;;
    -O|--onlyLog)
      return
      ;;
    --reportFormat)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${reportFormat_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      return
      ;;
    --maxResponseTimeInMs)
      return
      ;;
    --verbosity)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${verbosity_option_args[@]}" ) )
      return $?
      ;;
    --maskHeaders)
      return
      ;;
    --pathNaming)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${pathNaming_option_args[@]}" ) )
      return $?
      ;;
    --pathVariablesNaming)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${pathVariablesNaming_option_args[@]}" ) )
      return $?
      ;;
    --queryParamsNaming)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${queryParamsNaming_option_args[@]}" ) )
      return $?
      ;;
    --jsonObjectsNaming)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${jsonObjectsNaming_option_args[@]}" ) )
      return $?
      ;;
    --jsonPropertiesNaming)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${jsonPropertiesNaming_option_args[@]}" ) )
      return $?
      ;;
    --headersNaming)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${headersNaming_option_args[@]}" ) )
      return $?
      ;;
    -c|--contract)
      return
      ;;
    --skipFuzzers)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `info` subcommand.
function _picocli_cats_info() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-j --json -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `stats` subcommand.
function _picocli_cats_stats() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-j --json -d --detailed -h --help -V --version"
  local arg_opts="-c --contract -s --skip"
  local skip_option_args=("TITLE" "DESCRIPTION" "VERSION" "DOCS" "OPENAPI_VERSION" "PATHS" "OPERATIONS" "DEPRECATED_OPERATIONS" "DEPRECATED_HEADERS" "SERVERS" "SECURITY_SCHEMES" "UNUSED_SCHEMES" "TAGS" "VERSIONING" "CONSUMES" "PRODUCES" "HTTP_METHODS" "RATE_LIMIT" "TRACING" "IDEMPOTENCY" "AUTHENTICATION" "RESPONSE_CODES" "EXTENSIONS" "PAGINATION" "MONITORING") # --skip values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -c|--contract)
      return
      ;;
    -s|--skip)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${skip_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `validate` subcommand.
function _picocli_cats_validate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-j --json -d --detailed -h --help -V --version"
  local arg_opts="-c --contract"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -c|--contract)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `random` subcommand.
function _picocli_cats_random() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-D --debug --printExecutionStatistics --printDetailedExecutionStatistics --timestampReports -j --json --checkUpdate --color --printProgress --matchInput --mi --createRefData -h --help -V --version"
  local arg_opts="--maxRequestsPerMinute --connectionTimeout --writeTimeout --readTimeout --userAgent -c --contract -s --server --sslKeystore --sslKeystorePwd --sslKeyPwd --basicAuth --basicauth --proxyHost --proxyPort --authRefreshScript --ars --authRefreshInterval --ari -l --log -g --skipLog -O --onlyLog --reportFormat -o --output --maxResponseTimeInMs --verbosity --maskHeaders --matchResponseCodes --mc --matchResponseSize --ms --matchResponseWords --mw --matchResponseLines --ml --matchResponseRegex --mr --fuzzersConfig --fc --urlParams -P --headers -H --queryParams -Q --refData -R --functionalFuzzerFile --securityFuzzerFile --mutators -m --stopAfterTimeInSec --st --stopAfterErrors --se --stopAfterMutations --sm --httpMethod -X --contentType --oneOfSelection --anyOfSelection --path -p"
  local reportFormat_option_args=("HTML_ONLY" "HTML_JS" "JUNIT") # --reportFormat values
  local verbosity_option_args=("SUMMARY" "DETAILED") # --verbosity values
  local httpMethod_option_args=("POST" "PUT" "GET" "TRACE" "DELETE" "PATCH" "HEAD" "CONNECT" "COPY" "MOVE" "PROPPATCH" "PROPFIND" "MKCOL" "LOCK" "UNLOCK" "SEARCH" "BIND" "UNBIND" "REBIND" "MKREDIRECTREF" "UPDATEREDIRECTREF" "ORDERPATCH" "ACL" "REPORT" "DIFF" "VERIFY" "PUBLISH" "UNPUBLISH" "BATCH" "VIEW" "PURGE" "DEBUG" "SUBSCRIBE" "UNSUBSCRIBE" "MERGE" "INDEX") # --httpMethod values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --maxRequestsPerMinute)
      return
      ;;
    --connectionTimeout)
      return
      ;;
    --writeTimeout)
      return
      ;;
    --readTimeout)
      return
      ;;
    --userAgent)
      return
      ;;
    -c|--contract)
      return
      ;;
    -s|--server)
      return
      ;;
    --sslKeystore)
      return
      ;;
    --sslKeystorePwd)
      return
      ;;
    --sslKeyPwd)
      return
      ;;
    --basicAuth|--basicauth)
      return
      ;;
    --proxyHost)
      return
      ;;
    --proxyPort)
      return
      ;;
    --authRefreshScript|--ars)
      return
      ;;
    --authRefreshInterval|--ari)
      return
      ;;
    -l|--log)
      return
      ;;
    -g|--skipLog)
      return
      ;;
    -O|--onlyLog)
      return
      ;;
    --reportFormat)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${reportFormat_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      return
      ;;
    --maxResponseTimeInMs)
      return
      ;;
    --verbosity)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${verbosity_option_args[@]}" ) )
      return $?
      ;;
    --maskHeaders)
      return
      ;;
    --matchResponseCodes|--mc)
      return
      ;;
    --matchResponseSize|--ms)
      return
      ;;
    --matchResponseWords|--mw)
      return
      ;;
    --matchResponseLines|--ml)
      return
      ;;
    --matchResponseRegex|--mr)
      return
      ;;
    --fuzzersConfig|--fc)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --urlParams)
      return
      ;;
    -P)
      return
      ;;
    --headers)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -H)
      return
      ;;
    --queryParams)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -Q)
      return
      ;;
    --refData)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -R)
      return
      ;;
    --functionalFuzzerFile)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --securityFuzzerFile)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --mutators|-m)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --stopAfterTimeInSec|--st)
      return
      ;;
    --stopAfterErrors|--se)
      return
      ;;
    --stopAfterMutations|--sm)
      return
      ;;
    --httpMethod|-X)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${httpMethod_option_args[@]}" ) )
      return $?
      ;;
    --contentType)
      return
      ;;
    --oneOfSelection|--anyOfSelection)
      return
      ;;
    --path|-p)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate` subcommand.
function _picocli_cats_generate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-D --debug --pretty -h --help -V --version"
  local arg_opts="-c --contract --httpMethod -X --path -p --limit -l --contentType"
  local httpMethod_option_args=("POST" "PUT" "GET" "TRACE" "DELETE" "PATCH" "HEAD" "CONNECT" "COPY" "MOVE" "PROPPATCH" "PROPFIND" "MKCOL" "LOCK" "UNLOCK" "SEARCH" "BIND" "UNBIND" "REBIND" "MKREDIRECTREF" "UPDATEREDIRECTREF" "ORDERPATCH" "ACL" "REPORT" "DIFF" "VERIFY" "PUBLISH" "UNPUBLISH" "BATCH" "VIEW" "PURGE" "DEBUG" "SUBSCRIBE" "UNSUBSCRIBE" "MERGE" "INDEX") # --httpMethod values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -c|--contract)
      return
      ;;
    --httpMethod|-X)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${httpMethod_option_args[@]}" ) )
      return $?
      ;;
    --path|-p)
      return
      ;;
    --limit|-l)
      return
      ;;
    --contentType)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `cats`, `cats.sh`, and `cats.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_cats` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_cats -o default cats cats.sh cats.bash

